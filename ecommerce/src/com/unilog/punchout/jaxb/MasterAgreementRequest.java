//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.10.07 at 10:13:20 AM EDT 
//


package com.unilog.punchout.jaxb;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}MasterAgreementRequestHeader"/>
 *         &lt;element ref="{}AgreementItemOut" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "masterAgreementRequestHeader",
    "agreementItemOut"
})
@XmlRootElement(name = "MasterAgreementRequest")
public class MasterAgreementRequest
    implements Serializable, Equals, HashCode, ToString
{

    /**
	 * 
	 */
	private static final long serialVersionUID = -4784564702313416894L;
	@XmlElement(name = "MasterAgreementRequestHeader", required = true)
    protected MasterAgreementRequestHeader masterAgreementRequestHeader;
    @XmlElement(name = "AgreementItemOut")
    protected List<AgreementItemOut> agreementItemOut;

    /**
     * Gets the value of the masterAgreementRequestHeader property.
     * 
     * @return
     *     possible object is
     *     {@link MasterAgreementRequestHeader }
     *     
     */
    public MasterAgreementRequestHeader getMasterAgreementRequestHeader() {
        return masterAgreementRequestHeader;
    }

    /**
     * Sets the value of the masterAgreementRequestHeader property.
     * 
     * @param value
     *     allowed object is
     *     {@link MasterAgreementRequestHeader }
     *     
     */
    public void setMasterAgreementRequestHeader(MasterAgreementRequestHeader value) {
        this.masterAgreementRequestHeader = value;
    }

    /**
     * Gets the value of the agreementItemOut property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the agreementItemOut property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAgreementItemOut().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AgreementItemOut }
     * 
     * 
     */
    public List<AgreementItemOut> getAgreementItemOut() {
        if (agreementItemOut == null) {
            agreementItemOut = new ArrayList<AgreementItemOut>();
        }
        return this.agreementItemOut;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            MasterAgreementRequestHeader theMasterAgreementRequestHeader;
            theMasterAgreementRequestHeader = this.getMasterAgreementRequestHeader();
            strategy.appendField(locator, this, "masterAgreementRequestHeader", buffer, theMasterAgreementRequestHeader);
        }
        {
            List<AgreementItemOut> theAgreementItemOut;
            theAgreementItemOut = (((this.agreementItemOut!= null)&&(!this.agreementItemOut.isEmpty()))?this.getAgreementItemOut():null);
            strategy.appendField(locator, this, "agreementItemOut", buffer, theAgreementItemOut);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MasterAgreementRequest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MasterAgreementRequest that = ((MasterAgreementRequest) object);
        {
            MasterAgreementRequestHeader lhsMasterAgreementRequestHeader;
            lhsMasterAgreementRequestHeader = this.getMasterAgreementRequestHeader();
            MasterAgreementRequestHeader rhsMasterAgreementRequestHeader;
            rhsMasterAgreementRequestHeader = that.getMasterAgreementRequestHeader();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "masterAgreementRequestHeader", lhsMasterAgreementRequestHeader), LocatorUtils.property(thatLocator, "masterAgreementRequestHeader", rhsMasterAgreementRequestHeader), lhsMasterAgreementRequestHeader, rhsMasterAgreementRequestHeader)) {
                return false;
            }
        }
        {
            List<AgreementItemOut> lhsAgreementItemOut;
            lhsAgreementItemOut = (((this.agreementItemOut!= null)&&(!this.agreementItemOut.isEmpty()))?this.getAgreementItemOut():null);
            List<AgreementItemOut> rhsAgreementItemOut;
            rhsAgreementItemOut = (((that.agreementItemOut!= null)&&(!that.agreementItemOut.isEmpty()))?that.getAgreementItemOut():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "agreementItemOut", lhsAgreementItemOut), LocatorUtils.property(thatLocator, "agreementItemOut", rhsAgreementItemOut), lhsAgreementItemOut, rhsAgreementItemOut)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            MasterAgreementRequestHeader theMasterAgreementRequestHeader;
            theMasterAgreementRequestHeader = this.getMasterAgreementRequestHeader();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "masterAgreementRequestHeader", theMasterAgreementRequestHeader), currentHashCode, theMasterAgreementRequestHeader);
        }
        {
            List<AgreementItemOut> theAgreementItemOut;
            theAgreementItemOut = (((this.agreementItemOut!= null)&&(!this.agreementItemOut.isEmpty()))?this.getAgreementItemOut():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "agreementItemOut", theAgreementItemOut), currentHashCode, theAgreementItemOut);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
