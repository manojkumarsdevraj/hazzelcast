//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.10.07 at 10:13:20 AM EDT 
//


package com.unilog.punchout.jaxb;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}OriginatorCookie"/>
 *         &lt;sequence minOccurs="0">
 *           &lt;element ref="{}BrowserFormPost"/>
 *           &lt;element ref="{}Followup" minOccurs="0"/>
 *         &lt;/sequence>
 *         &lt;element ref="{}SelectedService"/>
 *         &lt;element ref="{}Extrinsic" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "originatorCookie",
    "browserFormPost",
    "followup",
    "selectedService",
    "extrinsic"
})
@XmlRootElement(name = "ProviderSetupRequest")
public class ProviderSetupRequest
    implements Serializable, Equals, HashCode, ToString
{

    /**
	 * 
	 */
	private static final long serialVersionUID = 327747545749127292L;
	@XmlElement(name = "OriginatorCookie", required = true)
    protected OriginatorCookie originatorCookie;
    @XmlElement(name = "BrowserFormPost")
    protected BrowserFormPost browserFormPost;
    @XmlElement(name = "Followup")
    protected Followup followup;
    @XmlElement(name = "SelectedService", required = true)
    protected SelectedService selectedService;
    @XmlElement(name = "Extrinsic")
    protected List<Extrinsic> extrinsic;

    /**
     * Gets the value of the originatorCookie property.
     * 
     * @return
     *     possible object is
     *     {@link OriginatorCookie }
     *     
     */
    public OriginatorCookie getOriginatorCookie() {
        return originatorCookie;
    }

    /**
     * Sets the value of the originatorCookie property.
     * 
     * @param value
     *     allowed object is
     *     {@link OriginatorCookie }
     *     
     */
    public void setOriginatorCookie(OriginatorCookie value) {
        this.originatorCookie = value;
    }

    /**
     * Gets the value of the browserFormPost property.
     * 
     * @return
     *     possible object is
     *     {@link BrowserFormPost }
     *     
     */
    public BrowserFormPost getBrowserFormPost() {
        return browserFormPost;
    }

    /**
     * Sets the value of the browserFormPost property.
     * 
     * @param value
     *     allowed object is
     *     {@link BrowserFormPost }
     *     
     */
    public void setBrowserFormPost(BrowserFormPost value) {
        this.browserFormPost = value;
    }

    /**
     * Gets the value of the followup property.
     * 
     * @return
     *     possible object is
     *     {@link Followup }
     *     
     */
    public Followup getFollowup() {
        return followup;
    }

    /**
     * Sets the value of the followup property.
     * 
     * @param value
     *     allowed object is
     *     {@link Followup }
     *     
     */
    public void setFollowup(Followup value) {
        this.followup = value;
    }

    /**
     * Gets the value of the selectedService property.
     * 
     * @return
     *     possible object is
     *     {@link SelectedService }
     *     
     */
    public SelectedService getSelectedService() {
        return selectedService;
    }

    /**
     * Sets the value of the selectedService property.
     * 
     * @param value
     *     allowed object is
     *     {@link SelectedService }
     *     
     */
    public void setSelectedService(SelectedService value) {
        this.selectedService = value;
    }

    /**
     * Gets the value of the extrinsic property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the extrinsic property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExtrinsic().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Extrinsic }
     * 
     * 
     */
    public List<Extrinsic> getExtrinsic() {
        if (extrinsic == null) {
            extrinsic = new ArrayList<Extrinsic>();
        }
        return this.extrinsic;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            OriginatorCookie theOriginatorCookie;
            theOriginatorCookie = this.getOriginatorCookie();
            strategy.appendField(locator, this, "originatorCookie", buffer, theOriginatorCookie);
        }
        {
            BrowserFormPost theBrowserFormPost;
            theBrowserFormPost = this.getBrowserFormPost();
            strategy.appendField(locator, this, "browserFormPost", buffer, theBrowserFormPost);
        }
        {
            Followup theFollowup;
            theFollowup = this.getFollowup();
            strategy.appendField(locator, this, "followup", buffer, theFollowup);
        }
        {
            SelectedService theSelectedService;
            theSelectedService = this.getSelectedService();
            strategy.appendField(locator, this, "selectedService", buffer, theSelectedService);
        }
        {
            List<Extrinsic> theExtrinsic;
            theExtrinsic = (((this.extrinsic!= null)&&(!this.extrinsic.isEmpty()))?this.getExtrinsic():null);
            strategy.appendField(locator, this, "extrinsic", buffer, theExtrinsic);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProviderSetupRequest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ProviderSetupRequest that = ((ProviderSetupRequest) object);
        {
            OriginatorCookie lhsOriginatorCookie;
            lhsOriginatorCookie = this.getOriginatorCookie();
            OriginatorCookie rhsOriginatorCookie;
            rhsOriginatorCookie = that.getOriginatorCookie();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "originatorCookie", lhsOriginatorCookie), LocatorUtils.property(thatLocator, "originatorCookie", rhsOriginatorCookie), lhsOriginatorCookie, rhsOriginatorCookie)) {
                return false;
            }
        }
        {
            BrowserFormPost lhsBrowserFormPost;
            lhsBrowserFormPost = this.getBrowserFormPost();
            BrowserFormPost rhsBrowserFormPost;
            rhsBrowserFormPost = that.getBrowserFormPost();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "browserFormPost", lhsBrowserFormPost), LocatorUtils.property(thatLocator, "browserFormPost", rhsBrowserFormPost), lhsBrowserFormPost, rhsBrowserFormPost)) {
                return false;
            }
        }
        {
            Followup lhsFollowup;
            lhsFollowup = this.getFollowup();
            Followup rhsFollowup;
            rhsFollowup = that.getFollowup();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "followup", lhsFollowup), LocatorUtils.property(thatLocator, "followup", rhsFollowup), lhsFollowup, rhsFollowup)) {
                return false;
            }
        }
        {
            SelectedService lhsSelectedService;
            lhsSelectedService = this.getSelectedService();
            SelectedService rhsSelectedService;
            rhsSelectedService = that.getSelectedService();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "selectedService", lhsSelectedService), LocatorUtils.property(thatLocator, "selectedService", rhsSelectedService), lhsSelectedService, rhsSelectedService)) {
                return false;
            }
        }
        {
            List<Extrinsic> lhsExtrinsic;
            lhsExtrinsic = (((this.extrinsic!= null)&&(!this.extrinsic.isEmpty()))?this.getExtrinsic():null);
            List<Extrinsic> rhsExtrinsic;
            rhsExtrinsic = (((that.extrinsic!= null)&&(!that.extrinsic.isEmpty()))?that.getExtrinsic():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "extrinsic", lhsExtrinsic), LocatorUtils.property(thatLocator, "extrinsic", rhsExtrinsic), lhsExtrinsic, rhsExtrinsic)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            OriginatorCookie theOriginatorCookie;
            theOriginatorCookie = this.getOriginatorCookie();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originatorCookie", theOriginatorCookie), currentHashCode, theOriginatorCookie);
        }
        {
            BrowserFormPost theBrowserFormPost;
            theBrowserFormPost = this.getBrowserFormPost();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "browserFormPost", theBrowserFormPost), currentHashCode, theBrowserFormPost);
        }
        {
            Followup theFollowup;
            theFollowup = this.getFollowup();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "followup", theFollowup), currentHashCode, theFollowup);
        }
        {
            SelectedService theSelectedService;
            theSelectedService = this.getSelectedService();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "selectedService", theSelectedService), currentHashCode, theSelectedService);
        }
        {
            List<Extrinsic> theExtrinsic;
            theExtrinsic = (((this.extrinsic!= null)&&(!this.extrinsic.isEmpty()))?this.getExtrinsic():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extrinsic", theExtrinsic), currentHashCode, theExtrinsic);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
