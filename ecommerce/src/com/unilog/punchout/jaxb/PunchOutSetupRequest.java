//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.10.07 at 10:13:20 AM EDT 
//


package com.unilog.punchout.jaxb;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}BuyerCookie"/>
 *         &lt;element ref="{}Extrinsic" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}BrowserFormPost" minOccurs="0"/>
 *         &lt;element ref="{}Contact" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{}SupplierSetup" minOccurs="0"/>
 *         &lt;element ref="{}ShipTo" minOccurs="0"/>
 *         &lt;element ref="{}SelectedItem" minOccurs="0"/>
 *         &lt;element ref="{}ItemOut" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="operation" use="required">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *             &lt;enumeration value="edit"/>
 *             &lt;enumeration value="create"/>
 *             &lt;enumeration value="source"/>
 *             &lt;enumeration value="inspect"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "buyerCookie",
    "extrinsic",
    "browserFormPost",
    "contact",
    "supplierSetup",
    "shipTo",
    "selectedItem",
    "itemOut"
})
@XmlRootElement(name = "PunchOutSetupRequest")
public class PunchOutSetupRequest
    implements Serializable, Equals, HashCode, ToString
{

    /**
	 * 
	 */
	private static final long serialVersionUID = -352987486205958250L;
	@XmlElement(name = "BuyerCookie", required = true)
    protected BuyerCookie buyerCookie;
    @XmlElement(name = "Extrinsic")
    protected List<Extrinsic> extrinsic;
    @XmlElement(name = "BrowserFormPost")
    protected BrowserFormPost browserFormPost;
    @XmlElement(name = "Contact")
    protected List<Contact> contact;
    @XmlElement(name = "SupplierSetup")
    protected SupplierSetup supplierSetup;
    @XmlElement(name = "ShipTo")
    protected ShipTo shipTo;
    @XmlElement(name = "SelectedItem")
    protected SelectedItem selectedItem;
    @XmlElement(name = "ItemOut")
    protected List<ItemOut> itemOut;
    @XmlAttribute(name = "operation", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String operation;

    /**
     * Gets the value of the buyerCookie property.
     * 
     * @return
     *     possible object is
     *     {@link BuyerCookie }
     *     
     */
    public BuyerCookie getBuyerCookie() {
        return buyerCookie;
    }

    /**
     * Sets the value of the buyerCookie property.
     * 
     * @param value
     *     allowed object is
     *     {@link BuyerCookie }
     *     
     */
    public void setBuyerCookie(BuyerCookie value) {
        this.buyerCookie = value;
    }

    /**
     * Gets the value of the extrinsic property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the extrinsic property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExtrinsic().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Extrinsic }
     * 
     * 
     */
    public List<Extrinsic> getExtrinsic() {
        if (extrinsic == null) {
            extrinsic = new ArrayList<Extrinsic>();
        }
        return this.extrinsic;
    }

    /**
     * Gets the value of the browserFormPost property.
     * 
     * @return
     *     possible object is
     *     {@link BrowserFormPost }
     *     
     */
    public BrowserFormPost getBrowserFormPost() {
        return browserFormPost;
    }

    /**
     * Sets the value of the browserFormPost property.
     * 
     * @param value
     *     allowed object is
     *     {@link BrowserFormPost }
     *     
     */
    public void setBrowserFormPost(BrowserFormPost value) {
        this.browserFormPost = value;
    }

    /**
     * Gets the value of the contact property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the contact property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContact().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Contact }
     * 
     * 
     */
    public List<Contact> getContact() {
        if (contact == null) {
            contact = new ArrayList<Contact>();
        }
        return this.contact;
    }

    /**
     * Gets the value of the supplierSetup property.
     * 
     * @return
     *     possible object is
     *     {@link SupplierSetup }
     *     
     */
    public SupplierSetup getSupplierSetup() {
        return supplierSetup;
    }

    /**
     * Sets the value of the supplierSetup property.
     * 
     * @param value
     *     allowed object is
     *     {@link SupplierSetup }
     *     
     */
    public void setSupplierSetup(SupplierSetup value) {
        this.supplierSetup = value;
    }

    /**
     * Gets the value of the shipTo property.
     * 
     * @return
     *     possible object is
     *     {@link ShipTo }
     *     
     */
    public ShipTo getShipTo() {
        return shipTo;
    }

    /**
     * Sets the value of the shipTo property.
     * 
     * @param value
     *     allowed object is
     *     {@link ShipTo }
     *     
     */
    public void setShipTo(ShipTo value) {
        this.shipTo = value;
    }

    /**
     * Gets the value of the selectedItem property.
     * 
     * @return
     *     possible object is
     *     {@link SelectedItem }
     *     
     */
    public SelectedItem getSelectedItem() {
        return selectedItem;
    }

    /**
     * Sets the value of the selectedItem property.
     * 
     * @param value
     *     allowed object is
     *     {@link SelectedItem }
     *     
     */
    public void setSelectedItem(SelectedItem value) {
        this.selectedItem = value;
    }

    /**
     * Gets the value of the itemOut property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the itemOut property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getItemOut().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ItemOut }
     * 
     * 
     */
    public List<ItemOut> getItemOut() {
        if (itemOut == null) {
            itemOut = new ArrayList<ItemOut>();
        }
        return this.itemOut;
    }

    /**
     * Gets the value of the operation property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOperation() {
        return operation;
    }

    /**
     * Sets the value of the operation property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOperation(String value) {
        this.operation = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            BuyerCookie theBuyerCookie;
            theBuyerCookie = this.getBuyerCookie();
            strategy.appendField(locator, this, "buyerCookie", buffer, theBuyerCookie);
        }
        {
            List<Extrinsic> theExtrinsic;
            theExtrinsic = (((this.extrinsic!= null)&&(!this.extrinsic.isEmpty()))?this.getExtrinsic():null);
            strategy.appendField(locator, this, "extrinsic", buffer, theExtrinsic);
        }
        {
            BrowserFormPost theBrowserFormPost;
            theBrowserFormPost = this.getBrowserFormPost();
            strategy.appendField(locator, this, "browserFormPost", buffer, theBrowserFormPost);
        }
        {
            List<Contact> theContact;
            theContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            strategy.appendField(locator, this, "contact", buffer, theContact);
        }
        {
            SupplierSetup theSupplierSetup;
            theSupplierSetup = this.getSupplierSetup();
            strategy.appendField(locator, this, "supplierSetup", buffer, theSupplierSetup);
        }
        {
            ShipTo theShipTo;
            theShipTo = this.getShipTo();
            strategy.appendField(locator, this, "shipTo", buffer, theShipTo);
        }
        {
            SelectedItem theSelectedItem;
            theSelectedItem = this.getSelectedItem();
            strategy.appendField(locator, this, "selectedItem", buffer, theSelectedItem);
        }
        {
            List<ItemOut> theItemOut;
            theItemOut = (((this.itemOut!= null)&&(!this.itemOut.isEmpty()))?this.getItemOut():null);
            strategy.appendField(locator, this, "itemOut", buffer, theItemOut);
        }
        {
            String theOperation;
            theOperation = this.getOperation();
            strategy.appendField(locator, this, "operation", buffer, theOperation);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PunchOutSetupRequest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PunchOutSetupRequest that = ((PunchOutSetupRequest) object);
        {
            BuyerCookie lhsBuyerCookie;
            lhsBuyerCookie = this.getBuyerCookie();
            BuyerCookie rhsBuyerCookie;
            rhsBuyerCookie = that.getBuyerCookie();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "buyerCookie", lhsBuyerCookie), LocatorUtils.property(thatLocator, "buyerCookie", rhsBuyerCookie), lhsBuyerCookie, rhsBuyerCookie)) {
                return false;
            }
        }
        {
            List<Extrinsic> lhsExtrinsic;
            lhsExtrinsic = (((this.extrinsic!= null)&&(!this.extrinsic.isEmpty()))?this.getExtrinsic():null);
            List<Extrinsic> rhsExtrinsic;
            rhsExtrinsic = (((that.extrinsic!= null)&&(!that.extrinsic.isEmpty()))?that.getExtrinsic():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "extrinsic", lhsExtrinsic), LocatorUtils.property(thatLocator, "extrinsic", rhsExtrinsic), lhsExtrinsic, rhsExtrinsic)) {
                return false;
            }
        }
        {
            BrowserFormPost lhsBrowserFormPost;
            lhsBrowserFormPost = this.getBrowserFormPost();
            BrowserFormPost rhsBrowserFormPost;
            rhsBrowserFormPost = that.getBrowserFormPost();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "browserFormPost", lhsBrowserFormPost), LocatorUtils.property(thatLocator, "browserFormPost", rhsBrowserFormPost), lhsBrowserFormPost, rhsBrowserFormPost)) {
                return false;
            }
        }
        {
            List<Contact> lhsContact;
            lhsContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            List<Contact> rhsContact;
            rhsContact = (((that.contact!= null)&&(!that.contact.isEmpty()))?that.getContact():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contact", lhsContact), LocatorUtils.property(thatLocator, "contact", rhsContact), lhsContact, rhsContact)) {
                return false;
            }
        }
        {
            SupplierSetup lhsSupplierSetup;
            lhsSupplierSetup = this.getSupplierSetup();
            SupplierSetup rhsSupplierSetup;
            rhsSupplierSetup = that.getSupplierSetup();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supplierSetup", lhsSupplierSetup), LocatorUtils.property(thatLocator, "supplierSetup", rhsSupplierSetup), lhsSupplierSetup, rhsSupplierSetup)) {
                return false;
            }
        }
        {
            ShipTo lhsShipTo;
            lhsShipTo = this.getShipTo();
            ShipTo rhsShipTo;
            rhsShipTo = that.getShipTo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shipTo", lhsShipTo), LocatorUtils.property(thatLocator, "shipTo", rhsShipTo), lhsShipTo, rhsShipTo)) {
                return false;
            }
        }
        {
            SelectedItem lhsSelectedItem;
            lhsSelectedItem = this.getSelectedItem();
            SelectedItem rhsSelectedItem;
            rhsSelectedItem = that.getSelectedItem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "selectedItem", lhsSelectedItem), LocatorUtils.property(thatLocator, "selectedItem", rhsSelectedItem), lhsSelectedItem, rhsSelectedItem)) {
                return false;
            }
        }
        {
            List<ItemOut> lhsItemOut;
            lhsItemOut = (((this.itemOut!= null)&&(!this.itemOut.isEmpty()))?this.getItemOut():null);
            List<ItemOut> rhsItemOut;
            rhsItemOut = (((that.itemOut!= null)&&(!that.itemOut.isEmpty()))?that.getItemOut():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemOut", lhsItemOut), LocatorUtils.property(thatLocator, "itemOut", rhsItemOut), lhsItemOut, rhsItemOut)) {
                return false;
            }
        }
        {
            String lhsOperation;
            lhsOperation = this.getOperation();
            String rhsOperation;
            rhsOperation = that.getOperation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            BuyerCookie theBuyerCookie;
            theBuyerCookie = this.getBuyerCookie();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "buyerCookie", theBuyerCookie), currentHashCode, theBuyerCookie);
        }
        {
            List<Extrinsic> theExtrinsic;
            theExtrinsic = (((this.extrinsic!= null)&&(!this.extrinsic.isEmpty()))?this.getExtrinsic():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extrinsic", theExtrinsic), currentHashCode, theExtrinsic);
        }
        {
            BrowserFormPost theBrowserFormPost;
            theBrowserFormPost = this.getBrowserFormPost();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "browserFormPost", theBrowserFormPost), currentHashCode, theBrowserFormPost);
        }
        {
            List<Contact> theContact;
            theContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contact", theContact), currentHashCode, theContact);
        }
        {
            SupplierSetup theSupplierSetup;
            theSupplierSetup = this.getSupplierSetup();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplierSetup", theSupplierSetup), currentHashCode, theSupplierSetup);
        }
        {
            ShipTo theShipTo;
            theShipTo = this.getShipTo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shipTo", theShipTo), currentHashCode, theShipTo);
        }
        {
            SelectedItem theSelectedItem;
            theSelectedItem = this.getSelectedItem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "selectedItem", theSelectedItem), currentHashCode, theSelectedItem);
        }
        {
            List<ItemOut> theItemOut;
            theItemOut = (((this.itemOut!= null)&&(!this.itemOut.isEmpty()))?this.getItemOut():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemOut", theItemOut), currentHashCode, theItemOut);
        }
        {
            String theOperation;
            theOperation = this.getOperation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
