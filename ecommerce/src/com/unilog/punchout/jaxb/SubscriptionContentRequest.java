//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.10.07 at 10:13:20 AM EDT 
//


package com.unilog.punchout.jaxb;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}InternalID"/>
 *         &lt;element ref="{}SupplierID" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "internalID",
    "supplierID"
})
@XmlRootElement(name = "SubscriptionContentRequest")
public class SubscriptionContentRequest
    implements Serializable, Equals, HashCode, ToString
{

    /**
	 * 
	 */
	private static final long serialVersionUID = -7120810712246984380L;
	@XmlElement(name = "InternalID", required = true)
    protected InternalID internalID;
    @XmlElement(name = "SupplierID", required = true)
    protected List<SupplierID> supplierID;

    /**
     * Gets the value of the internalID property.
     * 
     * @return
     *     possible object is
     *     {@link InternalID }
     *     
     */
    public InternalID getInternalID() {
        return internalID;
    }

    /**
     * Sets the value of the internalID property.
     * 
     * @param value
     *     allowed object is
     *     {@link InternalID }
     *     
     */
    public void setInternalID(InternalID value) {
        this.internalID = value;
    }

    /**
     * Gets the value of the supplierID property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the supplierID property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSupplierID().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SupplierID }
     * 
     * 
     */
    public List<SupplierID> getSupplierID() {
        if (supplierID == null) {
            supplierID = new ArrayList<SupplierID>();
        }
        return this.supplierID;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            InternalID theInternalID;
            theInternalID = this.getInternalID();
            strategy.appendField(locator, this, "internalID", buffer, theInternalID);
        }
        {
            List<SupplierID> theSupplierID;
            theSupplierID = (((this.supplierID!= null)&&(!this.supplierID.isEmpty()))?this.getSupplierID():null);
            strategy.appendField(locator, this, "supplierID", buffer, theSupplierID);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SubscriptionContentRequest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SubscriptionContentRequest that = ((SubscriptionContentRequest) object);
        {
            InternalID lhsInternalID;
            lhsInternalID = this.getInternalID();
            InternalID rhsInternalID;
            rhsInternalID = that.getInternalID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "internalID", lhsInternalID), LocatorUtils.property(thatLocator, "internalID", rhsInternalID), lhsInternalID, rhsInternalID)) {
                return false;
            }
        }
        {
            List<SupplierID> lhsSupplierID;
            lhsSupplierID = (((this.supplierID!= null)&&(!this.supplierID.isEmpty()))?this.getSupplierID():null);
            List<SupplierID> rhsSupplierID;
            rhsSupplierID = (((that.supplierID!= null)&&(!that.supplierID.isEmpty()))?that.getSupplierID():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supplierID", lhsSupplierID), LocatorUtils.property(thatLocator, "supplierID", rhsSupplierID), lhsSupplierID, rhsSupplierID)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            InternalID theInternalID;
            theInternalID = this.getInternalID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "internalID", theInternalID), currentHashCode, theInternalID);
        }
        {
            List<SupplierID> theSupplierID;
            theSupplierID = (((this.supplierID!= null)&&(!this.supplierID.isEmpty()))?this.getSupplierID():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplierID", theSupplierID), currentHashCode, theSupplierID);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
