package com.unilog.sales;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.rmi.RemoteException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.stream.Collectors;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.ws.rs.HttpMethod;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;
import org.apache.struts2.ServletActionContext;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.bronto.api.BrontoApi;
import com.erp.service.ProductManagement;
import com.erp.service.SalesOrderManagement;
import com.erp.service.UserManagement;
import com.erp.service.cimm2bcentral.action.UserManagementAction;
import com.erp.service.cimm2bcentral.models.PackageDimension;
import com.erp.service.cimm2bcentral.models.PackageInfo;
import com.erp.service.cimm2bcentral.service.FedExFreightSerivce;
import com.erp.service.cimm2bcentral.service.UpsFreightService;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralClient;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralDocumentDetail;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralManagementBody;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralManagementHeader;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralPaypalAuthorizeRequest;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralPaypalAuthorizeResponse;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralProjectManagementInformation;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralProjectManagementJobIdInfo;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralRequestParams;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralResponseEntity;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralStatus;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralVendorItemsRequest;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralVendorItemsResponse;
import com.erp.service.cimm2bcentral.utilities.Cimm2BCentralVendorLineItems;
import com.erp.service.eclipse.action.SalesOrderManagementAction;
import com.erp.service.impl.ProductManagementImpl;
import com.erp.service.impl.SalesOrderManagementImpl;
import com.erp.service.impl.UserManagementImpl;
import com.erp.service.model.ProductManagementModel;
import com.erp.service.model.SalesOrderManagementModel;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;
import com.opensymphony.xwork2.ActionSupport;
import com.paymentgateway.cardconnect.CardConnectPaymentGateway;
import com.paymentgateway.elementexpress.transaction.Address;
import com.paymentgateway.elementexpress.transaction.Application;
import com.paymentgateway.elementexpress.transaction.Credentials;
import com.paymentgateway.elementexpress.transaction.ExtendedParameters;
import com.paymentgateway.elementexpress.transaction.PASSUpdaterBatchStatus;
import com.paymentgateway.elementexpress.transaction.PASSUpdaterOption;
import com.paymentgateway.elementexpress.transaction.PaymentAccount;
import com.paymentgateway.elementexpress.transaction.PaymentAccountType;
import com.paymentgateway.elementexpress.transaction.Terminal;
import com.paymentgateway.elementexpress.transaction.Transaction;
import com.paymentgateway.elementexpress.transaction.TransactionSetup;
import com.paymentgateway.elementexpress.transaction.TransactionSetupMethod;
import com.paymentgateway.impl.CreditCardManagementImpl;
import com.paymentgateway.impl.TrustCommerceService;
import com.paymentgateway.model.CreditCardManagementModel;
import com.paymentgateway.service.CreditCardManagement;
import com.shippingcarrier.dao.UpsCarrier;
import com.shippingcarrier.fedExModel.RateWebServiceClient;
import com.unilog.VelocityTemplateEngine.LayoutGenerator;
import com.unilog.VelocityTemplateEngine.LayoutLoader;
import com.unilog.api.bronto.BrontoDAO;
import com.unilog.api.bronto.BrontoUtility;
import com.unilog.cenpos.paymentgateway.CenposEncryptor;
import com.unilog.cimmesb.client.response.CimmOrder;
import com.unilog.custommodule.model.FreightCalculatorModel;
import com.unilog.custommodule.utility.FreightCalculator;
import com.unilog.database.CommonDBQuery;
import com.unilog.database.ConnectionManager;
import com.unilog.defaults.GenerateSignature;
import com.unilog.defaults.Global;
import com.unilog.defaults.SendMailModel;
import com.unilog.defaults.SendMailUtility;
import com.unilog.ecomm.model.Cart;
import com.unilog.ecomm.model.Coupon;
import com.unilog.ecomm.model.Discount;
import com.unilog.ecomm.model.DiscountType;
import com.unilog.ecomm.model.LineItem;
import com.unilog.ecomm.promotion.SalesPromotionService;
import com.unilog.express.ExpressImpl;
import com.unilog.express.transaction.model.Items;
import com.unilog.express.transaction.model.TransactionSetupResponse;
import com.unilog.logocustomization.LogoCustomization;
import com.unilog.products.MarketBasketData;
import com.unilog.products.ProductHunterSolr;
import com.unilog.products.ProductsDAO;
import com.unilog.products.ProductsModel;
import com.unilog.products.ProductsModelArray;
import com.unilog.propertiesutility.PropertyAction;
import com.unilog.security.LoginAuthentication;
import com.unilog.security.SecureData;
import com.unilog.services.UnilogFactoryInterface;
import com.unilog.services.factory.UnilogEcommFactory;
import com.unilog.users.AddressModel;
import com.unilog.users.ShipVia;
import com.unilog.users.UserLogin;
import com.unilog.users.UsersAction;
import com.unilog.users.UsersDAO;
import com.unilog.users.UsersModel;
import com.unilog.users.WarehouseModel;
import com.unilog.utility.CommonUtility;
import com.unilog.utility.CustomTable;
import com.unilog.velocitytool.CIMM2VelocityTool;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import com.unilognew.service.FreightService;
import com.unilognew.util.CimmUtil;
import com.unilognew.util.ECommerceEnumType.ErpType;

import sun.misc.BASE64Decoder;

public class SalesAction extends ActionSupport {
	static final Logger logger = LoggerFactory.getLogger(SalesAction.class);
	private static final long serialVersionUID = -5870409012287101594L;
	protected String target = ERROR;
	private static DecimalFormat decimal2Fmt = new DecimalFormat("#,##0.00");
	private ArrayList<ProductsModel> resultData;
	private double lineItemTotal;

	public double getLineItemTotal() {
		return lineItemTotal;
	}

	public void setLineItemTotal(double lineItemTotal) {
		this.lineItemTotal = lineItemTotal;
	}

	private String MPN[];
	private String SELOPTARR[];
	private String ITEMQTYARR[];
	private String PARTNUMARR[];
	private String BRANDNAMEARR[];
	private String DESCARR[];
	private String LINEITEMCMTARR[];
	private String CPN[];
	private String IMAGE[];
	private String ITEMURL[];
	private String tempCheck;
	private int shoppingCartCount = 0;
	private HttpServletRequest request;
	private HttpServletResponse response;
	private String comments;
	private int defaultBillToId;
	private int defaultShipToId;
	private String billEntityId;
	private String shipEntityId;
	private String shipPhone;
	private String shipEmail;
	private String orderedBy;
	private int savedGroupId;
	private int salesOrderId;
	private double orderTotal;
	private double orderTotalV2;
	private SalesModel orderDetail = null;
	private ArrayList<SalesModel> orderItemList = null;
	private String reqDate;
	private String address1;
	private String address2;
	private String city;
	private String state;
	private String country;
	private String zipCode;
	private String phoneNumber;
	private String email;
	private String orderStatus;
	private String shipVia;
	private String shipViaDescription;
	private String selectedShipCodeOption;
	private String shippingInstruction;
	private String orderNotes;
	private String type;
	private String taxExempt;
	private String taxCheckVal;
	private String referenceKey;
	private String result;
	private String cardHolder;
	private String transactionUrl;
	private String setupId;
	private ArrayList<CreditCardModel> cardDetails = null;
	private String creditCartApprovedStatus;
	private String ccNumber;
	private String ccExp;
	private String ccType;
	private String ccTransactionId;
	private String ccMerchantId;
	private String ccListExists;
	private String ccResponseCode;
	private String ccStatus;
	private String ccHostRefNumber;
	private String ccTaskID;
	private String ccAmount;
	private String ccDeclineResponseReason;
	private String ccCvv2VrfyCode;
	private String ccTip;
	private String ccTransTimeStamp;
	private String ccToken;
	private String ccApprovedAmount;
	private String ccRequestedAmount;
	private String ccHostResponseCode;
	private String ccRefrenceCode;
	private String ccInvoice;
	private String ccApprovalCode;
	private String ccServerTimestamp;
	private String ccFee;
	private String ccExternalSessionID;
	private String ccAddVrfyCode;
	private String ccTax;
	private String ccNewDomainKey;
	private String creditCardPayment;
	private String orderSubTotal;
	private String orderTax;
	private String orderFreight;
	private String orderHanling;
	private String orderGrandTotal;
	private String actualOrderTotal;
	private String ccOrderNumber;
	private String ccAuthCode;
	private String ccPayPal;
	private String saveCard;
	private CreditCardModel creditCardValue = null;
	private String streetAddress;
	private String postalCode;
	private String poNumber;
	private String gasPoNumber;
	private String requestType;
	private String nickName;
	private String pCardId;
	private String userPcard;
	private String rdCard;
	private static String isnewsLetterupdatePI;
	private String billEntityName;
	private String shipEntityName;
	private String mobileUserId;
	private String erpQuoteNumber;
	private ArrayList<ProductsModel> cartListData = null;
	private String quotePartNumber[];
	private String quotePartNumberSelected[];
	private String custComments;
	private String isFromQC;
	private String orderIdFromWeb;
	private String mobileUserName;
	private String eclipseSessionId;
	private ArrayList<String> shipVialist;
	private ArrayList<UsersModel> billAddressList = null;
	private ArrayList<UsersModel> shipAddressList = null;
	private UsersModel billAddress = null;
	private UsersModel shipAddress = null;
	private int taxId;
	private String acceptPo;
	private String newsLetterSubscription;
	private UsersModel defaultCardInfo;
	private String selectedBranch;
	private String renderContent;
	private ArrayList<SalesModel> orderList = null;
	private String startDate;
	private String endDate;
	private String orderNumber;
	private String customerPoNumber;
	private String valueSubmited;
	private String isReOrder;
	private ArrayList<ProductsModel> rfqRefKeyList = null;
	private ArrayList<ProductsModel> quickOrderPadSel = null;
	private UsersModel addressList;
	private int resultCount;
	private String pageNo = "0";
	private int paginate;
	private String searchString;
	private String genId;
	private UsersModel defaultContact = null;
	private String fromPage;
	private String orderStatusCode;
	private String customerReleaseNumber;
	private String paymentTermsCode;
	private String displayAccountOrderInformation;
	private String entityIDType;
	private ArrayList<SalesModel> orderStatusListByPartNumber;
	private ArrayList<SalesModel> orderHistoryDetailList;
	private String searchBy;
	private ArrayList<SalesModel> salesOrderDetailsByItems;
	private String itemAvailabilityStatus;
	private String partNumberToERP;
	private String discountCoupons;
	private boolean manualDiscountApply;
	private String upsFrieghtCharges;
	private String orderErpId;
	private String outStandingPayment;
	private String outStandingPaymentTotal;
	private String branchID;
	private String orderingType;
	private String payPalToken;
	private String payPalPayerId;
	private String sendQuoteMail;
	private String sendmailToSalesRepOnly;
	private String selectedWillCallBranchCode;
	private String shipCompanyName;
	private String shipAddress1;
	private String shipAddress2;
	private String shipCity;
	private String shipState;
	private String shipCountry;
	private String shipZipcode;
	private String shipPhoneNo;
	private String billCompanyName;
	private String billAddress1;
	private String billAddress2;
	private String billCity;
	private String billState;
	private String billCountry;
	private String billZipcode;
	private String billPhoneNo;
	private String billEmail;
	private String overrideShip;
	private String partNumberOnly;
	private String shippingAccountNumber;
	private String auEmail;
	private String orderType;
	private String authorizationId;
	private String validUntil;
	private double payPalApprovedAmt;
	private String additionalName;
	private String additionalPickupPerson;
	private String pageTitle;
	private String cartonPrice;
	private String orderDisposition;
	private String custCommentsShipToStore;
	private String selectedInvoicesForPrint;
	private List<SalesModel> selectedInvoices = null;
	private Cimm2BCentralProjectManagementInformation managementList = null;
	private String invoiceId;
	private double discountAmount;
	private String shipToAddress;
	private Integer[] cartItemList;
	private String invoiceNumber[];
	private String returnReason[];
	private String selectedShipId;
	private String notesIndicator;
	private String returnComment[];
	private String avalaraTax;
	private String additionalEmailNotification;
	private boolean calculateFreight = true;
	private String dataValue;
	private String transactionType;

	public String getTransactionType() {
		return transactionType;
	}

	public void setTransactionType(String transactionType) {
		this.transactionType = transactionType;
	}

	public String getDataValue() {
		return dataValue;
	}

	public void setDataValue(String dataValue) {
		this.dataValue = dataValue;
	}

	public boolean isCalculateFreight() {
		return calculateFreight;
	}

	public void setCalculateFreight(boolean calculateFreight) {
		this.calculateFreight = calculateFreight;
	}

	public String getAdditionalEmailNotification() {
		return additionalEmailNotification;
	}

	public void setAdditionalEmailNotification(String additionalEmailNotification) {
		this.additionalEmailNotification = additionalEmailNotification;
	}

	public String getAvalaraTax() {
		return avalaraTax;
	}

	public void setAvalaraTax(String avalaraTax) {
		this.avalaraTax = avalaraTax;
	}

	public String[] getReturnComment() {
		return returnComment;
	}

	public void setReturnComment(String[] returnComment) {
		this.returnComment = returnComment;
	}

	public String getNotesIndicator() {
		return notesIndicator;
	}

	public void setNotesIndicator(String notesIndicator) {
		this.notesIndicator = notesIndicator;
	}

	public String[] getInvoiceNumber() {
		return invoiceNumber;
	}

	public void setInvoiceNumber(String[] invoiceNumber) {
		this.invoiceNumber = invoiceNumber;
	}

	public String[] getReturnReason() {
		return returnReason;
	}

	public void setReturnReason(String[] returnReason) {
		this.returnReason = returnReason;
	}

	public String getShipToAddress() {
		return shipToAddress;
	}

	public void setShipToAddress(String shipToAddress) {
		this.shipToAddress = shipToAddress;
	}

	public Integer[] getCartItemList() {
		return cartItemList;
	}

	public void setCartItemList(Integer[] cartItemList) {
		this.cartItemList = cartItemList;
	}

	public double getDiscountAmount() {
		return discountAmount;
	}

	public void setDiscountAmount(double discountAmount) {
		this.discountAmount = discountAmount;
	}

	public String getInvoiceId() {
		return invoiceId;
	}

	public void setInvoiceId(String invoiceId) {
		this.invoiceId = invoiceId;
	}

	public List<SalesModel> getSelectedInvoices() {
		return selectedInvoices;
	}

	public String getSelectedInvoicesForPrint() {
		return selectedInvoicesForPrint;
	}

	public void setSelectedInvoicesForPrint(String selectedInvoicesForPrint) {
		this.selectedInvoicesForPrint = selectedInvoicesForPrint;
	}

	public void setSelectedInvoices(List<SalesModel> selectedInvoices) {
		this.selectedInvoices = selectedInvoices;
	}

	public String getCartonPrice() {
		return cartonPrice;
	}

	public void setCartonPrice(String cartonPrice) {
		this.cartonPrice = cartonPrice;
	}

	public String getPageTitle() {
		return pageTitle;
	}

	public void setPageTitle(String pageTitle) {
		this.pageTitle = pageTitle;
	}

	public String getPageNo() {
		return pageNo;
	}

	public void setPageNo(String pageNo) {
		this.pageNo = pageNo;
	}

	public int getPaginate() {
		return paginate;
	}

	public void setPaginate(int paginate) {
		this.paginate = paginate;
	}

	public String getAuthorizationId() {
		return authorizationId;
	}

	public void setAuthorizationId(String authorizationId) {
		this.authorizationId = authorizationId;
	}

	public String getValidUntil() {
		return validUntil;
	}

	public void setValidUntil(String validUntil) {
		this.validUntil = validUntil;
	}

	public double getPayPalApprovedAmt() {
		return payPalApprovedAmt;
	}

	public void setPayPalApprovedAmt(double payPalApprovedAmt) {
		this.payPalApprovedAmt = payPalApprovedAmt;
	}

	public String getShipZipcode() {
		return shipZipcode;
	}

	public String getShipViaDescription() {
		return shipViaDescription;
	}

	public void setShipViaDescription(String shipViaDescription) {
		this.shipViaDescription = shipViaDescription;
	}

	public String getOrderType() {
		return orderType;
	}

	public void setOrderType(String orderType) {
		this.orderType = orderType;
	}

	public String getBillEmail() {
		return billEmail;
	}

	public void setBillEmail(String billEmail) {
		this.billEmail = billEmail;
	}

	public String getBillCompanyName() {
		return billCompanyName;
	}

	public void setBillCompanyName(String billCompanyName) {
		this.billCompanyName = billCompanyName;
	}

	public String getBillAddress1() {
		return billAddress1;
	}

	public void setBillAddress1(String billAddress1) {
		this.billAddress1 = billAddress1;
	}

	public String getBillAddress2() {
		return billAddress2;
	}

	public void setBillAddress2(String billAddress2) {
		this.billAddress2 = billAddress2;
	}

	public String getBillCity() {
		return billCity;
	}

	public void setBillCity(String billCity) {
		this.billCity = billCity;
	}

	public String getBillState() {
		return billState;
	}

	public void setBillState(String billState) {
		this.billState = billState;
	}

	public String getBillCountry() {
		return billCountry;
	}

	public void setBillCountry(String billCountry) {
		this.billCountry = billCountry;
	}

	public String getBillZipcode() {
		return billZipcode;
	}

	public void setBillZipcode(String billZipcode) {
		this.billZipcode = billZipcode;
	}

	public String getBillPhoneNo() {
		return billPhoneNo;
	}

	public void setBillPhoneNo(String billPhoneNo) {
		this.billPhoneNo = billPhoneNo;
	}

	public String getPartNumberOnly() {
		return partNumberOnly;
	}

	public void setPartNumberOnly(String partNumberOnly) {
		this.partNumberOnly = partNumberOnly;
	}

	public String getCcMerchantId() {
		return ccMerchantId;
	}

	public void setCcMerchantId(String ccMerchantId) {
		this.ccMerchantId = ccMerchantId;
	}

	public String getOverrideShip() {
		return overrideShip;
	}

	public void setOverrideShip(String overrideShip) {
		this.overrideShip = overrideShip;
	}

	public void setShipZipcode(String shipZipcode) {
		this.shipZipcode = shipZipcode;
	}

	public String getShipCompanyName() {
		return shipCompanyName;
	}

	public void setShipCompanyName(String shipCompanyName) {
		this.shipCompanyName = shipCompanyName;
	}

	public String getShipAddress1() {
		return shipAddress1;
	}

	public void setShipAddress1(String shipAddress1) {
		this.shipAddress1 = shipAddress1;
	}

	public String getShipAddress2() {
		return shipAddress2;
	}

	public void setShipAddress2(String shipAddress2) {
		this.shipAddress2 = shipAddress2;
	}

	public String getShipCity() {
		return shipCity;
	}

	public void setShipCity(String shipCity) {
		this.shipCity = shipCity;
	}

	public String getShipState() {
		return shipState;
	}

	public void setShipState(String shipState) {
		this.shipState = shipState;
	}

	public String getShipCountry() {
		return shipCountry;
	}

	public void setShipCountry(String shipCountry) {
		this.shipCountry = shipCountry;
	}

	public String getShipPhoneNo() {
		return shipPhoneNo;
	}

	public void setShipPhoneNo(String shipPhoneNo) {
		this.shipPhoneNo = shipPhoneNo;
	}

	public String getSelectedWillCallBranchCode() {
		return selectedWillCallBranchCode;
	}

	public void setSelectedWillCallBranchCode(String selectedWillCallBranchCode) {
		this.selectedWillCallBranchCode = selectedWillCallBranchCode;
	}

	public String getSendmailToSalesRepOnly() {
		return sendmailToSalesRepOnly;
	}

	public void setSendmailToSalesRepOnly(String sendmailToSalesRepOnly) {
		this.sendmailToSalesRepOnly = sendmailToSalesRepOnly;
	}

	public String getSendQuoteMail() {
		return sendQuoteMail;
	}

	public void setSendQuoteMail(String sendQuoteMail) {
		this.sendQuoteMail = sendQuoteMail;
	}

	public String getActualOrderTotal() {
		return actualOrderTotal;
	}

	public void setActualOrderTotal(String actualOrderTotal) {
		this.actualOrderTotal = actualOrderTotal;
	}

	public String getPayPalToken() {
		return payPalToken;
	}

	public void setPayPalToken(String payPalToken) {
		this.payPalToken = payPalToken;
	}

	public String getPayPalPayerId() {
		return payPalPayerId;
	}

	public void setPayPalPayerId(String payPalPayerId) {
		this.payPalPayerId = payPalPayerId;
	}

	public String getCcPayPal() {
		return ccPayPal;
	}

	public void setCcPayPal(String ccPayPal) {
		this.ccPayPal = ccPayPal;
	}

	public String getOrderingType() {
		return orderingType;
	}

	public void setOrderingType(String orderingType) {
		this.orderingType = orderingType;
	}

	public String getOutStandingPaymentTotal() {
		return outStandingPaymentTotal;
	}

	public void setOutStandingPaymentTotal(String outStandingPaymentTotal) {
		this.outStandingPaymentTotal = outStandingPaymentTotal;
	}

	public String getOutStandingPayment() {
		return outStandingPayment;
	}

	public void setOutStandingPayment(String outStandingPayment) {
		this.outStandingPayment = outStandingPayment;
	}

	public String getSelectedShipCodeOption() {
		return selectedShipCodeOption;
	}

	public void setSelectedShipCodeOption(String selectedShipCodeOption) {
		this.selectedShipCodeOption = selectedShipCodeOption;
	}

	public ArrayList<SalesModel> getSalesOrderDetailsByItems() {
		return salesOrderDetailsByItems;
	}

	public void setSalesOrderDetailsByItems(ArrayList<SalesModel> salesOrderDetailsByItems) {
		this.salesOrderDetailsByItems = salesOrderDetailsByItems;
	}

	public String getSearchBy() {
		return searchBy;
	}

	public void setSearchBy(String searchBy) {
		this.searchBy = searchBy;
	}

	public String getDisplayAccountOrderInformation() {
		return displayAccountOrderInformation;
	}

	public void setDisplayAccountOrderInformation(String displayAccountOrderInformation) {
		this.displayAccountOrderInformation = displayAccountOrderInformation;
	}

	public String getEntityIDType() {
		return entityIDType;
	}

	public void setEntityIDType(String entityIDType) {
		this.entityIDType = entityIDType;
	}

	public ArrayList<SalesModel> getOrderStatusListByPartNumber() {
		return orderStatusListByPartNumber;
	}

	public void setOrderStatusListByPartNumber(ArrayList<SalesModel> orderStatusListByPartNumber) {
		this.orderStatusListByPartNumber = orderStatusListByPartNumber;
	}

	public ArrayList<SalesModel> getOrderHistoryDetailList() {
		return orderHistoryDetailList;
	}

	public void setOrderHistoryDetailList(ArrayList<SalesModel> orderHistoryDetailList) {
		this.orderHistoryDetailList = orderHistoryDetailList;
	}

	public String getOrderStatusCode() {
		return orderStatusCode;
	}

	public void setOrderStatusCode(String orderStatusCode) {
		this.orderStatusCode = orderStatusCode;
	}

	public String[] getQuotePartNumberSelected() {
		return quotePartNumberSelected;
	}

	public void setQuotePartNumberSelected(String[] quotePartNumberSelected) {
		this.quotePartNumberSelected = quotePartNumberSelected;
	}

	public String getCcRefrenceCode() {
		return ccRefrenceCode;
	}

	public void setCcRefrenceCode(String ccRefrenceCode) {
		this.ccRefrenceCode = ccRefrenceCode;
	}

	public double getOrderTotalV2() {
		return orderTotalV2;
	}

	public void setOrderTotalV2(double orderTotalV2) {
		this.orderTotalV2 = orderTotalV2;
	}

	public String[] getCPN() {
		return CPN;
	}

	public void setCPN(String[] cPN) {
		CPN = cPN;
	}

	public String[] getLINEITEMCMTARR() {
		return LINEITEMCMTARR;
	}

	public void setLINEITEMCMTARR(String[] lINEITEMCMTARR) {
		LINEITEMCMTARR = lINEITEMCMTARR;
	}

	public String getFromPage() {
		return fromPage;
	}

	public void setFromPage(String fromPage) {
		this.fromPage = fromPage;
	}

	public UsersModel getDefaultContact() {
		return defaultContact;
	}

	public void setDefaultContact(UsersModel defaultContact) {
		this.defaultContact = defaultContact;
	}

	public void setGenId(String genId) {
		this.genId = genId;
	}

	public String getGenId() {
		return genId;
	}

	public String getCcOrderNumber() {
		return ccOrderNumber;
	}

	public void setCcOrderNumber(String ccOrderNumber) {
		this.ccOrderNumber = ccOrderNumber;
	}

	public String getOrderSubTotal() {
		return orderSubTotal;
	}

	public void setOrderSubTotal(String orderSubTotal) {
		this.orderSubTotal = orderSubTotal;
	}

	public String getOrderTax() {
		return orderTax;
	}

	public void setOrderTax(String orderTax) {
		this.orderTax = orderTax;
	}

	public String getOrderFreight() {
		return orderFreight;
	}

	public void setOrderFreight(String orderFreight) {
		this.orderFreight = orderFreight;
	}

	public String getOrderHanling() {
		return orderHanling;
	}

	public void setOrderHanling(String orderHanling) {
		this.orderHanling = orderHanling;
	}

	public String getOrderGrandTotal() {
		return orderGrandTotal;
	}

	public void setOrderGrandTotal(String orderGrandTotal) {
		this.orderGrandTotal = orderGrandTotal;
	}

	public String getCcListExists() {
		return ccListExists;
	}

	public void setCcListExists(String ccListExists) {
		this.ccListExists = ccListExists;
	}

	public String getCcResponseCode() {
		return ccResponseCode;
	}

	public void setCcResponseCode(String ccResponseCode) {
		this.ccResponseCode = ccResponseCode;
	}

	public String getCcStatus() {
		return ccStatus;
	}

	public void setCcStatus(String ccStatus) {
		this.ccStatus = ccStatus;
	}

	public String getCcHostRefNumber() {
		return ccHostRefNumber;
	}

	public void setCcHostRefNumber(String ccHostRefNumber) {
		this.ccHostRefNumber = ccHostRefNumber;
	}

	public String getCcTaskID() {
		return ccTaskID;
	}

	public void setCcTaskID(String ccTaskID) {
		this.ccTaskID = ccTaskID;
	}

	public String getCcAmount() {
		return ccAmount;
	}

	public void setCcAmount(String ccAmount) {
		this.ccAmount = ccAmount;
	}

	public String getCcDeclineResponseReason() {
		return ccDeclineResponseReason;
	}

	public void setCcDeclineResponseReason(String ccDeclineResponseReason) {
		this.ccDeclineResponseReason = ccDeclineResponseReason;
	}

	public String getCcCvv2VrfyCode() {
		return ccCvv2VrfyCode;
	}

	public void setCcCvv2VrfyCode(String ccCvv2VrfyCode) {
		this.ccCvv2VrfyCode = ccCvv2VrfyCode;
	}

	public String getCcTip() {
		return ccTip;
	}

	public void setCcTip(String ccTip) {
		this.ccTip = ccTip;
	}

	public String getCcTransTimeStamp() {
		return ccTransTimeStamp;
	}

	public void setCcTransTimeStamp(String ccTransTimeStamp) {
		this.ccTransTimeStamp = ccTransTimeStamp;
	}

	public String getCcToken() {
		return ccToken;
	}

	public void setCcToken(String ccToken) {
		this.ccToken = ccToken;
	}

	public String getCcApprovedAmount() {
		return ccApprovedAmount;
	}

	public void setCcApprovedAmount(String ccApprovedAmount) {
		this.ccApprovedAmount = ccApprovedAmount;
	}

	public String getCcRequestedAmount() {
		return ccRequestedAmount;
	}

	public void setCcRequestedAmount(String ccRequestedAmount) {
		this.ccRequestedAmount = ccRequestedAmount;
	}

	public String getCcHostResponseCode() {
		return ccHostResponseCode;
	}

	public void setCcHostResponseCode(String ccHostResponseCode) {
		this.ccHostResponseCode = ccHostResponseCode;
	}

	public String getCcInvoice() {
		return ccInvoice;
	}

	public void setCcInvoice(String ccInvoice) {
		this.ccInvoice = ccInvoice;
	}

	public String getCcApprovalCode() {
		return ccApprovalCode;
	}

	public void setCcApprovalCode(String ccApprovalCode) {
		this.ccApprovalCode = ccApprovalCode;
	}

	public String getCcServerTimestamp() {
		return ccServerTimestamp;
	}

	public void setCcServerTimestamp(String ccServerTimestamp) {
		this.ccServerTimestamp = ccServerTimestamp;
	}

	public String getCcFee() {
		return ccFee;
	}

	public void setCcFee(String ccFee) {
		this.ccFee = ccFee;
	}

	public String getCcExternalSessionID() {
		return ccExternalSessionID;
	}

	public void setCcExternalSessionID(String ccExternalSessionID) {
		this.ccExternalSessionID = ccExternalSessionID;
	}

	public String getCcAddVrfyCode() {
		return ccAddVrfyCode;
	}

	public void setCcAddVrfyCode(String ccAddVrfyCode) {
		this.ccAddVrfyCode = ccAddVrfyCode;
	}

	public String getCcTax() {
		return ccTax;
	}

	public void setCcTax(String ccTax) {
		this.ccTax = ccTax;
	}

	public String getCcNewDomainKey() {
		return ccNewDomainKey;
	}

	public void setCcNewDomainKey(String ccNewDomainKey) {
		this.ccNewDomainKey = ccNewDomainKey;
	}

	public String getCreditCardPayment() {
		return creditCardPayment;
	}

	public void setCreditCardPayment(String creditCardPayment) {
		this.creditCardPayment = creditCardPayment;
	}

	public String getCreditCartApprovedStatus() {
		return creditCartApprovedStatus;
	}

	public void setCreditCartApprovedStatus(String creditCartApprovedStatus) {
		this.creditCartApprovedStatus = creditCartApprovedStatus;
	}

	public String getSearchString() {
		return searchString;
	}

	public void setSearchString(String searchString) {
		this.searchString = searchString;
	}

	public String getIsReOrder() {
		return isReOrder;
	}

	public void setIsReOrder(String isReOrder) {
		this.isReOrder = isReOrder;
	}

	public String getCustomerPoNumber() {
		return customerPoNumber;
	}

	public void setCustomerPoNumber(String customerPoNumber) {
		this.customerPoNumber = customerPoNumber;
	}

	public String getValueSubmited() {
		return valueSubmited;
	}

	public void setValueSubmited(String valueSubmited) {
		this.valueSubmited = valueSubmited;
	}

	public String getStartDate() {
		return startDate;
	}

	public void setStartDate(String startDate) {
		this.startDate = startDate;
	}

	public String getEndDate() {
		return endDate;
	}

	public void setEndDate(String endDate) {
		this.endDate = endDate;
	}

	public String getOrderNumber() {
		return orderNumber;
	}

	public void setOrderNumber(String orderNumber) {
		this.orderNumber = orderNumber;
	}

	public String getTarget() {
		return target;
	}

	public void setTarget(String target) {
		this.target = target;
	}

	public ArrayList<SalesModel> getOrderList() {
		return orderList;
	}

	public void setOrderList(ArrayList<SalesModel> orderList) {
		this.orderList = orderList;
	}

	public ArrayList<ProductsModel> getResultData() {
		return resultData;
	}

	public void setResultData(ArrayList<ProductsModel> resultData) {
		this.resultData = resultData;
	}

	public String[] getSELOPTARR() {
		return SELOPTARR;
	}

	public void setSELOPTARR(String[] sELOPTARR) {
		SELOPTARR = sELOPTARR;
	}

	public String[] getITEMQTYARR() {
		return ITEMQTYARR;
	}

	public void setITEMQTYARR(String[] iTEMQTYARR) {
		ITEMQTYARR = iTEMQTYARR;
	}

	public String[] getPARTNUMARR() {
		return PARTNUMARR;
	}

	public void setPARTNUMARR(String[] pARTNUMARR) {
		PARTNUMARR = pARTNUMARR;
	}

	public String[] getBRANDNAMEARR() {
		return BRANDNAMEARR;
	}

	public void setBRANDNAMEARR(String[] bRANDNAMEARR) {
		BRANDNAMEARR = bRANDNAMEARR;
	}

	public String[] getDESCARR() {
		return DESCARR;
	}

	public void setDESCARR(String[] dESCARR) {
		DESCARR = dESCARR;
	}

	public String getTempCheck() {
		return tempCheck;
	}

	public void setTempCheck(String tempCheck) {
		this.tempCheck = tempCheck;
	}

	public int getShoppingCartCount() {
		return shoppingCartCount;
	}

	public void setShoppingCartCount(int shoppingCartCount) {
		this.shoppingCartCount = shoppingCartCount;
	}

	public HttpServletRequest getRequest() {
		return request;
	}

	public void setRequest(HttpServletRequest request) {
		this.request = request;
	}

	public String getComments() {
		return comments;
	}

	public void setComments(String comments) {
		this.comments = comments;
	}

	public int getDefaultBillToId() {
		return defaultBillToId;
	}

	public void setDefaultBillToId(int defaultBillToId) {
		this.defaultBillToId = defaultBillToId;
	}

	public int getDefaultShipToId() {
		return defaultShipToId;
	}

	public void setDefaultShipToId(int defaultShipToId) {
		this.defaultShipToId = defaultShipToId;
	}

	public String getRequestType() {
		return requestType;
	}

	public void setRequestType(String requestType) {
		this.requestType = requestType;
	}

	public String getShipPhone() {
		return shipPhone;
	}

	public void setShipPhone(String shipPhone) {
		this.shipPhone = shipPhone;
	}

	public String getShipEmail() {
		return shipEmail;
	}

	public void setShipEmail(String shipEmail) {
		this.shipEmail = shipEmail;
	}

	public String getOrderedBy() {
		return orderedBy;
	}

	public void setOrderedBy(String orderedBy) {
		this.orderedBy = orderedBy;
	}

	public int getSavedGroupId() {
		return savedGroupId;
	}

	public void setSavedGroupId(int savedGroupId) {
		this.savedGroupId = savedGroupId;
	}

	public int getSalesOrderId() {
		return salesOrderId;
	}

	public void setSalesOrderId(int salesOrderId) {
		this.salesOrderId = salesOrderId;
	}

	public double getOrderTotal() {
		return orderTotal;
	}

	public void setOrderTotal(double orderTotal) {
		this.orderTotal = orderTotal;
	}

	public SalesModel getOrderDetail() {
		return orderDetail;
	}

	public void setOrderDetail(SalesModel orderDetail) {
		this.orderDetail = orderDetail;
	}

	public ArrayList<SalesModel> getOrderItemList() {
		return orderItemList;
	}

	public void setOrderItemList(ArrayList<SalesModel> orderItemList) {
		this.orderItemList = orderItemList;
	}

	public String getReqDate() {
		return reqDate;
	}

	public void setReqDate(String reqDate) {
		this.reqDate = reqDate;
	}

	public String getAddress1() {
		return address1;
	}

	public void setAddress1(String address1) {
		this.address1 = address1;
	}

	public String getAddress2() {
		return address2;
	}

	public void setAddress2(String address2) {
		this.address2 = address2;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public String getZipCode() {
		return zipCode;
	}

	public void setZipCode(String zipCode) {
		this.zipCode = zipCode;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getOrderStatus() {
		return orderStatus;
	}

	public void setOrderStatus(String orderStatus) {
		this.orderStatus = orderStatus;
	}

	public String getShipVia() {
		return shipVia;
	}

	public void setShipVia(String shipVia) {
		this.shipVia = shipVia;
	}

	public String getShippingInstruction() {
		return shippingInstruction;
	}

	public void setShippingInstruction(String shippingInstruction) {
		this.shippingInstruction = shippingInstruction;
	}

	public String getOrderNotes() {
		return orderNotes;
	}

	public void setOrderNotes(String orderNotes) {
		this.orderNotes = orderNotes;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public String getTaxExempt() {
		return taxExempt;
	}

	public void setTaxExempt(String taxExempt) {
		this.taxExempt = taxExempt;
	}

	public String getTaxCheckVal() {
		return taxCheckVal;
	}

	public void setTaxCheckVal(String taxCheckVal) {
		this.taxCheckVal = taxCheckVal;
	}

	public String getReferenceKey() {
		return referenceKey;
	}

	public void setReferenceKey(String referenceKey) {
		this.referenceKey = referenceKey;
	}

	public String getResult() {
		return result;
	}

	public void setResult(String result) {
		this.result = result;
	}

	public String getCardHolder() {
		return cardHolder;
	}

	public void setCardHolder(String cardHolder) {
		this.cardHolder = cardHolder;
	}

	public String getTransactionUrl() {
		return transactionUrl;
	}

	public void setTransactionUrl(String transactionUrl) {
		this.transactionUrl = transactionUrl;
	}

	public String getSetupId() {
		return setupId;
	}

	public void setSetupId(String setupId) {
		this.setupId = setupId;
	}

	public ArrayList<CreditCardModel> getCardDetails() {
		return cardDetails;
	}

	public void setCardDetails(ArrayList<CreditCardModel> cardDetails) {
		this.cardDetails = cardDetails;
	}

	public String getCcNumber() {
		return ccNumber;
	}

	public void setCcNumber(String ccNumber) {
		this.ccNumber = ccNumber;
	}

	public String getCcExp() {
		return ccExp;
	}

	public void setCcExp(String ccExp) {
		this.ccExp = ccExp;
	}

	public CreditCardModel getCreditCardValue() {
		return creditCardValue;
	}

	public void setCreditCardValue(CreditCardModel creditCardValue) {
		this.creditCardValue = creditCardValue;
	}

	public String getCcTransactionId() {
		return ccTransactionId;
	}

	public void setCcTransactionId(String ccTransactionId) {
		this.ccTransactionId = ccTransactionId;
	}

	public String getStreetAddress() {
		return streetAddress;
	}

	public void setStreetAddress(String streetAddress) {
		this.streetAddress = streetAddress;
	}

	public String getPostalCode() {
		return postalCode;
	}

	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}

	public String getCcType() {
		return ccType;
	}

	public void setCcType(String ccType) {
		this.ccType = ccType;
	}

	public String getPoNumber() {
		return poNumber;
	}

	public void setPoNumber(String poNumber) {
		this.poNumber = poNumber;
	}

	public String getNickName() {
		return nickName;
	}

	public void setNickName(String nickName) {
		this.nickName = nickName;
	}

	public String getpCardId() {
		return pCardId;
	}

	public void setpCardId(String pCardId) {
		this.pCardId = pCardId;
	}

	public String getUserPcard() {
		return userPcard;
	}

	public void setUserPcard(String userPcard) {
		this.userPcard = userPcard;
	}

	public String getRdCard() {
		return rdCard;
	}

	public void setRdCard(String rdCard) {
		this.rdCard = rdCard;
	}

	public static String getIsnewsLetterupdatePI() {
		return isnewsLetterupdatePI;
	}

	public static void setIsnewsLetterupdatePI(String isnewsLetterupdatePI) {
		SalesAction.isnewsLetterupdatePI = isnewsLetterupdatePI;
	}

	public String getBillEntityName() {
		return billEntityName;
	}

	public void setBillEntityName(String billEntityName) {
		this.billEntityName = billEntityName;
	}

	public String getShipEntityName() {
		return shipEntityName;
	}

	public void setShipEntityName(String shipEntityName) {
		this.shipEntityName = shipEntityName;
	}

	public String getMobileUserId() {
		return mobileUserId;
	}

	public void setMobileUserId(String mobileUserId) {
		this.mobileUserId = mobileUserId;
	}

	public String getErpQuoteNumber() {
		return erpQuoteNumber;
	}

	public void setErpQuoteNumber(String erpQuoteNumber) {
		this.erpQuoteNumber = erpQuoteNumber;
	}

	public ArrayList<ProductsModel> getCartListData() {
		return cartListData;
	}

	public void setCartListData(ArrayList<ProductsModel> cartListData) {
		this.cartListData = cartListData;
	}

	public String[] getQuotePartNumber() {
		return quotePartNumber;
	}

	public void setQuotePartNumber(String[] quotePartNumber) {
		this.quotePartNumber = quotePartNumber;
	}

	public String getCustComments() {
		return custComments;
	}

	public void setCustComments(String custComments) {
		this.custComments = custComments;
	}

	public String getIsFromQC() {
		return isFromQC;
	}

	public void setIsFromQC(String isFromQC) {
		this.isFromQC = isFromQC;
	}

	public String getOrderIdFromWeb() {
		return orderIdFromWeb;
	}

	public void setOrderIdFromWeb(String orderIdFromWeb) {
		this.orderIdFromWeb = orderIdFromWeb;
	}

	public String getMobileUserName() {
		return mobileUserName;
	}

	public void setMobileUserName(String mobileUserName) {
		this.mobileUserName = mobileUserName;
	}

	public String getEclipseSessionId() {
		return eclipseSessionId;
	}

	public void setEclipseSessionId(String eclipseSessionId) {
		this.eclipseSessionId = eclipseSessionId;
	}

	public ArrayList<String> getShipVialist() {
		return shipVialist;
	}

	public void setShipVialist(ArrayList<String> shipVialist) {
		this.shipVialist = shipVialist;
	}

	public ArrayList<UsersModel> getBillAddressList() {
		return billAddressList;
	}

	public void setBillAddressList(ArrayList<UsersModel> billAddressList) {
		this.billAddressList = billAddressList;
	}

	public ArrayList<UsersModel> getShipAddressList() {
		return shipAddressList;
	}

	public void setShipAddressList(ArrayList<UsersModel> shipAddressList) {
		this.shipAddressList = shipAddressList;
	}

	public UsersModel getBillAddress() {
		return billAddress;
	}

	public void setBillAddress(UsersModel billAddress) {
		this.billAddress = billAddress;
	}

	public UsersModel getShipAddress() {
		return shipAddress;
	}

	public void setShipAddress(UsersModel shipAddress) {
		this.shipAddress = shipAddress;
	}

	public int getTaxId() {
		return taxId;
	}

	public void setTaxId(int taxId) {
		this.taxId = taxId;
	}

	public String getAcceptPo() {
		return acceptPo;
	}

	public void setAcceptPo(String acceptPo) {
		this.acceptPo = acceptPo;
	}

	public String getNewsLetterSubscription() {
		return newsLetterSubscription;
	}

	public void setNewsLetterSubscription(String newsLetterSubscription) {
		this.newsLetterSubscription = newsLetterSubscription;
	}

	public UsersModel getDefaultCardInfo() {
		return defaultCardInfo;
	}

	public void setDefaultCardInfo(UsersModel defaultCardInfo) {
		this.defaultCardInfo = defaultCardInfo;
	}

	public String getSelectedBranch() {
		return selectedBranch;
	}

	public void setSelectedBranch(String selectedBranch) {
		this.selectedBranch = selectedBranch;
	}

	public void setRenderContent(String renderContent) {
		this.renderContent = renderContent;
	}

	public String getRenderContent() {
		return renderContent;
	}

	public String getCustomerReleaseNumber() {
		return customerReleaseNumber;
	}

	public void setCustomerReleaseNumber(String customerReleaseNumber) {
		this.customerReleaseNumber = customerReleaseNumber;
	}

	public String getCcAuthCode() {
		return ccAuthCode;
	}

	public void setCcAuthCode(String ccAuthCode) {
		this.ccAuthCode = ccAuthCode;
	}

	public String getOrderDisposition() {
		return orderDisposition;
	}

	public void setOrderDisposition(String orderDisposition) {
		this.orderDisposition = orderDisposition;
	}

	public String getCustCommentsShipToStore() {
		return custCommentsShipToStore;
	}

	public void setCustCommentsShipToStore(String custCommentsShipToStore) {
		this.custCommentsShipToStore = custCommentsShipToStore;
	}

	public String[] getIMAGE() {
		return IMAGE;
	}

	public void setIMAGE(String[] iMAGE) {
		IMAGE = iMAGE;
	}

	public String[] getITEMURL() {
		return ITEMURL;
	}

	public void setITEMURL(String[] iTEMURL) {
		ITEMURL = iTEMURL;
	}

	public String saveSalesOrder() {
		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		CallableStatement stmt = null;
		Double approAmount = 0.0;
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionId = session.getId();
			resultData = new ArrayList<ProductsModel>();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			boolean flag = false;
			boolean sendMailFlagApprove = true;
			String anonymous = "N";
			String guestFlag = request.getParameter("guestFlag");
			String orderTax = (String) request.getParameter("orderTax");
			String userSelectedLocation = (String) request.getParameter("selectedLocation");
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			String tempBuyingCompany = (String) session.getAttribute("buyingCompanyId");
			String reqType = request.getParameter("reqType");
			int activeTaxonomyId = CommonUtility
					.validateNumber(CommonDBQuery.getSystemParamtersList().get("TAXONOMY_ID"));
			String shipViaDescription = "";
			String erpUserContactID = "";
			/*
			 * LinkedHashMap<String, String> userCustomFieldValue = (LinkedHashMap<String,
			 * String>) session.getAttribute("userCustomFieldValue");
			 * if(userCustomFieldValue!=null &&
			 * CommonUtility.validateString(userCustomFieldValue.get("CONTACT_ID")).length()
			 * >0){ erpUserContactID = userCustomFieldValue.get("CONTACT_ID"); }
			 */
			erpUserContactID = CommonUtility.validateString(UsersDAO.getContactID(userId));
			int buyingCompanyId = CommonUtility.validateNumber(tempBuyingCompany);
			if (CommonUtility.validateString((String) session.getAttribute("shipvia")).length() > 0) {
				shipVia = (String) session.getAttribute("shipvia");
			}
			String totalCartFrieghtCharges = request.getParameter("totalCartFrieghtCharges");
			if (CommonUtility.validateString(request.getParameter("shipViaDescription")).length() > 0) {
				shipViaDescription = CommonUtility.validateString(request.getParameter("shipViaDescription"));
			} else {
				if (session.getAttribute("shipViaMap") != null
						&& session.getAttribute("shipViaMap").toString().length() > 0) {
					LinkedHashMap<String, String> shipViaMap = (LinkedHashMap<String, String>) session
							.getAttribute("shipViaMap");
					if (shipViaMap != null && !shipViaMap.isEmpty()) {
						shipViaDescription = shipViaMap.get(shipVia.toUpperCase());
					}
				}
			}
			String shipViaDisplay = null;
			if (session.getAttribute("shipViaMap") != null) {
				LinkedHashMap<String, String> shipViaMap = (LinkedHashMap<String, String>) session
						.getAttribute("shipViaMap");
				shipViaDisplay = shipViaMap.get(shipVia.toUpperCase());
			}
			System.out.println("shipViaDisplay------------" + shipViaDisplay);
			AddressModel overrideShipAddress = (AddressModel) session.getAttribute("overrideShipAddress");
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			/*
			 * String newsLetter = request.getParameter("newsLetterSubscription"); String
			 * newsLetterStatus = (String) session.getAttribute("newsLetter");
			 */
			int orderId = 0;
			int cartCount = 0;
			// For JDW All Users will be considered as CreditCardFlag = False (Ref: Brunda)
			session.setAttribute("creditCardFlag", "false");
			if (type != null && type.trim().equalsIgnoreCase("mobile") && mobileUserId != null) {
				sessionUserId = mobileUserId;
				session.removeAttribute("isReOrder");
				session.setAttribute("mobileUserName", mobileUserName);
				session.setAttribute("mobileUserId", mobileUserId);
				session.setAttribute(Global.USERID_KEY, mobileUserId);
				session.setAttribute(Global.USERNAME_KEY, mobileUserName);
			}
			if (type != null && type.trim().equalsIgnoreCase("mobile")) {
				if (session.getAttribute("mobileUserId") != null && session.getAttribute("mobileUserName") != null) {
					mobileUserId = (String) session.getAttribute("mobileUserId");
					session.setAttribute(Global.USERID_KEY, mobileUserId);
					mobileUserName = (String) session.getAttribute("mobileUserName");
					session.setAttribute(Global.USERNAME_KEY, mobileUserName);
					sessionUserId = mobileUserId;
				}
			}

			String overRideShipEmail = "";
			if (CommonUtility.validateString((String) session.getAttribute("overRideShipEmail")).trim().length() > 0) {
				overRideShipEmail = (String) session.getAttribute("overRideShipEmail");
				session.setAttribute("overRideShipEmail", overRideShipEmail);
			}

			String userToken = (String) session.getAttribute("userToken");
			String wareHousecode = (String) session.getAttribute("wareHouseCode");
			String customerCountry = (String) session.getAttribute("customerCountry");
			eclipseSessionId = userToken;
			String userName = (String) session.getAttribute(Global.USERNAME_KEY);
			String entityId = (String) session.getAttribute("entityId");
			String homeTerritory = (String) session.getAttribute("shipBranchId");
			ArrayList<String> partIdentifier = new ArrayList<String>();
			ArrayList<Integer> partIdentifierQuantity = new ArrayList<Integer>();
			String freeShipping = "no";
			String discountTypeCheck = "";
			String isApproveCart = (String) session.getAttribute("fromApproveCart");
			boolean nonCatalogItemFlag = false;
			boolean sendMailFlag = true;
			// Discount related values
			String discountCouponCode = null;
			double discountAmount = 0.0D;
			double orderTotalDiscountAmount = 0.0D;
			float discountInPercent = 0.00F;
			String discountCouponType = null;
			String checkAccount = null;
			StringBuilder orderDiscountCoupons = new StringBuilder();
			try {
				conn = ConnectionManager.getDBConnection();
			} catch (SQLException e) {
				e.printStackTrace();
			}

			int siteId = 0;
			if (CommonDBQuery.getGlobalSiteId() > 0) {
				siteId = CommonDBQuery.getGlobalSiteId();
			}

			String cartSortByValue = "";
			String cartSortColumn = "";
			if (session.getAttribute("cartSortByValue") != null) {
				cartSortByValue = CommonUtility.validateString(session.getAttribute("cartSortByValue").toString());
				String[] sortCoumnArray = cartSortByValue.split(" ");
				if (sortCoumnArray != null && sortCoumnArray.length > 0) {
					cartSortColumn = CommonUtility.validateString(sortCoumnArray[0]);
				}
			}

			session.removeAttribute("poNumber");
			session.removeAttribute("shippingInstruction");
			session.removeAttribute("orderNotes");
			session.removeAttribute("reqDate");
			session.removeAttribute("sortBy");
			session.removeAttribute("QuoteCartTotal");
			session.removeAttribute("QuoteCartCount");
			if (userId > 1) {
				String sql = "";

				// Commented because it was over riding the Gereral Catalog ID
				// generalSubset =
				// ProductsDAO.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
				if (ProductsDAO.getSubsetIdFromName(
						CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
					generalSubset = ProductsDAO
							.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
				}

				if (isReOrder != null && isReOrder.trim().equalsIgnoreCase("Y")) {
					sql = PropertyAction.SqlContainer.get("getQuoteCartItemDetailQuery");
					if (CommonUtility.validateString(cartSortColumn).length() > 0
							&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
						sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
					}
					pstmt = conn.prepareStatement(sql);
					pstmt.setString(1, sessionId);
					pstmt.setInt(2, subsetId);
					pstmt.setInt(3, activeTaxonomyId);
					pstmt.setString(4, sessionId);
					pstmt.setInt(5, generalSubset);
					pstmt.setInt(6, activeTaxonomyId);
					pstmt.setString(7, sessionId);
					pstmt.setInt(8, subsetId);
					rs = pstmt.executeQuery();
				} else {
					if (savedGroupId == 0 && isFromQC != null && isFromQC.trim().equalsIgnoreCase("Yes")) {
						// sessionId = sessionId+".QUICKCART";
						sql = PropertyAction.SqlContainer.get("getCartItemDetailQueryBySession");
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, siteId);
						pstmt.setInt(2, userId);
						pstmt.setString(3, sessionId);
						pstmt.setInt(4, subsetId);
						pstmt.setInt(5, siteId);
						pstmt.setInt(6, userId);
						pstmt.setString(7, sessionId);
						pstmt.setInt(8, subsetId);
						pstmt.setInt(9, siteId);
						pstmt.setInt(10, userId);
						pstmt.setString(11, sessionId);
						pstmt.setInt(12, subsetId);
						rs = pstmt.executeQuery();
					} else if (savedGroupId == 0) {
						sql = PropertyAction.SqlContainer.get("getCartItemDetailQuery");
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, siteId);
						pstmt.setInt(2, userId);
						pstmt.setInt(3, subsetId);
						pstmt.setInt(4, siteId);
						pstmt.setInt(5, userId);
						pstmt.setInt(6, generalSubset);
						pstmt.setInt(7, siteId);
						pstmt.setInt(8, userId);
						pstmt.setInt(9, subsetId);
						rs = pstmt.executeQuery();
					} else {
						sql = PropertyAction.SqlContainer.get("selectGroupItem");
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}

						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, savedGroupId);
						pstmt.setInt(2, userId);
						pstmt.setInt(3, buyingCompanyId);
						pstmt.setInt(4, subsetId);
						pstmt.setInt(5, activeTaxonomyId);
						pstmt.setInt(6, savedGroupId);
						pstmt.setInt(7, userId);
						pstmt.setInt(8, buyingCompanyId);
						pstmt.setInt(9, generalSubset);
						pstmt.setInt(10, activeTaxonomyId);
						pstmt.setInt(11, savedGroupId);
						pstmt.setInt(12, subsetId);

						rs = pstmt.executeQuery();
					}
				}

				HashMap<String, Integer> userAddressId = new HashMap<String, Integer>();
				if (type != null && type.trim().equalsIgnoreCase("mobile") && mobileUserId != null) {
					userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(mobileUserName);
				} else {
					userAddressId = UsersDAO
							.getDefaultAddressIdForBCAddressBook((String) session.getAttribute(Global.USERNAME_KEY));
				}

				// UsersDAO.getDefaultAddressId(userId);
				defaultBillToId = userAddressId.get("Bill");
				session.setAttribute("defaultBillToId", "" + defaultBillToId);
				HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
						defaultShipToId);

				// String isNewsLetter = getIsnewsLetterupdatePI();
				String selectedBranchFromPage = selectedBranch;
				String shipBranch = (String) session.getAttribute("shipBranchId");
				String homeBranch = (String) session.getAttribute("homeBranchId");
				if (shipVia != null
						&& (shipVia.trim().toUpperCase().contains("WILL CALL")
								|| shipVia.trim().toUpperCase().contains("CUSTOMER PICK UP"))
						&& CommonUtility.validateString(shipBranch).length() > 0) {
					selectedBranch = shipBranch;
				} else if (CommonUtility.validateString(shipBranch).length() > 0 && CommonUtility
						.validateString(
								CommonDBQuery.getSystemParamtersList().get("DISABLE_HOME_BRANCH_ON_ORDERSUBMIT"))
						.equalsIgnoreCase("Y")) {
					selectedBranch = shipBranch;
				} else if (homeBranch != null && homeBranch.trim().length() > 0) {
					selectedBranch = homeBranch;
				} else {
					selectedBranch = "";
				}

				if (selectedBranchFromPage != null) {
					selectedBranch = selectedBranchFromPage;
				}
				UsersModel userBillAddress = userAddress.get("Bill");
				if (userBillAddress == null) {
					userBillAddress = new UsersModel();
				}
				userBillAddress.setShippingInstruction(shippingInstruction);
				userBillAddress.setOrderedBy(orderedBy);
				userBillAddress.setOrderNotes(orderNotes);
				userBillAddress.setReqDate(reqDate);

				if (session != null && session.getAttribute("overrideBillAddress") != null) {
					AddressModel overrideBillAddress = (AddressModel) session.getAttribute("overrideBillAddress");
					if (overrideBillAddress != null) {
						if (CommonUtility.validateString(userBillAddress.getEmailAddress()).length() < 1) {
							userBillAddress.setEmailAddress(
									CommonUtility.validateString(overrideBillAddress.getEmailAddress()));
						}
						if (CommonUtility.validateString(userBillAddress.getPhoneNo()).length() < 1) {
							userBillAddress.setPhoneNo(CommonUtility.validateString(overrideBillAddress.getPhoneNo()));
						}
					}
				}

				UsersModel userShipAddress = userAddress.get("Ship");

				if (CommonUtility.customServiceUtility() != null) {
					UsersModel userShipAddressforRetail = CommonUtility.customServiceUtility()
							.getUserContactAddress(userId, session);
					if (userShipAddressforRetail != null) {
						userShipAddress = userShipAddressforRetail;
					}
				}
				String shipTofirstName = userShipAddress.getFirstName();
				String shipToLastName = userShipAddress.getLastName();
				session.setAttribute("shipTofirstName", shipTofirstName);
				session.setAttribute("shipToLastName", shipToLastName);
				if (userShipAddress != null && CommonUtility.validateString(overRideShipEmail).trim().length() > 0) {
					userShipAddress.setEmailAddress(overRideShipEmail);
				}
				userShipAddress.setShippingInstruction(CommonUtility.validateString(shippingInstruction));
				userShipAddress.setOrderedBy(orderedBy);
				userShipAddress.setOrderNotes(orderNotes);
				userShipAddress.setReqDate(reqDate);
				userShipAddress.setFirstName((String) session.getAttribute("userFirstName"));
				userShipAddress.setLastName((String) session.getAttribute("userLastName"));

				// if user edit the ship address in checkout page,carrying edited details from
				// session
				if (overrideShipAddress != null) {
					userBillAddress.setCustomerName(CommonUtility.validateString(overrideShipAddress.getCompanyName()));// override
																														// company
																														// name
																														// ill
																														// be
																														// stored
																														// in
																														// orders
																														// and
																														// also
																														// send
																														// in
																														// mail.
					userShipAddress.setCompanyName(CommonUtility.validateString(overrideShipAddress.getCompanyName()));
					userShipAddress.setAddress1(CommonUtility.validateString(overrideShipAddress.getAddress1()));
					userShipAddress.setAddress2(CommonUtility.validateString(overrideShipAddress.getAddress2()));
					userShipAddress.setCity(CommonUtility.validateString(overrideShipAddress.getCity()));
					userShipAddress.setState(CommonUtility.validateString(overrideShipAddress.getState()));
					userShipAddress.setCountry(CommonUtility.validateString(overrideShipAddress.getCountry()));
					userShipAddress.setZipCode(CommonUtility.validateString(overrideShipAddress.getZipCode()));
					userShipAddress
							.setZipCodeStringFormat(CommonUtility.validateString(overrideShipAddress.getZipCode()));
					userShipAddress.setPhoneNo(CommonUtility.validateString(overrideShipAddress.getPhoneNo()));
					userShipAddress
							.setEmailAddress(CommonUtility.validateString(overrideShipAddress.getEmailAddress()));
					if (overrideShipAddress.getShipToId() != null && overrideShipAddress.getShipToId().length() > 0) {
						userShipAddress.setShipToId(overrideShipAddress.getShipToId());
					}
				}
				if (CommonUtility.validateString(request.getParameter("overrideShip")).equalsIgnoreCase("Y")) {
					if (!CommonUtility.validateString(address1)
							.equalsIgnoreCase(CommonUtility.validateString(userShipAddress.getAddress1()))
							|| !CommonUtility.validateString(address2)
									.equalsIgnoreCase(CommonUtility.validateString(userShipAddress.getAddress2()))
							|| !CommonUtility.validateString(country)
									.equalsIgnoreCase(CommonUtility.validateString(userShipAddress.getCountry()))
							|| !CommonUtility.validateString(state)
									.equalsIgnoreCase(CommonUtility.validateString(userShipAddress.getState()))
							|| !CommonUtility.validateString(zipCode).equalsIgnoreCase(
									CommonUtility.validateString(userShipAddress.getZipCodeStringFormat()))
							|| !CommonUtility.validateString(shipPhoneNo)
									.equalsIgnoreCase(CommonUtility.validateString(userShipAddress.getPhoneNo()))
							|| !CommonUtility.validateString(shipEmail).equalsIgnoreCase(
									CommonUtility.validateString(userShipAddress.getEmailAddress()))) {
						session.setAttribute("overrideShipAddress", overrideShipAddress);
					}

					userShipAddress.setCustomerName(shipCompanyName);
					userShipAddress.setCompanyName(shipCompanyName);
					userShipAddress.setAddress1(address1);
					userShipAddress.setAddress2(address2);
					userShipAddress.setCity(city);
					userShipAddress.setState(state);
					userShipAddress.setCountry(country);
					userShipAddress.setZipCode(zipCode);
					userShipAddress.setZipCodeStringFormat(zipCode);
					userShipAddress.setPhoneNo(shipPhoneNo);
					userShipAddress.setEmailAddress(shipEmail);
					if (CommonUtility.validateString(request.getParameter("erpOverrideFlag")).equalsIgnoreCase("Y")) {
						UserManagement usersObj = new UserManagementImpl();
						String customerId = (String) session.getAttribute("customerId");
						String billEntityId = (String) session.getAttribute("billingEntityId");
						if (customerId == null) {
							customerId = "0";
						}
						userShipAddress.setEntityId(customerId);
						userShipAddress.setShipEntityId(customerId);
						userShipAddress.setBillEntityId(CommonUtility.validateString(billEntityId));
						userShipAddress.setBuyingCompanyId(buyingCompanyId);
						userShipAddress.setUserId(userId);
						userShipAddress.setSession(session);
						userShipAddress.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
						userShipAddress.setUserToken((String) session.getAttribute("userToken"));
						String result = usersObj.addNewShippingAddress(userShipAddress);
					}

				}
				if (userAddress != null) {
					if (userAddress.get("Bill") != null) {
						billEntityId = userAddress.get("Bill").getEntityId();
					}
					if (userAddress.get("Ship") != null) {
						shipEntityId = userAddress.get("Ship").getEntityId();
					}
				}

				UsersModel userDefaultAddress = new UsersModel();
				userDefaultAddress.setAddress1(address1);
				userDefaultAddress.setAddress2(address2);
				userDefaultAddress.setCity(city);
				userDefaultAddress.setState(state);
				userDefaultAddress.setZipCodeStringFormat(zipCode);
				userDefaultAddress.setCountry(country);
				userDefaultAddress.setPhoneNo(phoneNumber);
				userDefaultAddress.setOrderNotes(orderNotes);
				userDefaultAddress.setShippingInstruction(shippingInstruction);
				userDefaultAddress.setOrderedBy(orderedBy);
				userDefaultAddress.setOrderStatus(orderStatus);
				userDefaultAddress.setCustomerReleaseNumber(customerReleaseNumber);
				userDefaultAddress.setReqDate(reqDate);
				userDefaultAddress.setEmailAddress(email);

				ArrayList<ProductsModel> itemDetailObject = new ArrayList<ProductsModel>();
				LinkedHashMap<String, String> lineItemCommentList = new LinkedHashMap<String, String>();
				LinkedHashMap<String, Integer> UOMQTY = new LinkedHashMap<String, Integer>();
				ArrayList<ProductsModel> partIdentifiersList = new ArrayList<ProductsModel>();
				SalesModel defaultOrderDetail = new SalesModel();
				LinkedHashMap<String, Object> orderDetailsForDefault = new LinkedHashMap<String, Object>();
				double orderSubTotal = 0.0;
				double orderGrandTotal = 0.0;
				String c = "";
				String idList = "";
				while (rs.next()) {
					cartCount++;

					if (rs.getInt("ITEM_ID") == CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						nonCatalogItemFlag = true;
					}
					if (cartCount == 1) {
						String paymentMethod = "Purchase Order";
						if ((CommonUtility.validateString(payPalToken).length() > 0
								&& CommonUtility.validateString(payPalPayerId).length() > 0)
								|| (CommonUtility.validateString(creditCardPayment).equalsIgnoreCase("Y")
										&& CommonUtility.validateString(ccTransactionId).length() > 0)) {
							String paymentGatewayType = "";
							if (session.getAttribute("PAYMENT_GATEWAY") != null
									&& session.getAttribute("PAYMENT_GATEWAY").toString().length() > 0) {
								paymentGatewayType = (String) session.getAttribute("PAYMENT_GATEWAY");
							} else {
								paymentGatewayType = CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY");
							}

							if (CommonUtility.validateString(payPalToken).length() > 0
									&& CommonUtility.validateString(payPalPayerId).length() > 0) {
								creditCardValue = new CreditCardModel();
								creditCardValue.setPayPalPayerId(CommonUtility.validateString(payPalPayerId));
								creditCardValue.setPayPalToken(CommonUtility.validateString(payPalToken));
								paymentMethod = "PayPal";
							} else {
								creditCardValue = new CreditCardModel();
								ccNumber = ccNumber.replaceAll("XXXX-", "");
								ccNumber = ccNumber.replaceAll("\\*", "");
								ccNumber = ccNumber.replaceAll("#", "");
								ccNumber = ccNumber.replaceAll("-", "");
								creditCardValue = new CreditCardModel();
								creditCardValue.setCardHolder(cardHolder);
								creditCardValue.setDate(ccExp);
								creditCardValue.setElementPaymentAccountId(ccTransactionId);
								creditCardValue.setAddress1(streetAddress);
								creditCardValue.setZipCode(postalCode);

								creditCardValue.setPaymentGatewayType(paymentGatewayType);

								creditCardValue.setCreditCardResponseCode(ccResponseCode);
								creditCardValue.setCreditCardStatus(ccStatus);
								creditCardValue.setCreditCardHostRefNumber(ccHostRefNumber);
								creditCardValue.setCreditCardTaskID(ccTaskID);
								creditCardValue.setCreditCardAmount(ccAmount);
								creditCardValue.setCreditCardDeclineResponseReason(ccDeclineResponseReason);
								creditCardValue.setCreditCardCvv2VrfyCode(ccCvv2VrfyCode);
								creditCardValue.setCreditCardTip(ccTip);
								creditCardValue.setCreditCardTransTimeStamp(ccTransTimeStamp);
								creditCardValue.setCreditCardToken(ccToken);
								creditCardValue.setCreditCardApprovedAmount(ccApprovedAmount);
								creditCardValue.setCreditCardRequestedAmount(ccRequestedAmount);
								creditCardValue.setCreditCardHostResponseCode(ccHostResponseCode);
								creditCardValue.setCreditCardInvoice(ccInvoice);
								creditCardValue.setCreditCardApprovalCode(ccApprovalCode);
								creditCardValue.setCreditCardTransactionID(ccTransactionId);
								creditCardValue.setCreditCardServerTimestamp(ccServerTimestamp);
								if (CommonUtility
										.validateString(
												CommonDBQuery.getSystemParamtersList().get("P21_CREDIT_CARD_TYPES"))
										.equalsIgnoreCase("Y")) {
									if (!CommonUtility.validateString(ccType).equalsIgnoreCase("")) {
										List<CustomTable> creditCardType = CIMM2VelocityTool.getInstance()
												.getCusomTableData("Website", "CREDIT_CARD_TYPE");
										String credictCardCode = CIMM2VelocityTool.getInstance()
												.getCreditCardCode(creditCardType, ccType);
										if (credictCardCode != null) {
											creditCardValue.setCreditCardType(credictCardCode);
										} else {
											creditCardValue.setCreditCardType(ccType);
										}
									}
								} else {
									creditCardValue.setCreditCardType(ccType);
								}
								System.out.println("Credit card Type--------:" + ccType);
								creditCardValue.setCreditCardFee(ccFee);
								creditCardValue.setCreditCardExternalSessionID(ccExternalSessionID);
								creditCardValue.setCreditCardAddVrfyCode(ccAddVrfyCode);
								creditCardValue.setCreditCardTax(ccTax);
								creditCardValue.setCreditCardNewDomainKey(ccNewDomainKey);
								creditCardValue.setCreditCardNumber(ccNumber);
								creditCardValue.setCreditCardRefNumber(ccRefrenceCode);
								creditCardValue.setCreditCardActualOrderTotal(actualOrderTotal);
								creditCardValue.setCreditCardMerchantId(ccMerchantId);
								creditCardValue.setSaveCard(saveCard);
								paymentMethod = "Credit Card";
							}

							// For JDW All Users will be considered as CreditCardFlag = True (Ref: Brunda)
							session.setAttribute("creditCardFlag", "true");
							if (ccOrderNumber != null && ccOrderNumber.trim().length() > 0) {
								orderId = CommonUtility.validateNumber(ccOrderNumber);
							}
							if (CommonUtility.validateString(
									CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION"))
									.length() > 0) {
								userBillAddress.setShippingInstruction(
										CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
												+ shippingInstruction);
								userShipAddress.setShippingInstruction(
										CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
												+ shippingInstruction);
								userDefaultAddress.setShippingInstruction(
										CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
												+ shippingInstruction);
								shippingInstruction = CommonDBQuery.getSystemParamtersList()
										.get("CREDITCARD_SHIPPINGINSTRUCTION") + shippingInstruction;
							}

						}
						System.out.println("ccTransID : " + ccTransactionId);
						String ipaddress = request.getHeader("X-Forwarded-For");

						if (ipaddress == null)
							ipaddress = request.getRemoteAddr();// userDefaultAddress

						String refKey = "";
						if (ccRefrenceCode != null && ccRefrenceCode.trim().length() > 0) {
							refKey = ccRefrenceCode;
						}
						String homeBranchId = (String) session.getAttribute("homeBranchId");
						String homeBranchName = (String) session.getAttribute("homeBranchName");
						String shipBranchId = (String) session.getAttribute("shipBranchId");
						String shipBranchName = (String) session.getAttribute("shipBranchName");
						if (CommonUtility.validateString(shipBranchId).length() <= 0) {
							shipBranchId = request.getParameter("shipBranchId");
						}
						LinkedHashMap<String, Object> orderDetails = new LinkedHashMap<String, Object>();
						orderDetails.put("homeBranchId", homeBranchId);
						orderDetails.put("homeBranchName", homeBranchName);
						orderDetails.put("shipBranchId", shipBranchId);
						orderDetails.put("shipBranchName", shipBranchName);
						orderDetails.put("wareHousecode", wareHousecode);
						orderDetails.put("gasPoNumber", gasPoNumber);
						orderDetails.put("orderTax", orderTax);
						userBillAddress.setSession(session);
						Discount orderShippingDiscount = getOrderShippingDiscount(session);
						if (orderShippingDiscount != null) {
							try {
								buyingCompanyId = Integer.parseInt(session.getAttribute("buyingCompanyId").toString());
								String website = (String) session.getAttribute("websiteName");
								if (orderId <= 0) {
									orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
								}
								orderDetails.put(SalesActionContantVariables.ORDER_ID, orderId);
								orderDetails.put(SalesActionContantVariables.USER_ID, userId);
								// save Order Level Discount
								SalesPromotionService salesPromo = SalesPromotionService.getInstance();
								if (orderShippingDiscount != null) {
									discountTypeCheck = orderShippingDiscount.getDiscountType().name();
									if (salesPromo.storeCouponUsed(orderShippingDiscount, String.valueOf(orderId),
											userId, buyingCompanyId, website)
											&& CommonUtility.validateString(discountTypeCheck).length() > 0
											&& discountTypeCheck.equals("FREE_SHIPPING")) {
										freeShipping = "yes";
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
												String.valueOf(orderShippingDiscount.getDiscountValue()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
												String.valueOf(orderShippingDiscount.getDiscountInPercent()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
												orderShippingDiscount.getDiscountCoupon().getCopounCode());
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
												orderShippingDiscount.getDiscountType().name());
										orderDetails.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
												SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
										orderDetails = SalesDAO.CouponDataCrud(orderDetails);

										// appending coupon codes
										orderDiscountCoupons.append(
												orderShippingDiscount.getDiscountCoupon().getCopounCode() + ";");
									}
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
						// Order Discount
						List<Discount> orderDiscounts = getOrderDiscount(session);
						if (orderDiscounts != null && orderDiscounts.size() > 0) {
							for (Discount orderDiscount : orderDiscounts) {

								try {
									buyingCompanyId = Integer
											.parseInt(session.getAttribute("buyingCompanyId").toString());
									String website = (String) session.getAttribute("websiteName");
									if (orderId <= 0) {
										orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
									}
									orderDetails.put(SalesActionContantVariables.ORDER_ID, orderId);
									orderDetails.put(SalesActionContantVariables.USER_ID, userId);
									// save Order Level Discount
									SalesPromotionService salesPromo = SalesPromotionService.getInstance();
									if (salesPromo.storeCouponUsed(orderDiscount, String.valueOf(orderId), userId,
											buyingCompanyId, website)) {
										orderTotalDiscountAmount += orderDiscount.getDiscountValue();
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
												decimal2Fmt.format(orderDiscount.getDiscountValue()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
												String.valueOf(orderDiscount.getDiscountInPercent()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
												orderDiscount.getDiscountCoupon().getCopounCode());
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
												orderDiscount.getDiscountType().name());
										orderDetails.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
												SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
										orderDetails = SalesDAO.CouponDataCrud(orderDetails);

										orderDiscountCoupons
												.append(orderDiscount.getDiscountCoupon().getCopounCode() + ";");
									}
								} catch (Exception e) {
									e.printStackTrace();
								}
							}
						}

						// setting order coupons to Order detials to save in orders table and total
						orderDetails.put("discountCouponCode", orderDiscountCoupons.toString());
						orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
								decimal2Fmt.format(orderTotalDiscountAmount));
						orderDetailsForDefault = orderDetails;
						if (CommonUtility.customServiceUtility() != null) {
							CommonUtility.customServiceUtility().insertOrderStatus(orderDetails, orderStatus);// Electrozad
																												// Custom
																												// Service
						}
						orderId = saveOrder(conn, userId, orderId, userBillAddress, userShipAddress, "webOrder",
								taxExempt, refKey, paymentMethod, ccNumber, ccExp, cardHolder, poNumber, ipaddress,
								creditCardValue, customerReleaseNumber, orderDetails);
						// Connection conn, int userId, int orderId, UsersModel userBillAddress,
						// UsersModel userShipAddress,String reqType,String taxExempt,String refKey,
						// String paymentMethod, String creditCardNumber, String creditExp, String
						// cardHolderName,String purchaseOrderNumber,String ipAddress,CreditCardModel
						// creditCardValue)
						UsersDAO.updateUserLog(
								CommonUtility.validateNumber((String) session.getAttribute(Global.USERID_KEY)),
								"Order Submitted", session.getId(), ipaddress, "Click", Integer.toString(orderId));
						salesOrderId = orderId;
					}
					ProductsModel partIdentifiers = new ProductsModel();
					// int packageFlag = 0;
					int packageQty = 1;
					int qty = rs.getInt("QTY");
					if (rs.getInt("PACKAGE_FLAG") > 0) {
						if (rs.getInt("PACKAGE_QTY") > 0) {
							packageQty = rs.getInt("PACKAGE_QTY");
						}

					}
					// qty = qty * packageQty;
					String lineComment = "";
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.validateString(rs.getString("ITEM_LEVEL_SHIPVIA")).length() > 0
								&& CommonUtility.validateString(shipVia).equals("MULTIPLE")) {
							lineComment = "Ship Method : " + rs.getString("ITEM_LEVEL_SHIPVIA");
						}
					}
					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("ITEM_LEVEL_SHIPVIA_REQUIREDBY_DATE"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.validateString(rs.getString("ITEMLEVEL_REQUIREDBYDATE")).length() > 0) {
							lineComment = "Required By Date : " + rs.getString("ITEMLEVEL_REQUIREDBYDATE");
						}
					}
					if (CommonUtility.validateString(rs.getString("LINE_ITEM_COMMENT")).length() > 0) {
						if (CommonUtility.validateString(lineComment).length() > 0) {
							lineComment = lineComment + " | " + "LineItemComment : "
									+ rs.getString("LINE_ITEM_COMMENT");
						} else {
							lineComment = rs.getString("LINE_ITEM_COMMENT");
						}
					}

					ProductsModel saveItems = new ProductsModel();
					saveItems.setCartId(rs.getInt("CART_ID"));
					saveItems.setItemId(rs.getInt("ITEM_ID"));
					saveItems.setInvoiceDesc(rs.getString("INVOICE_DESC"));
					saveItems.setSalesUom(rs.getString("SALES_UOM"));
					saveItems.setPackDesc(rs.getString("PACK_DESC"));
					saveItems.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
					saveItems.setItemLevelRequiredByDate(rs.getString("ITEMLEVEL_REQUIREDBYDATE"));
					saveItems.setCatalogId(rs.getString("CATALOG_ID"));
					saveItems.setShipViaCode(rs.getString("ITEM_LEVEL_SHIPVIA"));
					saveItems.setQty(qty);
					saveItems.setShipViaDesc(rs.getString("ITEM_LEVEL_SHIPVIA_DESC"));
					saveItems.setCustomerPartNumber("");
					if (CommonUtility.checkDBColumn(rs, "GET_PRICE_FROM")) {
						saveItems.setGetPriceFrom(rs.getString("GET_PRICE_FROM"));
						if (CommonUtility.validateString(rs.getString("GET_PRICE_FROM")).equalsIgnoreCase("CART")) {
							saveItems.setCustomerPrice(rs.getDouble("PRICE"));
						}
					}
					saveItems.setManufacturerName(rs.getString("MANUFACTURER_NAME"));
					if (rs.findColumn("UOM") > 0) {
						saveItems.setUom(rs.getString("UOM"));
					}
					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						saveItems.setPartNumber(rs.getString("PART_NUMBER"));
						saveItems.setShortDesc(rs.getString("SHORT_DESC"));
						saveItems.setUnitPrice(rs.getDouble("EXTPRICE") / rs.getInt("QTY"));
						saveItems.setExtendedPrice(rs.getDouble("EXTPRICE"));
						saveItems.setAltPartNumber1(rs.getString("ALT_PART_NUMBER1"));
						saveItems.setPrice(rs.getDouble("EXTPRICE"));
						partIdentifiers.setErpPartNumber(rs.getString("PART_NUMBER"));
						partIdentifiersList.add(partIdentifiers);
						UOMQTY.put(rs.getString("PART_NUMBER"), packageQty);
						lineItemCommentList.put(rs.getString("PART_NUMBER"), lineComment);
					} else {
						saveItems.setPartNumber(rs.getString("NC_PART_NUMBER"));
						saveItems.setShortDesc(rs.getString("SHORT_DESCRIPTION"));
						saveItems.setUnitPrice(rs.getDouble("PRICE"));
						saveItems.setExtendedPrice(rs.getDouble("PRICE") * rs.getInt("QTY"));
						saveItems.setPrice(rs.getDouble("PRICE") * rs.getInt("QTY"));
						partIdentifiers.setErpPartNumber(rs.getString("NC_PART_NUMBER"));
						UOMQTY.put(rs.getString("NC_PART_NUMBER"), packageQty);
						lineItemCommentList.put(rs.getString("NC_PART_NUMBER"), lineComment);
					}
					if (CommonUtility.customServiceUtility() != null) {
						CommonUtility.customServiceUtility().mergeRequiredFields(saveItems, rs);
					}

					// Order Item discount updation
					Discount itemDiscount = getItemDiscount(session, rs.getInt("CART_ID"), rs.getString("PART_NUMBER"),
							rs.getInt("QTY"));

					if (itemDiscount != null) {
						try {
							buyingCompanyId = Integer.parseInt(session.getAttribute("buyingCompanyId").toString());
							String website = (String) session.getAttribute("websiteName");

							// save Item Level Discount
							SalesPromotionService salesPromo = SalesPromotionService.getInstance();
							if (salesPromo.storeCouponUsed(itemDiscount, String.valueOf(orderId), userId,
									buyingCompanyId, website)) {
								discountCouponCode = itemDiscount.getDiscountCoupon().getCopounCode();
								discountAmount = itemDiscount.getDiscountValue();
								discountInPercent = itemDiscount.getDiscountInPercent();
								discountCouponType = itemDiscount.getDiscountType().name();
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
					}

					int orderItemId = 0;
					if (CommonUtility.customServiceUtility() != null
							&& CommonUtility.customServiceUtility().isRequired(saveItems, orderId)) {
						orderItemId = saveOrderItems(conn, orderId, saveItems, discountCouponCode, discountAmount,
								discountInPercent, discountCouponType);
					} else if (CommonUtility.customServiceUtility() == null) {
						orderItemId = saveOrderItems(conn, orderId, saveItems, discountCouponCode, discountAmount,
								discountInPercent, discountCouponType);
					}

					ProductsDAO.updatePopularity(rs.getInt("ITEM_ID"), 3);
					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						orderSubTotal = orderSubTotal + (rs.getDouble("EXTPRICE") - 0);
					} else {
						orderSubTotal = orderSubTotal + ((rs.getDouble("PRICE") * rs.getInt("QTY")) - 0);
					}
					// orderSubTotal = orderSubTotal+(rs.getDouble("EXTPRICE"));
					flag = true;

					ProductsModel itmVal = new ProductsModel();
					itmVal.setItemId(rs.getInt("ITEM_ID"));
					itmVal.setOverRidePriceRule(rs.getString("OVERRIDE_PRICE_RULE"));
					itmVal.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
					itmVal.setPrice(rs.getDouble("PRICE") > 0 ? rs.getDouble("PRICE") : rs.getDouble("NET_PRICE"));
					itmVal.setUnitPrice(rs.getDouble("NET_PRICE"));
					itmVal.setCustomerPrice(rs.getDouble("PRICE"));
					itmVal.setListPrice(rs.getDouble("PRICE"));
					itmVal.setCatalogId(rs.getString("CATALOG_ID"));
					itmVal.setShortDesc(rs.getString("SHORT_DESC"));
					itmVal.setBrandName(rs.getString("BRAND_NAME"));
					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						itmVal.setPartNumber(rs.getString("PART_NUMBER"));
						itmVal.setAltPartNumber1(rs.getString("ALT_PART_NUMBER1"));
						itmVal.setUnitPrice(rs.getDouble("EXTPRICE") / rs.getInt("QTY"));

					} else {
						itmVal.setPartNumber(rs.getString("NC_PART_NUMBER"));
						itmVal.setUnitPrice(rs.getDouble("PRICE"));
					}
					if (CommonUtility.checkDBColumn(rs, "GET_PRICE_FROM")) {
						itmVal.setGetPriceFrom(rs.getString("GET_PRICE_FROM"));
					}
					itmVal.setQty(rs.getInt("QTY"));
					itmVal.setOrderItemId(orderItemId);

					if (discountAmount > 0) {
						itmVal.setDiscountType("$");
						itmVal.setDiscountValue("" + discountAmount);
					}

					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						idList = idList + c + rs.getInt("ITEM_ID");
						c = " OR ";
						partIdentifier.add(rs.getString("PART_NUMBER"));
					} else {
						partIdentifier.add(rs.getString("NC_PART_NUMBER"));
					}

					partIdentifierQuantity.add(rs.getInt("QTY"));
					if (rs.findColumn("UOM") > 0) {
						itmVal.setUom(rs.getString("UOM"));
					}
					if (CommonUtility.customServiceUtility() != null) {
						CommonUtility.customServiceUtility().mergeRequiredFields(itmVal, rs);
					}

					itemDetailObject.add(itmVal);
				}

				LinkedHashMap<Integer, ArrayList<ProductsModel>> customerPartNumber = null;
				if (CommonUtility.validateString(idList).length() > 0) {
					customerPartNumber = ProductHunterSolr.getcustomerPartnumber(idList, buyingCompanyId,
							buyingCompanyId);
				}
				if (customerPartNumber != null && customerPartNumber.size() > 0) {
					for (ProductsModel item : itemDetailObject) {
						item.setCustomerPartNumberList(customerPartNumber.get(item.getItemId()));
					}
				}
				List<ProductsModel> nonCatalogItems = CommonUtility.customServiceUtility() != null
						? CommonUtility.customServiceUtility().extractNonCatalogItems(itemDetailObject)
						: new ArrayList<>();
				if (itemDetailObject != null && itemDetailObject.size() > 0 && eclipseSessionId != null
						&& !eclipseSessionId.trim().equalsIgnoreCase("")) {
					// Call erp for price
					if (CommonUtility.customServiceUtility() != null) {
						itemDetailObject = CommonUtility.customServiceUtility()
								.extractCatalogOrCimmItems(itemDetailObject);
					}

					ProductManagement priceInquiry = new ProductManagementImpl();
					ProductManagementModel priceInquiryInput = new ProductManagementModel();
					priceInquiryInput.setEntityId(CommonUtility.validateString(entityId));
					priceInquiryInput.setHomeTerritory(homeTerritory);
					priceInquiryInput.setPartIdentifier(itemDetailObject);
					priceInquiryInput.setPartIdentifierQuantity(partIdentifierQuantity);
					priceInquiryInput.setRequiredAvailabilty("Y");
					priceInquiryInput.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
					priceInquiryInput.setUserToken((String) session.getAttribute("userToken"));
					priceInquiryInput.setSession(session);
					itemDetailObject = priceInquiry.priceInquiry(priceInquiryInput, itemDetailObject);
					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("SAVE_LEADTIME_ON_ORDER_CONFIRMATION"))
							.equalsIgnoreCase("Y")) {
						ProductManagementModel leadInquiry = new ProductManagementModel();
						leadInquiry.setHomeTerritory(
								CommonUtility.validateString((String) session.getAttribute("wareHouseCode")));
						leadInquiry.setPartIdentifier(itemDetailObject);
						String leadTimeData = priceInquiry.ajaxBasePriceAndLeadTime(leadInquiry);
						Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
						ProductsModelArray gsonParsed = gson.fromJson("{\"products\":" + leadTimeData + "}",
								ProductsModelArray.class);
						for (ProductsModel eachItem : itemDetailObject) {
							for (ProductsModel eachLeadItem : gsonParsed.getProducts()) {
								if (eachItem.getPartNumber().equalsIgnoreCase(eachLeadItem.getPartNumber())) {
									if (eachItem.getHomeBranchavailablity() == 0) {
										if (eachLeadItem.getLeadTime() == 0) {
											eachItem.setLeadTime(5);
										} else {
											eachItem.setLeadTime(eachLeadItem.getLeadTime());
										}
									} else {
										eachItem.setLeadTime(-1);
									}
								}

							}
						}
					}
					/*
					 * if(CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get(
					 * "UMQTY_FROM_ERP")).equalsIgnoreCase("Y")) { for(ProductsModel item :
					 * itemDetailObject) {
					 * //UOMQTY.put(item.getPartNumber(),CommonUtility.validateNumber(item.getQtyUOM
					 * ()));
					 * UOMQTY.put(item.getPartNumber(),(item.getUomQty()>0?item.getUomQty():1)); } }
					 */
					/*
					 * // orderSubTotal = 0.0; for(ProductsModel eachItem:itemDetailObject){
					 * eachItem.setNetPrice(eachItem.getPrice()); orderSubTotal =
					 * orderSubTotal+eachItem.getNetPrice(); }
					 */

					updateOrderItemPrice(conn, orderId, itemDetailObject);

				}
				if (CommonUtility.customServiceUtility() != null) {
					orderSubTotal = CommonUtility.customServiceUtility().calculatingOrderSubTotal(itemDetailObject,
							orderSubTotal);
				}
				orderGrandTotal = orderSubTotal + CommonUtility.validateDoubleNumber(orderTax)
						+ CommonUtility.validateDoubleNumber(orderFreight);
				System.out.println("orderGrandTotal----:" + orderGrandTotal);
				LinkedHashMap<Integer, ProductsModel> allItemsData = new LinkedHashMap<Integer, ProductsModel>();
				for (ProductsModel item : itemDetailObject) {
					allItemsData.put(item.getItemId(), item);
				}
				SalesModel erpOrderDetail = new SalesModel();

				if (flag) {

					String quoteNumber = (String) session.getAttribute("quoteNumber");
					orderGrandTotal = orderSubTotal;
					if (CommonUtility.customServiceUtility() != null) {
						orderGrandTotal = CommonUtility.customServiceUtility().assigningTotal(orderGrandTotal,
								orderSubTotal, orderTax, orderFreight);
					}
					defaultOrderDetail.setSubtotal(orderSubTotal);
					defaultOrderDetail.setTotal(orderGrandTotal);
					defaultOrderDetail.setOrderedBy(orderedBy);
					defaultOrderDetail.setStatusDescription("Order Successfully Submitted");
					defaultOrderDetail.setOrderNotes(orderNotes);
					defaultOrderDetail.setShippingInstruction(shippingInstruction);
					defaultOrderDetail.setReqDate(reqDate);
					defaultOrderDetail.setShipViaID(shipVia);
					defaultOrderDetail.setShipViaDescription(shipViaDescription);
					if (CommonUtility.validateDoubleNumber(upsFrieghtCharges) > 0) {
						defaultOrderDetail.setFreight(CommonUtility.validateDoubleNumber(upsFrieghtCharges));
					} else {
						defaultOrderDetail.setFreight(CommonUtility.validateDoubleNumber(orderFreight));
					}
					defaultOrderDetail.setTax(CommonUtility.validateDoubleNumber(orderTax));

					AddressModel selectedShipAddress = new AddressModel();
					selectedShipAddress.setAddress1(address1);
					if (CommonUtility.validateString(shippingAccountNumber).length() > 0) {
						checkAccount = "Ship Acct No." + shippingAccountNumber;
					} else {
						checkAccount = "";
					}
					if (CommonUtility.validateString(address2).length() > 0) {
						selectedShipAddress.setAddress2(address2 + " " + checkAccount);
					} else {
						selectedShipAddress.setAddress2(checkAccount);
					}
					selectedShipAddress.setCity(city);
					selectedShipAddress.setState(state);
					selectedShipAddress.setZipCode(zipCode);
					selectedShipAddress.setCountry(country);
					selectedShipAddress.setPhoneNo(phoneNumber);
					selectedShipAddress.setEmailAddress(email);
					selectedShipAddress.setEntityId(userShipAddress.getEntityId());
					selectedShipAddress.setShipToId(userShipAddress.getShipToId());
					selectedShipAddress.setAddressType(userShipAddress.getAddressType());
					if (CommonUtility.validateString(shipEntityId) != null) {
						selectedShipAddress.setEntityId(shipEntityId);
					} else {
						selectedShipAddress.setEntityId(userShipAddress.getEntityId());
					}
					if (CommonUtility.customServiceUtility() != null) {
						CommonUtility.customServiceUtility().addfirstNameAndlastNameToshipAddress(selectedShipAddress,
								userShipAddress, session);
					}

					SalesOrderManagementModel salesOrderInput = new SalesOrderManagementModel();
					salesOrderInput.setOrderItems(itemDetailObject);
					salesOrderInput.setAllItemData(allItemsData);
					SalesModel quoteResponse = null;
					if (session.getAttribute("quoteResponse") != null) {
						quoteResponse = new SalesModel();
						quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
						salesOrderInput.setQuoteResponse(quoteResponse);
					}
					salesOrderInput.setShipVia(shipVia);
					salesOrderInput.setSelectedBranch(selectedBranch);
					salesOrderInput.setShipViaDescription(shipViaDescription);
					salesOrderInput.setShippingInstruction(shippingInstruction);
					salesOrderInput.setOrderNotes(orderNotes);
					salesOrderInput.setOrderedBy(orderedBy);
					salesOrderInput.setOrderStatus(orderStatus);
					salesOrderInput.setOrderStatusCode(orderStatusCode);
					salesOrderInput.setReqDate(reqDate);
					if (CommonUtility.validateString(guestFlag).length() > 0) {
						salesOrderInput.setGuestFlag(guestFlag);
					}
					salesOrderInput.setSession(session);
					salesOrderInput.setOrderId(orderId);
					salesOrderInput.setBillEntityId(billEntityId);
					salesOrderInput.setShipEntityId(shipEntityId);
					salesOrderInput.setUserToken(userToken);
					salesOrderInput.setShipAddress(selectedShipAddress);
					salesOrderInput.setTaxExempt(taxExempt);
					salesOrderInput.setAnonymous(anonymous);
					salesOrderInput.setUserSelectedLocation(userSelectedLocation);
					salesOrderInput.setErpUserContactId(erpUserContactID);
					salesOrderInput.setBillEntityId(billEntityId);
					salesOrderInput.setShipEntityId(shipEntityId);
					salesOrderInput.setUserToken(userToken);
					salesOrderInput.setTaxExempt(taxExempt);
					salesOrderInput.setNotesIndicator(notesIndicator);
					if (CommonUtility.validateDoubleNumber(upsFrieghtCharges) > 0) {
						salesOrderInput.setFrieghtCharges(upsFrieghtCharges);
					} else {
						orderFreight = (String) request.getParameter("orderFreight");
						salesOrderInput.setFrieghtCharges(orderFreight);
					}
					salesOrderInput.setUserName(userName);
					salesOrderInput.setCreditCardValue(creditCardValue);
					salesOrderInput.setPurchaseOrderNumber(poNumber);
					salesOrderInput.setCustomerReleaseNumber(customerReleaseNumber);
					salesOrderInput.setSelectedBranch(selectedBranch);
					salesOrderInput.setLineItemCommentList(lineItemCommentList);
					salesOrderInput.setCountry(country);
					salesOrderInput.setCCType(ccType);
					salesOrderInput.setCCAuth(ccAuthCode);
					salesOrderInput.setOrderType(CommonUtility.validateString(request.getParameter("orderType")));
					salesOrderInput.setOrderTax(CommonUtility.validateDoubleNumber(orderTax));
					salesOrderInput
							.setBillAddress(Cimm2BCentralClient.getInstance().userModelToAddressModel(userBillAddress));
					salesOrderInput.setShipViaMethod(shipViaDisplay);
					if (CommonUtility.validateString(ccApprovedAmount).length() > 0) {
						approAmount = Double.parseDouble(ccApprovedAmount);
					}
					salesOrderInput.setGasPoNumber(gasPoNumber);
					salesOrderInput.setCCAmount(approAmount);
					salesOrderInput.setCCToken(ccToken);
					salesOrderInput.setuOMQTY(UOMQTY);
					salesOrderInput.setPaymentTerms(paymentTermsCode);
					if (quoteNumber != null && !quoteNumber.trim().equalsIgnoreCase(""))
						salesOrderInput.setQuoteNumber(quoteNumber);

					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
							.equalsIgnoreCase("SO")
							|| (CommonUtility.validateString(orderingType).length() > 0
									&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO"))) {
						if (CommonUtility
								.validateString(
										CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
								.equalsIgnoreCase(CommonUtility.validateString(orderingType))) {
							salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
						} else if (CommonUtility.validateString(orderingType).length() > 0
								&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO")) {
							salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
						} else if (CommonUtility
								.validateString(
										CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
								.length() > 0) {
							salesOrderInput.setErpOrderType(CommonUtility.validateString(
									CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE")));
						}
					}

					salesOrderInput.setShippingAndHandlingFee(CommonUtility.validateString(totalCartFrieghtCharges));// PSS
																														// DFM
																														// shipping
																														// and
																														// handlingfg
					if (upsFrieghtCharges != null) {
						salesOrderInput.setFrieghtCharges(upsFrieghtCharges);
					} else {
						if (CommonUtility.validateString((String) session.getAttribute("isRetailUser"))
								.equalsIgnoreCase("Y")) {
							SalesOrderManagementModel frightcal = CommonUtility.customServiceUtility()
									.orderFreightcalculation(salesOrderInput);
							if (frightcal != null) {
								salesOrderInput.setFrieghtCharges(frightcal.getFrieghtCharges());
							}
						}
					}

					salesOrderInput.setOrderERPId(orderErpId);
					if (CommonUtility.validateString(salesOrderInput.getErpOrderType()).equalsIgnoreCase("SO")) {

						String discountValue = (String) session.getAttribute("discountValue");
						String discountType = (String) session.getAttribute("discountType");
						String userEmailAddress = (String) session.getAttribute("userEmailAddress");
						String userOfficePhone = (String) session.getAttribute("userOfficePhone");

						double freight = 0.0;
						if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
								.equalsIgnoreCase("SHIPVIA_COST_TABLE")
								&& session.getAttribute("customerShipViaListJson") != null) {
							String shipCostTableJasonString = CommonUtility
									.validateString((String) session.getAttribute("customerShipViaListJson"));
							Gson gson = new Gson();
							// LinkedList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
							// new TypeToken<List<ShipVia>>(){}.getType());
							ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
									new TypeToken<List<ShipVia>>() {
									}.getType());
							if (shipCostTable != null && !shipCostTable.isEmpty()) {
								if (shipCostTable != null && !shipCostTable.isEmpty()) {
									if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
										session.removeAttribute("selectedShipCodeOption");
									} else {
										if (session.getAttribute("selectedShipCodeOption") != null)
											selectedShipCodeOption = CommonUtility.validateString(
													session.getAttribute("selectedShipCodeOption").toString());
									}
									if (freeShipping.equalsIgnoreCase("no")) {
										for (ShipVia shipViaObj : shipCostTable) {
											// if(shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)){
											if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
												if (shipViaObj.getShipCode().equalsIgnoreCase(selectedShipCodeOption)) {
													freight = shipViaObj.getShipCost();
													session.removeAttribute("selectedShipCodeOption");
													break;
												}
											} else {
												if (shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)) {
													freight = shipViaObj.getShipCost();
													break;
												}
											}
										}
									}
								}
							}
						}
						LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();
						createQuoteInput.put("session", session);
						createQuoteInput.put("orderedBy", orderedBy);
						createQuoteInput.put("itemList", itemDetailObject);
						createQuoteInput.put("userToken", userToken);
						createQuoteInput.put("shipToEntity", userToken);
						createQuoteInput.put("orderNotes", orderNotes);
						createQuoteInput.put("shippingInstruction", shippingInstruction);
						createQuoteInput.put("poNumber", poNumber);
						createQuoteInput.put("reqDate", reqDate);
						createQuoteInput.put("shipVia", shipVia);
						createQuoteInput.put("shipViaDescription", shipViaDescription);
						createQuoteInput.put("freight", freight);
						createQuoteInput.put("billAddress", userBillAddress);
						createQuoteInput.put("shipAddress", userShipAddress);
						createQuoteInput.put("defaultBillToId", defaultBillToId);
						createQuoteInput.put("defaultShipToId", defaultShipToId);
						createQuoteInput.put("customerId", userToken);
						if (CommonUtility.validateString(shipVia).length() > 0 && shipVia.contains("PK")) {
							if (shipVia.equals("PKAA")) {
								wareHousecode = "ANN";
							} else if (shipVia.equals("PKCS")) {
								wareHousecode = "CEDA";
							} else if (shipVia.equals("PKCL")) {
								wareHousecode = "WATE";
							} else if (shipVia.equals("PKFM")) {
								wareHousecode = "FARM";
							} else if (shipVia.equals("PKUT")) {
								wareHousecode = "UTIC";
							}
							createQuoteInput.put("wareHousecode", wareHousecode);
						} else {
							createQuoteInput.put("wareHousecode", wareHousecode);
						}
						createQuoteInput.put("customerCountry", customerCountry);
						createQuoteInput.put("customerName", userShipAddress.getCustomerName());
						createQuoteInput.put("customerReleaseNumber", customerReleaseNumber);
						createQuoteInput.put("discountValue", discountValue);
						createQuoteInput.put("discountType", discountType);
						if (nonCatalogItemFlag) {
							createQuoteInput.put("ARIItem", "Y");
						} else {
							createQuoteInput.put("ARIItem", "N");
						}
						createQuoteInput.put("subsetId", subsetId);
						createQuoteInput.put("generalSubset", generalSubset);
						if (CommonUtility.validateString(userEmailAddress).length() > 0) {
							createQuoteInput.put("userEmailAddress", userEmailAddress);
						}
						if (CommonUtility.validateString(userOfficePhone).length() > 0) {
							createQuoteInput.put("userOfficePhone", userOfficePhone);
						}
						/*
						 * if(customFieldVal!=null){ createQuoteInput.put("customFieldVal",
						 * customFieldVal); } if(freightValue!=null){ createQuoteInput.put("freight",
						 * freightValue.getFreightValue()); }
						 */
						createQuoteInput.put("creditCardValue", creditCardValue);
						createQuoteInput.put("erpOrderType",
								CommonUtility.validateString(salesOrderInput.getErpOrderType()));
						if (orderTotalDiscountAmount > 0) {
							createQuoteInput.put("orderDiscountType", "$");
							createQuoteInput.put("discountAmount", orderTotalDiscountAmount);
							createQuoteInput.put("discountPercent", discountValue);
						} else {
							createQuoteInput.put("orderDiscountType", discountType);
							createQuoteInput.put("discountAmount", discountAmount);
							createQuoteInput.put("discountPercent", discountValue);

						}
						createQuoteInput.put("paymentTermsCode", CommonUtility.validateString(paymentTermsCode));

						salesOrderInput.setSalesOrderInput(createQuoteInput);
					}
					if (orderTotalDiscountAmount > 0) {
						salesOrderInput.setDiscountAmount(CommonUtility
								.roundHalfUp(CommonUtility.validateParseDoubleToString(orderTotalDiscountAmount)));
					}
					salesOrderInput
							.setExternalCartId(CommonUtility.validateString(request.getParameter("externalCartId")));
					salesOrderInput.setJurisdictionCode(
							CommonUtility.validateString(request.getParameter("jurisdictionCode")));
					salesOrderInput.setFreightCode(request.getParameter("freightCode"));
					salesOrderInput.setDiscountAmount(orderTotalDiscountAmount);
					salesOrderInput.setIncludeApprovalType(request.getParameter("includeApprovalType"));
					salesOrderInput.setApprovalType(request.getParameter("approvalType"));
					salesOrderInput.setOrderSource(shipCompanyName);
					salesOrderInput.setOrderDisposition(orderDisposition);
					if (CommonUtility.validateString(selectedBranch).length() > 0) {
						session.setAttribute("salesLocationId", selectedBranch);
					}
					SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();

					erpOrderDetail = salesOrderSubmit.submitOrderToERP(salesOrderInput);

					if (erpOrderDetail != null && !CommonUtility.validateString(erpOrderDetail.getStatusDescription())
							.toUpperCase().contains("ERROR")) {
						defaultOrderDetail.setOrderID(erpOrderDetail.getErpOrderNumber());
						if ((CommonUtility.validateString(erpOrderDetail.getStatusDescription()).toUpperCase()
								.contains("ERROR")
								|| CommonUtility.validateString(erpOrderDetail.getStatusDescription()).length() == 0)
								&& !erpOrderDetail.isSendMailFlag()) {
							sendMailFlag = false;
						}

						for (ProductsModel item : itemDetailObject) {
							for (SalesModel erpOrderItem : erpOrderDetail.getOrderList()) {
								if (item.getPartNumber() != null && erpOrderItem.getPartNumber() != null && item
										.getPartNumber().trim().equalsIgnoreCase(erpOrderItem.getPartNumber().trim())) {
									item.setUnitPrice(erpOrderItem.getUnitPrice());
									item.setListPrice(erpOrderItem.getListPrice());
									item.setUom(erpOrderItem.getUom());
									item.setQty(erpOrderItem.getQtyShipped());
									item.setQtyUOM(erpOrderItem.getQtyUom());
									item.setErpQty(erpOrderItem.getPerQty());

								} else if (CommonDBQuery.getSystemParamtersList().get("DISCOUNT_PART_NUMBER") != null
										&& erpOrderItem.getPartNumber() != null
										&& CommonDBQuery.getSystemParamtersList().get("DISCOUNT_PART_NUMBER").trim()
												.equalsIgnoreCase(erpOrderItem.getPartNumber().trim())) {
									erpOrderDetail.setCashDiscountAmount(
											erpOrderItem.getUnitPrice() > 0 ? erpOrderItem.getUnitPrice() : 0.0);
								}
							}
						}
						if (erpOrderDetail.getShipViaID() != null
								&& erpOrderDetail.getShipViaID().trim().length() > 0) {
						} else {
							erpOrderDetail.setShipViaID(shipVia);
						}
						if (CommonUtility.validateString(erpOrderDetail.getShipViaMethod()).length() > 0) {
						} else {
							if (session.getAttribute("customerShipViaDesc") != null) {
								erpOrderDetail.setShipViaMethod(CommonUtility
										.validateString(session.getAttribute("customerShipViaDesc").toString()));
							} else {
								erpOrderDetail.setShipViaMethod(shipViaDisplay);
							}
						}

						if (erpOrderDetail.getOrderedBy() != null
								&& erpOrderDetail.getOrderedBy().trim().length() > 0) {
						} else {
							erpOrderDetail.setOrderedBy(orderedBy);
						}
						boolean deleteCartFlag = true;
						if (CommonUtility.validateString(isApproveCart).equalsIgnoreCase("Y")) {
							deleteCartFlag = false;
						}
						if (deleteCartFlag && erpOrderDetail.getErpOrderNumber() != null) {
							deleteFromCart(conn, userId);
						}
						if (erpOrderDetail.getFreight() == 0) {
							erpOrderDetail.setFreight(CommonUtility.validateDoubleNumber(orderFreight));
						}
						if (erpOrderDetail.getTax() == 0) {
							erpOrderDetail.setTax(CommonUtility.validateDoubleNumber(orderTax));
						} else {
							if (CommonUtility
									.validateString(CommonDBQuery.getSystemParamtersList().get("TAX_FROM_CIMM"))
									.equalsIgnoreCase("Y")) {
								salesOrderInput.setOrderTax(CommonUtility.validateDoubleNumber(orderTax));
							} else {
								if (erpOrderDetail.getTax() > 0.0) {
									salesOrderInput.setOrderTax(erpOrderDetail.getTax());
								}

							}
						}
						if (erpOrderDetail.getReqDate() != null && erpOrderDetail.getReqDate().trim().length() > 0) {
						} else {
							erpOrderDetail.setReqDate(reqDate);
						}
						if (CommonUtility
								.validateDoubleNumber(CommonUtility.validateString(totalCartFrieghtCharges)) > 0
								&& erpOrderDetail.getHandling() <= 0.0) {
							erpOrderDetail.setHandling(CommonUtility
									.validateDoubleNumber(CommonUtility.validateString(totalCartFrieghtCharges)));
						} else {
							if (erpOrderDetail.getHandling() > 0.0) {
								erpOrderDetail.setHandling(erpOrderDetail.getHandling());
							}
						}

						if (erpOrderDetail.getSubtotal() <= 0.0) {
							String roundSubTotalStr = CommonUtility.validateParseDoubleToString(orderSubTotal);
							erpOrderDetail.setSubtotal(CommonUtility.validateDoubleNumber(roundSubTotalStr));
						}
						if (erpOrderDetail.getTotal() <= 0.0) {
							String roundTotalStr = CommonUtility.validateParseDoubleToString(orderGrandTotal);
							erpOrderDetail.setTotal(CommonUtility.roundHalfUp(roundTotalStr));
							System.out.println("OrderTotal---:update to db" + orderGrandTotal);
						}

						if (erpOrderDetail.getFreight() <= 0.0) {
							erpOrderDetail.setFreight(
									CommonUtility.validateDoubleNumber(salesOrderInput.getFrieghtCharges()));
						}
						if (CommonUtility.validateString(erpOrderDetail.getExternalSystemId()).length() > 0) {
							erpOrderDetail.setOrderID(erpOrderDetail.getExternalSystemId());
						} else {
							erpOrderDetail.setOrderID(erpOrderDetail.getErpOrderNumber());
						}
						erpOrderDetail.setShipViaDescription(defaultOrderDetail.getShipViaDescription());
						// purvis Custom service for non stock non pim items notification
						if (CommonUtility.customServiceUtility() != null) {
							CommonUtility.customServiceUtility().notifyNonCatalogItemsToSalesRep(nonCatalogItems,
									session, erpOrderDetail);
						}
						// CustomServiceProvide
						if (CommonUtility.customServiceUtility() != null) {
							Map<String, Double> discountMap = CommonUtility.customServiceUtility()
									.updatediscount(erpOrderDetail.getDiscount(), erpOrderDetail.getrOEDiscount());
							if (discountMap.get("erpdiscountval") != null) {
								double discountamount = discountMap.get("erpdiscountval");
								if (discountamount != 0.0) {
									erpOrderDetail.setCashDiscountAmount(discountamount);
								}
							}
							if (discountMap.get("erproediscountval") != null) {
								double roeDiscount = discountMap.get("erproediscountval");
								if (roeDiscount != 0.0) {
									erpOrderDetail.setCashDiscountAmount(roeDiscount);
									erpOrderDetail.setrOEDiscount(roeDiscount);
								}
							}

						}
						updateSalesOrder(conn, orderId, erpOrderDetail);
						if (erpOrderDetail.getOrderList() != null && erpOrderDetail.getOrderList().size() > 0) {
							updateOrderItemPrice(conn, orderId, itemDetailObject);
						}

					} else if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ERP"))
							.equalsIgnoreCase("cimm2bcentral")
							&& CommonUtility
									.validateNumber(erpOrderDetail.getStatus()) == HttpStatus.SC_FAILED_DEPENDENCY) {
						defaultOrderDetail.setOrderStatus("Error while submitting the order");
						defaultOrderDetail.setStatusDescription(erpOrderDetail.getStatusDescription());
						defaultOrderDetail
								.setFreight(CommonUtility.validateDoubleNumber(salesOrderInput.getFrieghtCharges()));
						updateSalesOrder(conn, orderId, defaultOrderDetail);
						sendMailFlag = false;
					} else {
						if (orderDetailsForDefault.get("discountAmount") != null) {
						} else {
							orderDetailsForDefault.put("discountAmount", "0");
						}
						if (orderDetailsForDefault.get("discountPercentage") != null) {
						} else {
							orderDetailsForDefault.put("discountPercentage", "0");
						}
						if (erpOrderDetail != null && erpOrderDetail.getErpOrderNumber() != null) {
							defaultOrderDetail.setOrderID(erpOrderDetail.getErpOrderNumber());
						}
						defaultOrderDetail.setCashDiscountAmount(CommonUtility
								.validateDoubleNumber((String) orderDetailsForDefault.get("discountAmount")));
						defaultOrderDetail.setCashDiscountPercentage(CommonUtility
								.validateDoubleNumber((String) orderDetailsForDefault.get("discountPercentage")));
						defaultOrderDetail
								.setFreight(CommonUtility.validateDoubleNumber(salesOrderInput.getFrieghtCharges()));
						updateSalesOrder(conn, orderId, defaultOrderDetail);
					}
					if (CommonUtility.customServiceUtility() != null) {
						sendMailFlagApprove = CommonUtility.customServiceUtility()
								.disableSendMailApprove(erpOrderDetail);
					}
					boolean deleteCartFlag = true;
					if (isApproveCart != null && isApproveCart.trim().equalsIgnoreCase("Y") && orderId > 0
							&& sendMailFlagApprove) {
						SalesDAO.approveCartDao(session, savedGroupId, orderId);
						deleteCartFlag = false;
					}
					if (deleteCartFlag) {
						if (!CommonUtility
								.validateString(
										CommonDBQuery.getSystemParamtersList().get("DISABLE_DELETE_CART_ON_ORDER_FAIL"))
								.equalsIgnoreCase("Y")
								|| CommonUtility.validateString(erpOrderDetail.getErpOrderNumber()).length() > 0) {
							deleteFromCart(conn, userId);
						}
					}
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("SEND_ORDER_FAIL_MAIL"))
							.equalsIgnoreCase("Y")
							&& (CommonUtility.validateString(erpOrderDetail.getStatusDescription()).toUpperCase()
									.contains("ERROR")
									|| CommonUtility.validateString(erpOrderDetail.getStatusDescription())
											.length() == 0)) {
						sendMailFlag = true;
					}
					SalesModel otherDetail = new SalesModel();
					otherDetail.setSession(session);
					otherDetail.setSendmailToSalesRepOnly(sendmailToSalesRepOnly);
					int count = -1;
					if (sendMailFlag) {
						count = SalesDAO.sendConfirmationMail(orderId, userId, 0, null, otherDetail);
					}

					if (count == 1) {
						sql = "update orders set email_sent = 'Y' where order_id = ?";
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, orderId);
						rs = pstmt.executeQuery();
					}

					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CREDITCARD_SAVE"))
							.equalsIgnoreCase("Y")) {
						SalesDAO.deleteAllCreditCardInfo(userId);
					}

					stmt = conn.prepareCall("{call ORDER_KEYWORD_PROC(?)}");
					stmt.setInt(1, orderId);
					stmt.execute();

				}
				System.out.println(type);
				if (savedGroupId == 0 && CommonUtility.validateString(isFromQC).equalsIgnoreCase("Yes")) {
					renderContent = Integer.toString(orderId);
					target = "ResultLoader";
				} else if (savedGroupId == 0 && CommonUtility.validateString(isFromQC).equalsIgnoreCase("PROCESS")) {
					renderContent = Integer.toString(orderId);
					target = "ResultLoader";
				} else if (savedGroupId > 0 && CommonUtility.validateString(isFromQC).equalsIgnoreCase("PROCESS")) {
					renderContent = Integer.toString(orderId);
					target = "ResultLoader";
				} else {
					target = SUCCESS;
				}
			} else {
				target = "SESSIONEXPIRED";
			}

			session.removeAttribute("orderingType");
			session.removeAttribute("calculateTax");

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBStatement(stmt);
			ConnectionManager.closeDBConnection(conn);
		}
		return target;
	}

	public static void updateSalesOrder(Connection conn, int orderId, SalesModel erpOrderDetail) {
		String tempDate[] = null;
		String date = "";
		String updateDate = "";

		PreparedStatement pstmt = null;
		try {
			// EXTERNAL_SYSTEM_ID=?,EXTERNAL_SYSTEM_ERROR=?, TAX_AMOUNT=?,
			// SUBTOTAL_AMOUNT=?, SHIP_METHOD=?, SHIP_METHOD_ID=?, TOTAL_AMOUNT=?,
			// SHIP_ADDRESSEE=?, FEDERALEXCISETAX=?, FREIGHT=?, HANDLING_FEE=?,
			// PAYMENT_AMOUNT=?, PAYMENT_DATE=REPLACEPAYMENTDATE, ROE_DISCOUNT=?,
			// CASHDISCOUNT_AMOUNT=?, CASHDISCOUNT_PERCENTAGE=? WHERE ORDER_ID=?
			if (CommonUtility.validateString(erpOrderDetail.getWholeOrderDiscountAmount()).length() > 0) {
				erpOrderDetail.setCashDiscountAmount(Double.parseDouble(erpOrderDetail.getWholeOrderDiscountAmount()));
			}
			String sql = PropertyAction.SqlContainer.get("updateOrderQuery");
			if (erpOrderDetail.getPaymentDate() == null) {
				updateDate = "''";
			} else {
				tempDate = erpOrderDetail.getPaymentDate().split("/");
				date = tempDate[2] + "/" + tempDate[0] + "/" + tempDate[1];
				updateDate = "TO_DATE('" + date + "','yyyy/mm/dd')";

			}

			sql = sql.replace("REPLACEPAYMENTDATE", updateDate);
			if (erpOrderDetail.getShipDate() == null) {
				updateDate = "''";
			} else if (erpOrderDetail.getShipDate().trim().equalsIgnoreCase("")) {
				updateDate = "''";
			} else {
				tempDate = erpOrderDetail.getShipDate().split("/");
				date = tempDate[2] + "/" + tempDate[0] + "/" + tempDate[1];
				updateDate = "TO_DATE('" + date + "','yyyy/mm/dd')";
			}

			sql = sql.replace("REPLACESHIPDATE", updateDate);
			if (erpOrderDetail.getReqDate() == null) {
				updateDate = "''";
			} else if (erpOrderDetail.getReqDate().trim().equalsIgnoreCase("")) {
				updateDate = "''";
			} else {
				tempDate = erpOrderDetail.getReqDate().split("/");
				date = tempDate[2] + "/" + tempDate[0] + "/" + tempDate[1];
				updateDate = "TO_DATE('" + date + "','yyyy/mm/dd')";
			}

			sql = sql.replace("REPLACEREQDATE", updateDate);
			String shipMethod = erpOrderDetail.getShipViaID();
			if (CommonUtility.validateString(erpOrderDetail.getShipViaMethod()).length() > 0
					&& CommonUtility.validateString(erpOrderDetail.getShipViaMethod()).length() > CommonUtility
							.validateString(shipMethod).length()) {
				shipMethod = CommonUtility.validateString(erpOrderDetail.getShipViaMethod());
			}

			// ---------------------------------Reconsider this line of Code after ERP
			// integration
			if (CommonUtility.validateNumber(erpOrderDetail.getShipViaID()) > -1) {
				erpOrderDetail.setShipViaID("0");
			}
			// ---------------------------------Reconsider this line of Code after ERP
			// integration

			System.out.println("sql : " + sql);
			// System.out.println("Values : " +
			// erpOrderDetail.getOrderID()+","+erpOrderDetail.getStatusDescription()+","+erpOrderDetail.getTax()+","+erpOrderDetail.getSubtotal()+","+
			// CommonUtility.validateString(shipMethod)+","+ erpOrderDetail.getTotal()+","+
			// erpOrderDetail.getOrderedBy()+","+ erpOrderDetail.getFederalExciseTax()+","+
			// erpOrderDetail.getFreight()+","+ erpOrderDetail.getHandling()+","+
			// erpOrderDetail.getPaymentAmount()+","+ erpOrderDetail.getrOEDiscount()+","+
			// erpOrderDetail.getCashDiscountAmount()+","+
			// erpOrderDetail.getCashDiscountPercentage()+","+
			// erpOrderDetail.getFreightIn()+","+ erpOrderDetail.getShipViaID()+","+
			// CommonUtility.validateString(erpOrderDetail.getErpOrderNumber())+",
			// 0"+CommonUtility.validateParseIntegerToString(erpOrderDetail.getOrderSuffix())+","+
			// CommonUtility.validateParseDoubleToString(erpOrderDetail.getDeliveryCharge())+","+
			// orderId);
			System.out.println("Values : 1- " + erpOrderDetail.getOrderID() + ", 2- "
					+ erpOrderDetail.getStatusDescription() + ", 3- " + erpOrderDetail.getTax() + ", 4- "
					+ erpOrderDetail.getSubtotal() + ", 5- " + CommonUtility.validateString(shipMethod) + ", 6- "
					+ erpOrderDetail.getTotal() + ", 7- " + erpOrderDetail.getOrderedBy() + ", 8- "
					+ erpOrderDetail.getFederalExciseTax() + ", 9- " + erpOrderDetail.getFreight() + ", 10- "
					+ erpOrderDetail.getHandling() + ", 11- " + erpOrderDetail.getPaymentAmount() + ", 12- "
					+ erpOrderDetail.getrOEDiscount() + ", 13 & 15 - " + erpOrderDetail.getCashDiscountAmount()
					+ ", 14- " + erpOrderDetail.getCashDiscountPercentage() + ", 17- " + erpOrderDetail.getFreightIn()
					+ ", 18- " + erpOrderDetail.getShipViaID() + ", 19- "
					+ CommonUtility.validateString(erpOrderDetail.getErpOrderNumber()) + ", 20- 0"
					+ CommonUtility.validateParseIntegerToString(erpOrderDetail.getOrderSuffix()) + ", 21- "
					+ CommonUtility.validateParseDoubleToString(erpOrderDetail.getDeliveryCharge()) + ", 22- "
					+ orderId);
			// System.out.println("Values :\n 1- " + erpOrderDetail.getOrderID()+"\n 2-
			// "+erpOrderDetail.getStatusDescription()+"\n 3- "+erpOrderDetail.getTax()+"\n
			// 4- "+erpOrderDetail.getSubtotal()+"\n 5- "+
			// CommonUtility.validateString(shipMethod)+"\n 6- "+
			// erpOrderDetail.getTotal()+"\n 7- "+ erpOrderDetail.getOrderedBy()+"\n 8- "+
			// erpOrderDetail.getFederalExciseTax()+"\n 9- "+
			// erpOrderDetail.getFreight()+"\n 10- "+ erpOrderDetail.getHandling()+"\n 11-
			// "+ erpOrderDetail.getPaymentAmount()+"\n 12- "+
			// erpOrderDetail.getrOEDiscount()+"\n 13 & 15 - "+
			// erpOrderDetail.getCashDiscountAmount()+"\n 14- "+
			// erpOrderDetail.getCashDiscountPercentage()+"\n 17- "+
			// erpOrderDetail.getFreightIn()+"\n 18- "+ erpOrderDetail.getShipViaID()+"\n
			// 19- "+ CommonUtility.validateString(erpOrderDetail.getErpOrderNumber())+"\n
			// 20-
			// 0"+CommonUtility.validateParseIntegerToString(erpOrderDetail.getOrderSuffix())+"\n
			// 21- "+
			// CommonUtility.validateParseDoubleToString(erpOrderDetail.getDeliveryCharge())+"\n
			// 22- "+ orderId);

			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, CommonUtility.validateString(erpOrderDetail.getOrderID()));
			pstmt.setString(2, erpOrderDetail.getStatusDescription());
			pstmt.setDouble(3, erpOrderDetail.getTax());
			pstmt.setDouble(4, erpOrderDetail.getSubtotal());
			pstmt.setString(5, CommonUtility.validateString(erpOrderDetail.getShipViaDescription()));
			pstmt.setDouble(6, erpOrderDetail.getTotal());
			pstmt.setString(7, erpOrderDetail.getOrderedBy());
			pstmt.setDouble(8, erpOrderDetail.getFederalExciseTax());
			pstmt.setDouble(9, erpOrderDetail.getFreight());
			pstmt.setDouble(10, erpOrderDetail.getHandling());
			pstmt.setDouble(11, erpOrderDetail.getPaymentAmount());
			pstmt.setDouble(12, erpOrderDetail.getrOEDiscount());
			pstmt.setDouble(13, erpOrderDetail.getCashDiscountAmount());
			pstmt.setDouble(14, erpOrderDetail.getCashDiscountPercentage());
			if (erpOrderDetail.getCashDiscountAmount() > 0) {
				pstmt.setDouble(15, erpOrderDetail.getCashDiscountAmount());
			} else {
				pstmt.setDouble(15, erpOrderDetail.getDiscount());
			}

			if (erpOrderDetail.getOrderStatus() != null
					&& erpOrderDetail.getOrderStatus().trim().equalsIgnoreCase("SO"))
				pstmt.setString(16, "Ord");
			else if (erpOrderDetail.getOrderStatus() != null
					&& erpOrderDetail.getOrderStatus().trim().equalsIgnoreCase("QU"))
				pstmt.setString(16, "Ent");
			else if (erpOrderDetail.getOrderStatus() != null
					&& !erpOrderDetail.getOrderStatus().trim().equalsIgnoreCase(""))
				pstmt.setString(16, erpOrderDetail.getOrderStatus());
			else
				pstmt.setString(16, "New");

			pstmt.setDouble(17, erpOrderDetail.getFreightIn());
			pstmt.setString(18, shipMethod);
			pstmt.setString(19, CommonUtility.validateString(erpOrderDetail.getErpOrderNumber()));
			pstmt.setString(20, "0" + CommonUtility.validateParseIntegerToString(erpOrderDetail.getOrderSuffix()));
			pstmt.setString(21, CommonUtility.validateParseDoubleToString(erpOrderDetail.getDeliveryCharge()));
			pstmt.setInt(22, orderId);
			int count = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBPreparedStatement(pstmt);
		}
	}

	public static void deleteFromCart(Connection conn, int userId) {
		PreparedStatement pstmt = null;
		try {
			String sql = "";
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("PARTIAL_CART_CHECKOUT"))
					.length() > 0
					&& CommonDBQuery.getSystemParamtersList().get("PARTIAL_CART_CHECKOUT").trim()
							.equalsIgnoreCase("Y")) {
				sql = PropertyAction.SqlContainer.get("partialDeleteFromCart");
			} else {
				sql = PropertyAction.SqlContainer.get("deleteFromCart");
			}
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, userId);
			int count = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		finally {
			ConnectionManager.closeDBPreparedStatement(pstmt);
		}
	}

	public static String getNextSalesOrderID(int orderId) {
		String strMS = "";
		try {
			long ms = (new Date().getTime()) % 1000000;
			strMS = String.format("%1$06d", ms);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return Integer.toString(orderId) + strMS;

	}

	public static int saveOrder(Connection conn, int userId, int orderId, UsersModel userBillAddress,
			UsersModel userShipAddress, String reqType, String taxExempt, String refKey, String paymentMethod,
			String creditCardNumber, String creditExp, String cardHolderName, String purchaseOrderNumber,
			String ipAddress, CreditCardModel creditCardValue, String customerReleaseNumber,
			LinkedHashMap<String, Object> orderDetails) {
		// int orderId = 0;
		PreparedStatement pstmt = null;
		try {
			String transactionId = "0";
			int siteId = 0;

			if (CommonDBQuery.getGlobalSiteId() > 0) {
				siteId = CommonDBQuery.getGlobalSiteId();
			}

			if (creditCardValue != null) {
				transactionId = CommonUtility.validateString(creditCardValue.getCreditCardTransactionID());
			} else {
				creditCardValue = new CreditCardModel();
			}

			if (purchaseOrderNumber == null) {
				purchaseOrderNumber = "";
			}

			System.out.println("userBillAddress.getAddress1() : " + userBillAddress.getAddress1());

			String sql = PropertyAction.SqlContainer.get("insertOrder");
			String updateDate = "''";

			if (creditExp != null && !creditExp.trim().equalsIgnoreCase("")) {
				String tempDate[] = creditExp.split("/");
				String date = "";

				if (tempDate.length > 0 && tempDate.length == 1) {
					if (CommonUtility.validateString(tempDate[0]).length() == 4) {
						String month = CommonUtility.validateString(tempDate[0]).substring(0, 2);
						String year = CommonUtility.validateString(tempDate[0]).substring(2, 4);
						date = year + "/" + month + "/01";
					}
				} else if (tempDate.length > 1 && tempDate.length == 2) {
					date = tempDate[1] + "/" + tempDate[0] + "/01";
				} else if (tempDate.length > 2) {
					date = tempDate[2] + "/" + tempDate[0] + "/" + tempDate[1];
				}
				updateDate = "TO_DATE('" + date + "','yyyy/mm/dd')";
			}
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CCEXP_SAVE_IN_DB"))
					.length() > 0
					&& CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CCEXP_SAVE_IN_DB"))
							.equalsIgnoreCase("Y")) {
				sql = sql.replace("REPLACECCEXP", "''");
			} else {
				sql = sql.replace("REPLACECCEXP", updateDate);
			}

			if (orderId <= 0) {
				orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
			}
			UsersModel salesRepIn = new UsersModel();
			UsersModel salesRepOut = new UsersModel();
			if (userBillAddress.getSession().getAttribute("salesRepIn") != null) {
				salesRepIn = (UsersModel) userBillAddress.getSession().getAttribute("salesRepIn");
				if (salesRepIn == null) {
					salesRepIn = new UsersModel();
				}
			}
			if (userBillAddress.getSession().getAttribute("salesRepOut") != null) {
				salesRepOut = (UsersModel) userBillAddress.getSession().getAttribute("salesRepOut");
				if (salesRepOut == null) {
					salesRepOut = new UsersModel();
				}
			}
			if (CommonUtility.validateString(userBillAddress.getCountry()).equalsIgnoreCase("USA")) {
				userBillAddress.setCountry("US");
			}
			if (CommonUtility.validateString(userShipAddress.getCountry()).equalsIgnoreCase("USA")) {
				userShipAddress.setCountry("US");
			}
			if (CommonUtility.validateString(creditCardNumber).length() > 0) {
				creditCardNumber = CommonUtility.validateString(creditCardNumber).replaceAll("XXXX-", "")
						.replaceAll("\\*", "").replaceAll("#", "").replaceAll("-", "");
			}

			String orderNumber = getNextSalesOrderID(orderId);
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, orderId);
			pstmt.setString(2, orderNumber);
			pstmt.setString(3, orderNumber);
			pstmt.setInt(4, userId);
			pstmt.setString(5, userShipAddress.getOrderNotes());
			pstmt.setString(6, userBillAddress.getAddress1());
			pstmt.setString(7, userBillAddress.getAddress2() == null ? "" : userBillAddress.getAddress2());
			pstmt.setString(8, userBillAddress.getCity());
			pstmt.setString(9, userBillAddress.getState());
			pstmt.setString(10, CommonUtility.validateString(userBillAddress.getZipCodeStringFormat()));
			pstmt.setString(11, userBillAddress.getCountry());
			pstmt.setString(12, userBillAddress.getPhoneNo());
			pstmt.setString(13, userShipAddress.getAddress1());
			pstmt.setString(14, userShipAddress.getAddress2() == null ? "" : userShipAddress.getAddress2());
			pstmt.setString(15, userShipAddress.getCity());
			pstmt.setString(16, userShipAddress.getState());
			pstmt.setString(17, CommonUtility.validateString(userShipAddress.getZipCodeStringFormat()));
			pstmt.setString(18, userShipAddress.getCountry());
			pstmt.setString(19, userShipAddress.getPhoneNo());
			pstmt.setString(20, "New");
			/**
			 * Below code written for Electrozad to save selected order status in Checkout
			 */
			if (CommonUtility.customServiceUtility() != null) {
				String orderStatus = CommonUtility.customServiceUtility().getOrderStatus(orderDetails);// Electrozad
																										// Custom
																										// Service
				if (orderStatus != null) {
					pstmt.setString(20, orderStatus);
				}
			}
			pstmt.setString(21, "");
			pstmt.setString(22, reqType);
			if (taxExempt != null && !taxExempt.trim().equalsIgnoreCase("")) {
				pstmt.setString(23, "Y");
			} else {
				pstmt.setString(23, "N");
			}
			pstmt.setString(24, taxExempt);
			pstmt.setString(25, refKey);
			pstmt.setString(26, paymentMethod);
			pstmt.setString(27, creditCardNumber != null ? creditCardNumber.replaceAll("x", "") : creditCardNumber);
			pstmt.setString(28, cardHolderName);
			pstmt.setString(29, purchaseOrderNumber);
			pstmt.setString(30, ipAddress);
			pstmt.setString(31, userShipAddress.getOrderNotes());
			pstmt.setString(32, userShipAddress.getShippingInstruction());
			pstmt.setString(33, transactionId);
			pstmt.setInt(34, siteId);
			pstmt.setString(35, userBillAddress.getEmailAddress());
			pstmt.setString(36, userShipAddress.getEmailAddress());
			pstmt.setString(37, userBillAddress.getCustomerName());
			pstmt.setString(38, userShipAddress.getFirstName());
			pstmt.setString(39, userShipAddress.getLastName());
			pstmt.setString(40, customerReleaseNumber);
			pstmt.setString(41, (String) orderDetails.get("homeBranchId"));
			pstmt.setString(42, (String) orderDetails.get("homeBranchName"));
			pstmt.setString(43, (String) orderDetails.get("shipBranchId"));
			pstmt.setString(44, (String) orderDetails.get("shipBranchName"));
			pstmt.setString(45, userBillAddress.getFirstName());
			pstmt.setString(46, userBillAddress.getLastName());
			pstmt.setString(47, userBillAddress.getShipToId());
			pstmt.setString(48, userShipAddress.getShipToId());
			pstmt.setString(49, userShipAddress.getShipToName());
			pstmt.setString(50, CommonUtility.validateString(salesRepIn.getId()));
			pstmt.setString(51, CommonUtility.validateString(salesRepIn.getEmailAddress()));
			pstmt.setString(52, CommonUtility.validateString(salesRepOut.getId()));
			pstmt.setString(53, CommonUtility.validateString(salesRepOut.getEmailAddress()));
			pstmt.setString(54, CommonUtility.validateString(creditCardValue.getCreditCardToken()));
			pstmt.setString(55, (String) orderDetails.get("wareHousecode"));
			pstmt.setString(56, (String) orderDetails.get("discountAmount"));
			pstmt.setString(57, (String) orderDetails.get("discountPercentage"));
			pstmt.setString(58, (String) orderDetails.get("discountCouponCode"));
			pstmt.setString(59, (String) orderDetails.get("discountType"));
			pstmt.setString(60, CommonUtility.validateString(creditCardValue.getPayPalToken()));
			pstmt.setString(61, CommonUtility.validateString(creditCardValue.getPayPalPayerId()));
			pstmt.setString(62, CommonUtility.validateString(userBillAddress.getCompanyName()));
			pstmt.setString(63, CommonUtility.validateString(userShipAddress.getCompanyName()));
			pstmt.setString(64, CommonUtility.validateString((String) orderDetails.get("gasPoNumber")));
			int count = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBPreparedStatement(pstmt);
		}
		return orderId;
	}

	public static int saveOrderItems(Connection conn, int orderId, int itemId, int qty, String partNo,
			String custPartNo, String shortDesc, double price, String invDesc, String uom, String packDesc,
			String lineItemComment, String itemlevelshipvia, String itemlevelshipdesc, String itemLevelRequiredByDate,
			String catalogId) {

		ResultSet rs = null;
		PreparedStatement pstmt = null;
		int count = 0;
		try {
			if (shortDesc == null) {
				shortDesc = " ";
			}
			if (invDesc == null) {
				invDesc = " ";
			}
			if (packDesc == null) {
				packDesc = " ";
			}
			int orderItemId = CommonDBQuery.getSequenceId("ORDER_ITEM_ID");
			// String sql = "INSERT INTO
			// ORDER_ITEMS(ORDER_ITEM_ID,ORDER_ID,ITEM_ID,PART_NUMBER,CUSTOMER_PART_NUMBER,SHORT_DESC,QTY,PRICE,USER_NOTE,INVOICE_DESC,UOM,PACK_DESC,ORDER_ITEM_STATUS,LINE_ITEM_COMMENT,UPDATED_DATETIME)
			// VALUES(ORDER_ITEM_ID.NEXTVAL,?,?,?,?,?,?,?,?,?,?,?,?,?,SYSDATE)";
			String sql = PropertyAction.SqlContainer.get("saveOrderItems");
			pstmt = conn.prepareStatement(sql);
			// ORDER_ID,ITEM_ID,PART_NUMBER,CUSTOMER_PART_NUMBER,SHORT_DESC,QTY,PRICE,USER_NOTE,ORDER_ITEM_STATUS
			// ORDER_ID,ITEM_ID,PART_NUMBER,CUSTOMER_PART_NUMBER,SHORT_DESC,QTY,PRICE,USER_NOTE,INVOICE_DESC,UOM,PACK_DESC,ORDER_ITEM_STATUS,UPDATED_DATETIME
			pstmt.setInt(1, orderItemId);
			pstmt.setInt(2, orderId);
			pstmt.setInt(3, itemId);
			pstmt.setString(4, partNo);
			pstmt.setString(5, custPartNo);
			pstmt.setString(6, shortDesc);
			pstmt.setInt(7, qty);
			pstmt.setDouble(8, price / qty);
			pstmt.setString(9, "");
			pstmt.setString(10, invDesc);
			pstmt.setString(11, uom);
			pstmt.setString(12, packDesc);
			pstmt.setString(13, "N");
			pstmt.setString(14, lineItemComment);
			pstmt.setString(15, itemlevelshipvia);
			pstmt.setString(16, itemlevelshipdesc);
			pstmt.setString(17, itemLevelRequiredByDate);
			pstmt.setString(18, catalogId);
			count = pstmt.executeUpdate();
			if (count > 0) {
				count = orderItemId;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
		}
		return count;
	}

	public static void updateOrderItemPrice(Connection conn, int orderId, ArrayList<ProductsModel> orderPriceList) {
		PreparedStatement pstmt = null;
		try {
			String status = "I";
			String sql = PropertyAction.SqlContainer.get("updateOrderItemPrice");
			for (ProductsModel orderPrice : orderPriceList) {
				double extendedPrice = 0.0;
				if (CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("CALCULATE_UOM_BASED_PRICE"))
						.equalsIgnoreCase("Y")) {
					extendedPrice = (orderPrice.getUomQty() / orderPrice.getUomQuantity()) * orderPrice.getQty()
							* orderPrice.getUnitPrice();
					if (orderPrice.getUomPrice() > 0.0) {
						extendedPrice = orderPrice.getUomPrice() * orderPrice.getQty();
					}
				} else {
					extendedPrice = orderPrice.getUnitPrice() * orderPrice.getQty();
				}
				System.out.println(
						"Availbility : " + orderPrice.getPartNumber() + " : " + orderPrice.getBranchTotalQty());
				if (orderPrice.getBranchTotalQty() > 0) {
					status = "Y";
				} else {
					status = "N";
				}
				// Commented Because of ETNA multiple UOM issue
				/*
				 * if(orderPrice.getTotal()>0){ extendedPrice = orderPrice.getTotal(); }else{
				 * extendedPrice = orderPrice.getUnitPrice()*orderPrice.getQty();
				 * //getExtendedPrice() }
				 */
				System.out.println("updateOrderItemPrice : extendedPrice : " + extendedPrice);
				pstmt = conn.prepareStatement(sql);
				if (CommonUtility.validateString(orderPrice.getDisplayPrice()).equalsIgnoreCase("N")) {
					pstmt.setDouble(1, orderPrice.getPrice());
				} else {
					pstmt.setDouble(1, orderPrice.getUnitPrice());
				}
				pstmt.setString(2, orderPrice.getUom());
				if (CommonUtility.validateNumber("" + orderPrice.getErpQty()) > 0) {
					pstmt.setInt(3, orderPrice.getErpQty());
				} else {
					pstmt.setInt(3, orderPrice.getQty());
				}
				pstmt.setString(4, orderPrice.getQtyUOM());
				pstmt.setDouble(5, extendedPrice); // orderPrice.getUnitPrice()*
				pstmt.setString(6, orderPrice.getHazardousMaterial());
				pstmt.setDouble(7, orderPrice.getUnitsPerStocking());
				pstmt.setString(8, orderPrice.getUnitsPerStockingString());
				pstmt.setString(9, "" + orderPrice.getLeadTime());
				if (orderPrice.getUnitPrice() == 0 && orderPrice.getListPrice() > 0) {
					pstmt.setString(10, "Y");
				} else {
					pstmt.setString(10, "N");
				}
				pstmt.setDouble(11, orderPrice.getListPrice());
				pstmt.setString(12, status);
				pstmt.setString(13, orderPrice.getPartNumber());
				pstmt.setInt(14, orderId);
				pstmt.setInt(15, orderPrice.getOrderItemId());
				pstmt.executeUpdate();
				ConnectionManager.closeDBPreparedStatement(pstmt);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBPreparedStatement(pstmt);
		}
	}

	public String orderConfirmation() {
		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		session.removeAttribute("cartCountSession");
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		String buyingCompanyId = (String) session.getAttribute("buyingCompanyId");
		String discountValue = (String) session.getAttribute("discountValue");
		String promotionCode = (String) session.getAttribute("promotionCode");
		String requestType = (String) session.getAttribute("requestType");
		String shipViaDisplay = "";
		String orderError = "";
		LinkedHashMap<Integer, ProductsModel> fullItemDetails = null;
		String errorMessageToDisplay = CommonUtility.validateString(
				LayoutLoader.getMessageProperties().get(session.getAttribute("localeCode").toString().toUpperCase())
						.getProperty("errormsgtodisplay.labels"));
		HashMap<String, Integer> userAddressId;
		if (requestType != null && requestType.trim().equalsIgnoreCase("mobile")) {
			userAddressId = UsersDAO
					.getDefaultAddressIdForBCAddressBook((String) session.getAttribute("mobileUserName"));
			sessionUserId = (String) session.getAttribute("mobileUserId");
		} else {
			userAddressId = UsersDAO
					.getDefaultAddressIdForBCAddressBook((String) session.getAttribute(Global.USERNAME_KEY));
		}
		UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
		String auUser = (String) session.getAttribute("auUserLogin");

		int userId = 1;
		if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
			userId = userDetail.getUserId();
		} else if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("GUSTE_CHECKOUT_USER_NAME"))
				.length() > 0 && auUser != null) {
			auEmail = CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("GUSTE_CHECKOUT_USER_NAME"));
			HashMap<String, String> userDetailsFromDB = UsersDAO.getUserPasswordAndUserId(auEmail, "Y");
			userId = CommonUtility.validateNumber(userDetailsFromDB.get("userId"));
			userDetail.setUserId(userId);
		} else {
			userId = CommonUtility.validateNumber(sessionUserId);
		}

		boolean flag = false;
		String sql = "";
		double salesOrderTotal = 0d;
		double salesOrderTotalV2 = 0d;
		List<Discount> appliedlDiscounts = new ArrayList<Discount>();
		double orderItemsDiscountVal = 0.0D;
		if (userId > 1) {
			try {
				ArrayList<Integer> itemList = new ArrayList<Integer>();
				int subsetId = 0;
				int generalSubset = 0;
				if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
					subsetId = userDetail.getSubsetId();
					String tempGeneralSubset = CommonDBQuery.getSystemParamtersList().get("GENERALCATALOGID");
					generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
				} else {
					String tempSubset = (String) session.getAttribute("userSubsetId");
					subsetId = CommonUtility.validateNumber(tempSubset);
					String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
					generalSubset = CommonUtility.validateNumber(tempGeneralSubset);

					if (type != null && type.equalsIgnoreCase("mobile")) {
						userAddressId = UsersDAO
								.getDefaultAddressIdForBCAddressBook((String) session.getAttribute("mobileUserName"));
						userId = CommonUtility.validateNumber((String) session.getAttribute("mobileUserId"));
					} else {
						userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(
								(String) session.getAttribute(Global.USERNAME_KEY));
					}

					defaultBillToId = userAddressId.get("Bill");
					String defaultShiptoId = (String) session.getAttribute("defaultShipToId");

					// HashMap<String, UsersModel> userAddress =
					// UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,CommonUtility.validateNumber(defaultShiptoId));
					UserManagement userObj = new UserManagementImpl();
					HashMap<String, UsersModel> userAddress = userObj.getUserAddressFromBCAddressBook(defaultBillToId,
							CommonUtility.validateNumber(defaultShiptoId));

					UsersModel userBillAddress = userAddress.get("Bill");
					UsersModel userShipAddress = userAddress.get("Ship");

					if (userBillAddress.getCustomerName() != null) {
						billEntityName = userBillAddress.getCustomerName();
					} else {
						billEntityName = userBillAddress.getFirstName() + " " + userBillAddress.getLastName();
					}

					if (userShipAddress.getCustomerName() != null) {
						shipEntityName = userShipAddress.getCustomerName();
					} else {
						shipEntityName = userShipAddress.getFirstName() + " " + userShipAddress.getLastName();
					}

				}
				if (CommonUtility.validateString(promotionCode) != ""
						&& CommonUtility.validateString(promotionCode).length() > 0) {
					int counter = SalesDAO.updateCouponUse(buyingCompanyId, promotionCode, discountValue);
					if (counter > 0) {
						System.out.println("COUPONS UPDATED WITH ORDER DISCOUNT");
						session.removeAttribute("discountType");
						session.removeAttribute("discountValue");
						session.removeAttribute("discountValueToERP");
					}
				}
				ArrayList<SalesModel> salesOrderItem = new ArrayList<SalesModel>();

				String cartSortByValue = "";
				String cartSortColumn = "";
				if (session.getAttribute("cartSortByValue") != null) {
					cartSortByValue = CommonUtility.validateString(session.getAttribute("cartSortByValue").toString());
					String[] sortCoumnArray = cartSortByValue.split(" ");
					if (sortCoumnArray != null && sortCoumnArray.length > 0) {
						cartSortColumn = CommonUtility.validateString(sortCoumnArray[0]);
					}
				}

				conn = ConnectionManager.getDBConnection();
				sql = PropertyAction.SqlContainer.get("getOrderDetail");

				SimpleDateFormat fromDB = new SimpleDateFormat("yyyy-MM-dd");
				SimpleDateFormat myFormat = new SimpleDateFormat("MM/dd/yyyy");
				pstmt = conn.prepareStatement(sql);
				pstmt.setInt(1, salesOrderId);
				pstmt.setInt(2, userId);
				rs = pstmt.executeQuery();
				// ORDER_ID,ORDER_NUMBER, EXTERNAL_SYSTEM_ID, BILL_ADDRESS1, BILL_ADDRESS2,
				// BILL_CITY, BILL_COUNTRY_CODE, BILL_PHONE, BILL_STATE, BILL_ZIP_CODE,
				// SHIP_ADDRESS1, SHIP_ADDRESS1, SHIP_ADDRESS2, SHIP_CITY, SHIP_COUNTRY_CODE,
				// SHIP_PHONE, SHIP_STATE, SHIP_ZIP_CODE
				while (rs.next()) {
					SalesModel salesOrderDetail = new SalesModel();
					salesOrderDetail.setOrderNum(rs.getString("ORDER_NUMBER"));
					salesOrderDetail.setErpOrderNumber(rs.getString("EXTERNAL_SYSTEM_ID"));
					salesOrderDetail.setBillAddress1(rs.getString("BILL_ADDRESS1"));
					salesOrderDetail.setBillAddress2(rs.getString("BILL_ADDRESS2"));
					salesOrderDetail.setBillCity(rs.getString("BILL_CITY"));
					salesOrderDetail.setBillCountry(rs.getString("BILL_COUNTRY_CODE"));
					salesOrderDetail.setBillPhone(rs.getString("BILL_PHONE"));
					salesOrderDetail.setBillState(rs.getString("BILL_STATE"));
					salesOrderDetail.setBillZipCode(rs.getString("BILL_ZIP_CODE"));
					salesOrderDetail.setShipFirstName(rs.getString("SHIP_FIRST_NAME"));
					salesOrderDetail.setShipLastName(rs.getString("SHIP_LAST_NAME"));
					salesOrderDetail.setShipAddress1(rs.getString("SHIP_ADDRESS1"));
					salesOrderDetail.setShipAddress2(rs.getString("SHIP_ADDRESS2"));
					salesOrderDetail.setShipCity(rs.getString("SHIP_CITY"));
					salesOrderDetail.setShipCountry(rs.getString("SHIP_COUNTRY_CODE"));
					salesOrderDetail.setShipPhone(rs.getString("SHIP_PHONE"));
					salesOrderDetail.setShipState(rs.getString("SHIP_STATE"));
					salesOrderDetail.setShipZipCode(rs.getString("SHIP_ZIP_CODE"));
					salesOrderDetail.setTax(rs.getDouble("TAX_AMOUNT"));
					salesOrderDetail.setTotinvamt(rs.getDouble("TOTAL_AMOUNT"));
					salesOrderDetail.setSubtotal(rs.getDouble("SUBTOTAL_AMOUNT"));
					salesOrderDetail.setFreight(rs.getDouble("FREIGHT"));
					salesOrderDetail.setHandling(rs.getDouble("HANDLING_FEE"));
					salesOrderDetail.setDeliveryCharge(rs.getDouble("DELIVERY_FEE"));
					if (rs.getDouble("CASHDISCOUNT_AMOUNT") > 0) {
						salesOrderDetail.setDiscount(rs.getDouble("CASHDISCOUNT_AMOUNT"));
					} else {
						salesOrderDetail.setDiscount(rs.getDouble("DISCOUNT_AMOUNT"));
					}
					salesOrderDetail.setrOEDiscount(rs.getDouble("ROE_DISCOUNT"));
					salesOrderDetail.setTotal(rs.getDouble("TOTAL_AMOUNT"));
					AddressModel addressModel = new AddressModel();
					addressModel.setAddress1(rs.getString("BILL_ADDRESS1"));
					addressModel.setAddress2(rs.getString("BILL_ADDRESS2"));
					addressModel.setCity(rs.getString("BILL_CITY"));
					addressModel.setCountry(rs.getString("BILL_COUNTRY_CODE"));
					addressModel.setPhoneNo(rs.getString("BILL_PHONE"));
					addressModel.setState(rs.getString("BILL_STATE"));
					addressModel.setZipCode(rs.getString("BILL_ZIP_CODE"));
					addressModel.setFirstName(rs.getString("BILL_FIRST_NAME"));
					addressModel.setLastName(rs.getString("BILL_LAST_NAME"));
					addressModel.setEmailAddress(rs.getString("BILL_EMAIL_ADDRESS"));
					addressModel.setCompanyName(rs.getString("CUSTOMER_NAME"));
					addressModel.setShipToId(rs.getString("BILL_SHIP_TO_ID"));
					salesOrderDetail.setBillAddress(addressModel);

					addressModel = new AddressModel();
					addressModel.setAddress1(rs.getString("SHIP_ADDRESS1"));
					addressModel.setAddress2(rs.getString("SHIP_ADDRESS2"));
					addressModel.setCity(rs.getString("SHIP_CITY"));
					addressModel.setCountry(rs.getString("SHIP_COUNTRY_CODE"));
					addressModel.setPhoneNo(rs.getString("SHIP_PHONE"));
					addressModel.setState(rs.getString("SHIP_STATE"));
					addressModel.setZipCode(rs.getString("SHIP_ZIP_CODE"));
					addressModel.setFirstName(rs.getString("SHIP_FIRST_NAME"));
					addressModel.setLastName(rs.getString("SHIP_LAST_NAME"));
					addressModel.setEmailAddress(rs.getString("SHIP_EMAIL_ADDRESS"));
					addressModel.setShipToId(rs.getString("SHIPPING_SHIP_TO_ID"));
					if (rs.findColumn("SHIP_COMPANY_NAME") > 0) {
						addressModel.setCompanyName(rs.getString("SHIP_COMPANY_NAME"));
					}
					salesOrderDetail.setShipAddress(addressModel);
					salesOrderDetail.setGasPoNumber(rs.getString("GAS_PO_NUMBER"));
					salesOrderDetail.setOrderStatusDesc(rs.getString("EXTERNAL_SYSTEM_ERROR"));
					if (CommonUtility.validateString(rs.getString("EXTERNAL_SYSTEM_ERROR")).length() > 0
							&& CommonUtility.validateString(rs.getString("EXTERNAL_SYSTEM_ERROR"))
									.equalsIgnoreCase(errorMessageToDisplay)) {
						orderError = errorMessageToDisplay;
					}
					salesOrderDetail.setPoNumber(rs.getString("PURCHASE_ORDER_NUMBER"));
					String orderDate = "";
					if (CommonUtility.validateString(rs.getString("ORDER_DATE")).length() > 0) {
						orderDate = myFormat
								.format(fromDB.parse(CommonUtility.validateString(rs.getString("ORDER_DATE"))));
					}
					salesOrderDetail.setOrderDate(orderDate);
					salesOrderDetail.setOrderedBy(rs.getString("ORDERED_BY"));
					salesOrderDetail.setCustomerName(rs.getString("CUSTOMER_NAME"));
					salesOrderDetail.setCustomerReleaseNumber(rs.getString("CUSTOMER_RELEASE_NUMBER"));
					salesOrderDetail.setHomeBranchName(rs.getString("PRICING_BRANCH_NAME"));
					String shipDate = "";
					if (CommonUtility.validateString(rs.getString("SHIP_DATE")).length() > 0) {
						shipDate = myFormat
								.format(fromDB.parse(CommonUtility.validateString(rs.getString("SHIP_DATE"))));
					}
					salesOrderDetail.setShipDate(shipDate);
					salesOrderDetail.setShipViaMethod(rs.getString("SHIP_METHOD"));
					salesOrderDetail.setShipViaID(rs.getString("SHIP_METHOD_ID"));
					LinkedHashMap<String, String> shipViaMap = new LinkedHashMap<String, String>();
					if (session != null && session.getAttribute("shipViaMap") != null) {
						shipViaMap = (LinkedHashMap<String, String>) session.getAttribute("shipViaMap");
						if (CommonUtility
								.validateString(shipViaMap
										.get(CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase()))
								.length() > 0) {
							salesOrderDetail
									.setShipViaMethod(shipViaMap.get(rs.getString("SHIP_METHOD").trim().toUpperCase()));
							shipViaDisplay = salesOrderDetail.getShipViaMethod();
						}

						String shipMethod = shipViaMap
								.get(CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase());
						if (CommonUtility.validateString(shipMethod).length() > 0) {
							salesOrderDetail.setShipViaMethod(shipViaMap
									.get(CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase()));
							shipViaDisplay = salesOrderDetail.getShipViaMethod();
						} else {
							if (CommonUtility
									.validateString(shipViaMap.get(
											CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase()))
									.length() > 0) {
								salesOrderDetail.setShipViaMethod(shipViaMap.get(
										CommonUtility.validateString(rs.getString("SHIP_METHOD_ID")).toUpperCase()));
								shipViaDisplay = salesOrderDetail.getShipViaMethod();
							} else {
								shipViaDisplay = salesOrderDetail.getShipViaMethod();
							}
						}
					} else {
						if (session != null && session.getAttribute("customerShipViaList") != null) {
							ArrayList<ShipVia> customerShipViaListArray = (ArrayList<ShipVia>) session
									.getAttribute("customerShipViaList");
							if (customerShipViaListArray != null && customerShipViaListArray.size() > 0) {
								for (ShipVia shipVia : customerShipViaListArray) {
									shipViaMap.put(shipVia.getShipViaID().trim().toUpperCase(),
											shipVia.getDescription());
								}
							}
							String shipMethod = shipViaMap
									.get(CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase());
							if (CommonUtility.validateString(shipMethod).length() > 0) {
								salesOrderDetail.setShipViaMethod(shipViaMap
										.get(CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase()));
								shipViaDisplay = salesOrderDetail.getShipViaMethod();
							} else {
								salesOrderDetail.setShipViaMethod(shipViaMap.get(
										CommonUtility.validateString(rs.getString("SHIP_METHOD_ID")).toUpperCase()));
								shipViaDisplay = salesOrderDetail.getShipViaMethod();
							}
						}

					}

					if (CommonDBQuery.getSystemParamtersList().get("CUSTOMER_SHIP_VIA_FROM_ERP") != null
							&& CommonDBQuery.getSystemParamtersList().get("CUSTOMER_SHIP_VIA_FROM_ERP").trim()
									.equalsIgnoreCase("Y")) {
						salesOrderDetail.setShipViaMethod((String) session.getAttribute("selectedShipVia"));

					} /*
						 * else{ salesOrderDetail.setShipViaMethod(rs.getString("SHIP_METHOD")); }
						 */

					String reqDate = "";
					if (rs.getString("REQUIRED_BY_DATE") != null
							&& rs.getString("REQUIRED_BY_DATE").trim().length() > 0) {
						reqDate = myFormat.format(fromDB.parse(rs.getString("REQUIRED_BY_DATE")));
					}

					salesOrderDetail.setReqDate(reqDate);
					salesOrderDetail.setShippingInstruction(rs.getString("SHIPPING_INSTRUCTIONS"));
					salesOrderDetail.setOrderNotes(rs.getString("ORDER_NOTES"));
					salesOrderDetail.setPaymentMethod(rs.getString("PAYMENT_METHOD"));
					salesOrderDetail.setTransactionId(rs.getString("TRANSACTION_ID"));
					salesOrderDetail.setBillEmailAddress(rs.getString("BILL_EMAIL_ADDRESS"));
					salesOrderDetail.setShipEmailAddress(rs.getString("SHIP_EMAIL_ADDRESS"));
					salesOrderDetail.setFreightIn(rs.getDouble("FRIEGHT_IN"));
					salesOrderDetail.setShipToName(rs.getString("SHIPPING_SHIP_TO_NAME"));
					// Discount properties
					if (rs.getString("DISCOUNT_COUPON_CODE") != null
							&& rs.getString("DISCOUNT_COUPON_CODE").trim().length() > 0) {

						salesOrderDetail.setDiscount(rs.getDouble("DISCOUNT_AMOUNT"));
						salesOrderDetail.setDiscountCouponCode(rs.getString("DISCOUNT_COUPON_CODE"));
						salesOrderDetail.setDiscountType(DiscountType.valueOf(rs.getString("DISCOUNT_TYPE")));
						LinkedHashMap<String, Object> orderDetails = new LinkedHashMap<String, Object>();
						orderDetails.put(SalesActionContantVariables.ORDER_ID, salesOrderId);
						orderDetails.put(SalesActionContantVariables.USER_ID, userId);
						orderDetails.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
								SalesActionContantVariables.COUPONS_CRUD_READ_VALUE);
						orderDetails = SalesDAO.CouponDataCrud(orderDetails);
						ArrayList<SalesModel> couponDetails = new ArrayList<SalesModel>();
						couponDetails = (ArrayList<SalesModel>) orderDetails.get("couponDetails");
						if (couponDetails != null && couponDetails.size() > 0) {
							for (SalesModel eachCoupon : couponDetails) {
								Coupon coupon = new Coupon();
								coupon.setCopounCode(eachCoupon.getDiscountCouponCode());
								Discount orderDiscount = new Discount();
								orderDiscount.setDiscountCoupon(coupon);
								orderDiscount.setDiscountValue(eachCoupon.getDiscount());
								orderDiscount.setDiscountType(eachCoupon.getDiscountType());
								appliedlDiscounts.add(orderDiscount);
							}
						}

					}
					salesOrderDetail.setOrderSuffix(rs.getInt("ORDER_SUFFIX"));
					salesOrderDetail.setShippingBranchId(rs.getString("SHIPPING_BRANCH_ID"));
					if (CommonUtility.validateParseIntegerToString(rs.getInt("CC_NUMBER")).length() > 0) {
						salesOrderDetail.setCreditCardNumber(
								CommonUtility.validateParseIntegerToString(rs.getInt("CC_NUMBER")));
					}
					salesOrderDetail.setOrderStatus(rs.getString("ORDER_STATUS"));
					orderDetail = salesOrderDetail;
					flag = true;
				}
				// ITEM_ID,PART_NUMBER,SHORT_DESC,QTY,PRICE,UOM, EXTPRICE
				if (flag) {
					rs.close();
					pstmt.close();
					String idListForSolr = "";
					sql = PropertyAction.SqlContainer.get("getOrderItemDetail");
					if (CommonUtility.validateString(cartSortColumn).length() > 0
							&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
						sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
					}
					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("getOrderItemDetailCustom"))
							.length() > 0) {
						pstmt = conn.prepareStatement(PropertyAction.SqlContainer.get(CommonUtility.validateString(
								CommonDBQuery.getSystemParamtersList().get("getOrderItemDetailCustom"))));
						pstmt.setInt(1, CommonDBQuery.getGlobalSiteId());
						pstmt.setInt(2, salesOrderId);
					} else {
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, salesOrderId);
					}

					rs = pstmt.executeQuery();

					while (rs.next()) {
						SalesModel salesOrderDetail = new SalesModel();
						salesOrderDetail.setItemId(rs.getInt("ITEM_ID"));
						itemList.add(rs.getInt("ITEM_ID"));
						salesOrderDetail.setPartNumber(rs.getString("PART_NUMBER"));
						salesOrderDetail.setShortDesc(rs.getString("SHORT_DESC"));
						salesOrderDetail.setOrderQty(rs.getInt("QTY"));
						salesOrderDetail.setUnitPrice(rs.getDouble("PRICE"));
						salesOrderDetail.setListPrice(rs.getDouble("LIST_PRICE"));
						salesOrderDetail.setOrderUom(rs.getString("UOM"));
						salesOrderDetail.setUom(rs.getString("PER_UOM"));
						salesOrderDetail.setSalesUom(rs.getString("SALES_UOM"));
						salesOrderDetail.setPerQty(rs.getInt("PER_QTY"));
						salesOrderDetail.setTotal(rs.getDouble("EXTPRICE"));
						salesOrderDetail.setExtPrice(rs.getDouble("EXT_PRICE"));
						salesOrderDetail.setStatusDescription(rs.getString("CALL_FOR_PRICE"));
						salesOrderDetail.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
						salesOrderDetail.setManufacturerPartNumber(rs.getString("MANUFACTURER_PART_NUMBER"));
						salesOrderDetail.setManufacturer(rs.getString("MANUFACTURER"));
						salesOrderDetail.setImageType(rs.getString("IMAGE_TYPE"));
						salesOrderDetail.setImageName((rs.getString("IMAGE_NAME") == null) ? "NoImage.png"
								: rs.getString("IMAGE_NAME").toString().trim());
						// salesOrderTotal = salesOrderTotal + rs.getDouble("EXTPRICE");
						salesOrderTotalV2 = salesOrderTotalV2 + rs.getDouble("EXT_PRICE");
						salesOrderDetail.setMultipleShipVia(rs.getString("ITEM_LEVEL_SHIPVIA"));
						salesOrderDetail.setMultipleShipViaDesc(rs.getString("ITEM_LEVEL_SHIPVIA_DESC"));
						salesOrderDetail.setItemLevelRequiredByDate(rs.getString("ITEMLEVEL_REQUIREDBYDATE"));
						salesOrderDetail.setCatalogId(rs.getString("CATALOG_ID"));
						salesOrderDetail.setAltPartNumber1(rs.getString("ALT_PART_NUMBER1"));

						if (rs.findColumn("HAZARDIOUS_MATERIAL") > 0) {
							salesOrderDetail.setHazardiousMaterial(rs.getString("HAZARDIOUS_MATERIAL"));
						}
						if (rs.findColumn("UNITS_PER_STOCKING") > 0) {
							salesOrderDetail.setUnitsPerStocking(rs.getDouble("UNITS_PER_STOCKING"));
						}
						if (rs.findColumn("UNITS_PER_STOCKING_STRING") > 0) {
							salesOrderDetail.setUnitsPerStockingString(rs.getString("UNITS_PER_STOCKING_STRING"));
						}
						// Discount properties

						if (CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("getOrderItemDetailCustom"))
								.length() > 0) {

							salesOrderDetail.setCategoryName(rs.getString("CATEGORY_NAME"));
							if (CommonUtility.validateString(rs.getString("DISCOUNT_COUPON_CODE")).length() > 0) {
								salesOrderDetail.setDiscount(rs.getDouble("DISCOUNT_AMOUNT"));
								salesOrderDetail.setDiscountCouponCode(rs.getString("DISCOUNT_COUPON_CODE"));
								salesOrderDetail.setDiscountType(DiscountType.valueOf(rs.getString("DISCOUNT_TYPE")));

								Discount ItemDiscount = new Discount();
								Coupon coupon = new Coupon();
								coupon.setCopounCode(salesOrderDetail.getDiscountCouponCode());
								ItemDiscount.setDiscountCoupon(coupon);
								ItemDiscount.setDiscountValue(salesOrderDetail.getDiscount());
								ItemDiscount.setDiscountType(salesOrderDetail.getDiscountType());
								appliedlDiscounts.add(ItemDiscount);

								orderItemsDiscountVal += salesOrderDetail.getDiscount();

							}
						}

						salesOrderDetail.setNetAmount(salesOrderDetail.getExtPrice() - salesOrderDetail.getDiscount());
						if (rs.getDouble("PRICE") > 0) {
							salesOrderTotal = salesOrderTotal + rs.getDouble("EXTPRICE");
						} else {
							salesOrderTotal = salesOrderTotal + rs.getDouble("LIST_PRICE") * rs.getInt("QTY");
							salesOrderDetail.setStatusDescription("Y");
						}

						if (CommonUtility
								.validateString(
										CommonDBQuery.getSystemParamtersList().get("DISABLE_NON_CATALOG_ITEM_IN_ORDER"))
								.equalsIgnoreCase("Y")) {
							if (!CommonUtility.validateString(
									CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))
									.equalsIgnoreCase(
											CommonUtility.validateParseIntegerToString(rs.getInt("ITEM_ID")))) {
								salesOrderItem.add(salesOrderDetail);
							}
						} else {
							salesOrderItem.add(salesOrderDetail);
						}

						// salesOrderItem.add(salesOrderDetail);
					}
					if (salesOrderItem != null && salesOrderItem.size() > 0) {
						ArrayList<ProductsModel> itemDetailsForGoogleAnalytics = ProductHunterSolr
								.getItemDetailsForGivenPartNumbers(subsetId, generalSubset,
										StringUtils.join(itemList, " OR "), 0, "N", "itemid");
						String c = "";
						for (SalesModel sModel : salesOrderItem) {
							idListForSolr = idListForSolr + c + sModel.getItemId();
							c = " OR ";
							for (ProductsModel eachItem : itemDetailsForGoogleAnalytics) {
								if (sModel.getItemId() == eachItem.getItemId()) {
									sModel.setCategoryName(eachItem.getCategoryName());
								}
							}
						}
						fullItemDetails = new LinkedHashMap<Integer, ProductsModel>();
						for (ProductsModel eachItem : itemDetailsForGoogleAnalytics) {
							fullItemDetails.put(eachItem.getItemId(), eachItem);
						}
						if (CommonUtility.validateString(idListForSolr).length() > 0) {
							LinkedHashMap<Integer, ArrayList<ProductsModel>> customerPartNumber = ProductHunterSolr
									.getcustomerPartnumber(idListForSolr, CommonUtility.validateNumber(buyingCompanyId),
											CommonUtility.validateNumber(buyingCompanyId));
							if (customerPartNumber != null && customerPartNumber.size() > 0) {
								for (SalesModel item : salesOrderItem) {
									item.setCustomerPartNumberList(customerPartNumber.get(item.getItemId()));
								}
							}
						}
					}

					orderTotal = salesOrderTotal;
					orderTotalV2 = salesOrderTotalV2;
					orderDetail.setSubtotal(orderTotal - orderItemsDiscountVal);
					orderDetail.setSubtotalV2(orderTotalV2);

					// orderDetail.setTotal(orderTotal+orderDetail.getFreight()+orderDetail.getTax()+orderDetail.getDiscount()+orderDetail.getHandling());
					orderDetail.setTotal(orderTotal + orderDetail.getFreight() + orderDetail.getTax()
							- (orderDetail.getDiscount() + orderItemsDiscountVal) + orderDetail.getHandling());
					orderDetail.setTotalV2(orderTotalV2 + orderDetail.getFreight() + orderDetail.getTax()
							- (orderDetail.getDiscount() + orderItemsDiscountVal) + orderDetail.getHandling());
					orderItemList = salesOrderItem;
					orderTotal = orderTotal + orderDetail.getFreight() + orderDetail.getTax()
							+ orderDetail.getHandling();
					orderDetail.setOrderItemsDiscount(orderItemsDiscountVal);
					orderDetail.setTotalSavingsOnOrder(orderItemsDiscountVal + orderDetail.getDiscount());

				}

				LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
				if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
						.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
					customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(subsetId, generalSubset,
							StringUtils.join(itemList, " OR "), "itemid");
				}

				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				ArrayList<ProductsModel> customerAlsoBought = new ArrayList<ProductsModel>();
				if (CommonUtility.customServiceUtility() != null) {
					customerAlsoBought = (ArrayList<ProductsModel>) CommonUtility.customServiceUtility()
							.getCustomerAlsoBoughtCustom(userId, subsetId, generalSubset, salesOrderItem);
					if (customerAlsoBought != null) {
						contentObject.put("customerAlsoBought", customerAlsoBought);
					}
				}
				if (CommonUtility.customServiceUtility() != null) {
					CommonUtility.customServiceUtility().setOversizeAndHazmatFreightRule(customFieldVal, contentObject);// Electrozad
																														// Custom
																														// Service
				}
				contentObject.put("orderTotal", orderTotal);
				contentObject.put("orderItemList", orderItemList);
				contentObject.put("orderDetail", orderDetail);
				contentObject.put("pickUpLocation",
						CommonUtility.getWareHouseByCode(
								CommonUtility.validateString(orderDetail.getShippingBranchId()) != null
										? orderDetail.getShippingBranchId()
										: ""));
				// contentObject.put("handling", orderDetail.getHandling());
				contentObject.put("billEntityName", billEntityName);
				contentObject.put("shipEntityName", shipEntityName);
				contentObject.put("discountValue", discountValue);
				contentObject.put("shipViaDisplay", shipViaDisplay);
				contentObject.put("customFieldVal", customFieldVal);
				contentObject.put("orderId", salesOrderId);
				contentObject.put("userId", userId);
				contentObject.put("fullItemDetails", fullItemDetails);
				contentObject.put("appliedDiscountCoupons", appliedlDiscounts);
				contentObject.put("orderError", orderError);
				// CustomServiceProvider
				if (CommonUtility.customServiceUtility() != null) {
					ProductsModel warehousedetails = CommonUtility.customServiceUtility()
							.getwareHouseDetailsforordeoptions((String) session.getAttribute("targetbranch"));
					if (warehousedetails != null) {
						contentObject.put("selectedwarehousedeatils", warehousedetails);
					}
				} // CustomServiceProvider

				renderContent = LayoutGenerator.templateLoader("OrderConfirmation", contentObject, null, null, null);
				if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y") && !CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ENABLE_BRONTO_ORDER_MODULE"))
						.equalsIgnoreCase("Y")) {
					session.removeAttribute("auUserDetails");
					session.removeAttribute("auUserLogin");
					session.removeAttribute("fromPage");
				}
				session.removeAttribute("fromApproveCart");
				session.removeAttribute("cartSortByValue");
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				ConnectionManager.closeDBResultSet(rs);
				ConnectionManager.closeDBPreparedStatement(pstmt);
				ConnectionManager.closeDBConnection(conn);
			}

			if (type == null) {
				type = "";
			}
			if (type.equalsIgnoreCase("")) {
				return SUCCESS;
			} else {
				return "orderSubApp";
			}
		} else {
			return "SESSIONEXPIRED";
		}
	}

	public String OpenOrder() {
		Format formatter = new SimpleDateFormat("MM/dd/yyyy");
		Date date = new Date();
		boolean flag = true;
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			SalesOrderManagement salesObj = new SalesOrderManagementImpl();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			int pageNumber = CommonUtility.validateNumber(request.getParameter("pageNumber"));
			if (userId > 1) {

				String reqType = request.getParameter("reqType");
				String orderStatusType = request.getParameter("orderStatus");
				String guestFlag = request.getParameter("guestFlag");
				String userRole = "";
				orderList = new ArrayList<SalesModel>();
				SalesModel salesInputParameter = new SalesModel();
				if (CommonUtility.customServiceUtility() != null) {
					userRole = CommonUtility.customServiceUtility().getRetailUserOrdersFromCIMM(
							CommonUtility.validateString((String) session.getAttribute("isRetailUser")));
					salesInputParameter.setUserNote(userRole);
				}
				salesInputParameter.setGuestFlag(guestFlag);
				salesInputParameter.setUserId(userId);
				salesInputParameter.setReqType(reqType);
				salesInputParameter.setOrderStatusType(orderStatusType);
				salesInputParameter.setStatus(orderStatusType);
				if (searchString != null && !searchString.trim().equalsIgnoreCase("")) {
					String tmpArr[] = searchString.split("\\.");
					searchString = tmpArr[0];
					startDate = "01/01/1990";
					endDate = formatter.format(date);
				}
				if ((startDate == null || startDate.trim().equalsIgnoreCase("")) && !CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("OPENORDERINFO_BYDATES"))
						.equalsIgnoreCase("Y")) {
					Calendar c = Calendar.getInstance();
					c.setTime(date);
					c.add(Calendar.MONTH, -6);
					// c.add(Calendar.YEAR, -1); // Disable it if not required
					startDate = formatter.format(c.getTime());
				}
				if (CommonUtility.validateString(startDate).length() > 0) {
					if (endDate == null)
						endDate = "";
					if (endDate.trim().equalsIgnoreCase(""))
						endDate = formatter.format(date);
					try {
						DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
						Date d1 = df.parse(startDate);
						Date d2 = df.parse(endDate);
						if (d1.after(d2)) {
							result = "Start Date must be greater than end date";
							flag = false;
						}
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				salesInputParameter.setStartDate(startDate);
				salesInputParameter.setEndDate(endDate);
				salesInputParameter.setSearchString(searchString);
				salesInputParameter.setUserToken((String) session.getAttribute("userToken"));
				salesInputParameter
						.setEntityId(CommonUtility.validateString((String) session.getAttribute("entityId")));
				salesInputParameter.setCustomerNumber(
						session.getAttribute("customerId") != null ? (String) session.getAttribute("customerId") : "0");
				salesInputParameter.setCustomerCountry(session.getAttribute("customerCountry") != null
						? (String) session.getAttribute("customerCountry")
						: "");
				salesInputParameter.setSession(session);
				salesInputParameter.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
				salesInputParameter.setWarehouseLocation((String) session.getAttribute("wareHouseCode"));
				salesInputParameter.setBillToEntityId((String) session.getAttribute("billingEntityId"));
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("OPENORDERINFO_BYDATES"))
						.equalsIgnoreCase("Y")) {
					if (CommonUtility.validateString(startDate).length() < 1
							|| CommonUtility.validateString(endDate).length() < 1) {
						startDate = "01/01/1990";
						endDate = formatter.format(date);

						Calendar c = Calendar.getInstance();
						c.setTime(date);
						c.add(Calendar.MONTH, -6);
						startDate = formatter.format(c.getTime());

						if (startDate != null && !startDate.trim().equalsIgnoreCase("")) {
							if (endDate == null)
								endDate = "";
							if (endDate.trim().equalsIgnoreCase(""))
								endDate = formatter.format(date);
							try {
								DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
								Date d1 = df.parse(startDate);
								Date d2 = df.parse(endDate);
								if (d1.after(d2)) {
									result = "Start Date must be greater than end date";
									flag = false;
								}
							} catch (ParseException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}

					}
					salesInputParameter.setStartDate(startDate);
					salesInputParameter.setEndDate(endDate);
					salesInputParameter.setPageNumber(pageNumber);
					orderList = salesObj.OpenOrdersInfoByDates(salesInputParameter);
				} else {
					if (CommonUtility.customServiceUtility() != null) {
						CommonUtility.customServiceUtility().setOpenOrderSalesInputParams(salesInputParameter, request);
					}
					orderList = salesObj.OpenOrders(salesInputParameter);
				}
				if (CommonUtility.validateString(searchBy).equalsIgnoreCase("orderNumber")) {
					LinkedHashMap<String, ArrayList<SalesModel>> orderDetails = new LinkedHashMap<String, ArrayList<SalesModel>>();
					salesInputParameter.setUserToken((String) session.getAttribute("userToken"));
					salesInputParameter.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
					salesInputParameter.setSession(session);
					salesInputParameter.setOrderID(orderNumber);
					salesInputParameter.setOrderStatus(orderStatus);
					salesInputParameter.setWareHouseCode((String) session.getAttribute("wareHouseCode"));
					orderDetails = salesObj.OrderDetail(salesInputParameter);
					if (orderDetails != null) {
						orderList = orderDetails.get("OrderDetail");
					} else {
						result = "No Orders Found.";
					}
				}
				if (searchBy != null && searchBy.equalsIgnoreCase("printInvoices")) {
					orderHistoryDetailList = new ArrayList<SalesModel>();
					// orderList = salesObj.OpenOrders(salesInputParameter);
					ArrayList<SalesModel> invoiceOrders = new ArrayList<SalesModel>();
					for (String orders : selectedInvoicesForPrint.split("/")) {
						String val[] = selectedInvoicesForPrint.split("&");
						SalesModel invoiceModel = new SalesModel();
						invoiceModel.setOrderID(CommonUtility.validateString(val[0]));
						invoiceModel.setGeneId(CommonUtility.validateString(val[1]));
						invoiceOrders.add(invoiceModel);
					}
					for (SalesModel salesOrder : invoiceOrders) {
						// SalesModel orderDetailPrint =SalesOrderInquiry.orderDetailByID((String)
						// session.getAttribute("eclipseSessionId"),(String)
						// session.getAttribute(Global.USERNAME_KEY),
						// salesOrder.getOrderID(),salesOrder.getGeneId());
						LinkedHashMap<String, ArrayList<SalesModel>> orderDetail = new LinkedHashMap<String, ArrayList<SalesModel>>();
						salesOrder.setUserToken((String) session.getAttribute("userToken"));
						salesOrder.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
						salesOrder.setSession(session);
						orderDetail = salesObj.OrderDetail(salesOrder);
						ArrayList<SalesModel> orderDetailPrintList = orderDetail.get("OrderDetail");
						SalesModel orderDetailPrint = orderDetailPrintList.get(0);
						orderDetailPrint.setOrderItem(orderDetail.get("OrderItemList"));
						if (orderDetailPrint != null) {
							orderHistoryDetailList.add(orderDetailPrint);
						}

					}
				}

				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				contentObject.put("reqType", reqType);
				contentObject.put("orderStatusType", orderStatusType);
				contentObject.put("orderList", orderList);
				contentObject.put("startDate", startDate);
				contentObject.put("endDate", endDate);
				if (CommonUtility.validateString(reqType).equalsIgnoreCase("BID")) {
					renderContent = LayoutGenerator.templateLoader("OpenBidsPage", contentObject, null, null, null);
				} else if (searchBy != null && searchBy.equalsIgnoreCase("printInvoices")) {
					contentObject.put("orderHistoryDetailList", orderHistoryDetailList);
					renderContent = LayoutGenerator.templateLoader("PrintInvoicesPage", contentObject, null, null,
							null);
					target = "printInvoices";
				} else if (CommonUtility.validateString(orderStatusType).equalsIgnoreCase("quotes")) {
					renderContent = LayoutGenerator.templateLoader("OpenQuotesPage", contentObject, null, null, null);
				} else {
					renderContent = LayoutGenerator.templateLoader("OpenOrdersPage", contentObject, null, null, null);
				}

				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	/*
	 * public String OrderHistory(){ LinkedHashMap<String, Object> contentObject =
	 * new LinkedHashMap<String, Object>(); SalesOrderManagement salesObj = new
	 * SalesOrderManagementImpl(); Date date = new Date(); Format formatter=new
	 * SimpleDateFormat("MM/dd/yyyy"); System.out.println(new Date()); DateFormat df
	 * = new SimpleDateFormat("MM/dd/yyyy");
	 * 
	 * request =ServletActionContext.getRequest(); startDate = (String)
	 * request.getParameter("startDate"); endDate = (String)
	 * request.getParameter("endDate"); type = (String)
	 * request.getParameter("type");
	 * 
	 * if(type!=null && type.trim().equalsIgnoreCase("orderNum")){ startDate =
	 * "01/01/1990"; endDate = formatter.format(date); }
	 * 
	 * if(endDate==null || endDate.trim().equalsIgnoreCase("")){ endDate =
	 * formatter.format(date); }
	 * 
	 * if(startDate==null || startDate.trim().equalsIgnoreCase("")){ Calendar c =
	 * Calendar.getInstance(); c.setTime(date); c.add(Calendar.MONTH, -1); startDate
	 * = formatter.format(c.getTime()); }
	 * 
	 * 
	 * SalesModel salesInputParameter = new SalesModel(); try{
	 * 
	 * HttpSession session = request.getSession(); String sessionUserId = (String)
	 * session.getAttribute(Global.USERID_KEY); int userId =
	 * CommonUtility.validateNumber(sessionUserId); String entityId = (String)
	 * session.getAttribute("entityId");
	 * 
	 * if(userId>1){
	 * 
	 * String userToken = (String) session.getAttribute("userToken");
	 * 
	 * boolean flag = true; Integer orderNo = null; if(orderNumber!=null &&
	 * !orderNumber.trim().equalsIgnoreCase("")){ orderNumber =
	 * orderNumber.replaceAll("[^\\d]", ""); orderNo =
	 * CommonUtility.validateNumber(orderNumber);
	 * salesInputParameter.setSearchString(Integer.toString(orderNo));
	 * 
	 * } if(customerPoNumber!=null &&
	 * !customerPoNumber.trim().equalsIgnoreCase("")){ customerPoNumber =
	 * customerPoNumber.trim(); salesInputParameter.setPoNumber(customerPoNumber);
	 * salesInputParameter.setSearchString(customerPoNumber); }
	 * 
	 * orderList = new ArrayList<SalesModel>(); if(startDate!=null &&
	 * !startDate.trim().equalsIgnoreCase("")){ if(endDate==null) endDate="";
	 * if(endDate.trim().equalsIgnoreCase("")) endDate = formatter.format(date);
	 * 
	 * try { Date d1 = df.parse(startDate); Date d2 = df.parse(endDate);
	 * if(d1.after(d2)) { result = "Start Date must be greater than end date"; flag
	 * =false; } } catch (ParseException e) {
	 * 
	 * e.printStackTrace(); }
	 * 
	 * if(flag){ salesInputParameter.setUserId(userId);
	 * salesInputParameter.setOrderNum(orderNumber);
	 * salesInputParameter.setPoNumber(customerPoNumber);
	 * salesInputParameter.setStartDate(startDate);
	 * salesInputParameter.setEndDate(endDate);
	 * salesInputParameter.setUserToken(userToken);
	 * salesInputParameter.setEntityId(CommonUtility.validateNumber(entityId));
	 * salesInputParameter.setCustomerNumber(session.getAttribute("customerId")!=
	 * null?(String) session.getAttribute("customerId"):"0");
	 * salesInputParameter.setCustomerCountry(session.getAttribute("customerCountry"
	 * )!=null?(String) session.getAttribute("customerCountry"):"");
	 * salesInputParameter.setBillToEntityId((String)
	 * session.getAttribute("billingEntityId"));
	 * salesInputParameter.setSession(session); orderList =
	 * salesObj.OrderHistory(salesInputParameter); } }else{ if(valueSubmited!=null
	 * && valueSubmited.trim().equalsIgnoreCase("1")){ if(orderNumber!=null &&
	 * !orderNumber.trim().equalsIgnoreCase("")){} else if(customerPoNumber!=null &&
	 * !customerPoNumber.trim().equalsIgnoreCase("")){} else { result =
	 * "Please select a date range or enter some value to search."; } } }
	 * contentObject.put("orderNumber", orderNumber); contentObject.put("startDate",
	 * startDate); contentObject.put("endDate", endDate);
	 * contentObject.put("customerPoNumber", customerPoNumber);
	 * contentObject.put("orderList", orderList); contentObject.put("result",
	 * result); contentObject.put("type", type);
	 * 
	 * renderContent = LayoutGenerator.templateLoader("OrderHistoryPage",
	 * contentObject , null, null, null); target = SUCCESS;
	 * 
	 * }else{ target = "SESSIONEXPIRED"; } }catch (Exception e) {
	 * e.printStackTrace(); } return target; }
	 */

	public String OrderHistory() {
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		SalesOrderManagement salesObj = new SalesOrderManagementImpl();

		String orderStatus = null;
		Date date = new Date();
		Format formatter = new SimpleDateFormat("MM/dd/yyyy");
		System.out.println(new Date());
		DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
		try {
			request = ServletActionContext.getRequest();
			String erpOverrideFlag = request.getParameter("erpOverrideFlag");
			startDate = (String) request.getParameter("startDate");
			endDate = (String) request.getParameter("endDate");
			type = (String) request.getParameter("type");
			String userRole = "";
			boolean invoices = false;
			if ((startDate == null || (CommonUtility.validateString(startDate).length() < 1))
					&& ((CommonUtility.validateString(orderNumber).length() > 0)
							|| (CommonUtility.validateString(customerPoNumber).length() > 0)
							|| CommonUtility.validateString(partNumberToERP).length() > 0)) {
				type = "orderNum";
			}

			if (type != null && type.trim().equalsIgnoreCase("orderNum")) {
				startDate = "01/01/1990";
				endDate = formatter.format(date);
			}

			if (endDate == null || endDate.trim().equalsIgnoreCase("")) {
				endDate = formatter.format(date);
			} else if (startDate == null || startDate.trim().equalsIgnoreCase("")) {
				startDate = "01/01/1990";
			}

			if (startDate == null || startDate.trim().equalsIgnoreCase("")) {
				Calendar c = Calendar.getInstance();
				c.setTime(date);
				int minusMonth = CommonUtility.validateNumber(
						CommonDBQuery.getSystemParamtersList().get("ORDER_HISTORY_DEFAULT_DURATION")) > 0
								? CommonUtility.validateNumber(
										CommonDBQuery.getSystemParamtersList().get("ORDER_HISTORY_DEFAULT_DURATION"))
								: 1;
				minusMonth = minusMonth * -1;
				c.add(Calendar.MONTH, minusMonth);
				startDate = formatter.format(c.getTime());
			}

			SalesModel salesInputParameter = new SalesModel();

			HttpSession session = request.getSession();

			if (CommonUtility
					.validateString(LayoutLoader.getMessageProperties()
							.get(session.getAttribute("localeCode").toString().toUpperCase())
							.getProperty("website.url.Status")) != null
					&& CommonUtility.validateString(LayoutLoader.getMessageProperties()
							.get(session.getAttribute("localeCode").toString().toUpperCase())
							.getProperty("website.url.Status")).length() > 0) {
				orderStatus = CommonUtility.validateString(LayoutLoader.getMessageProperties()
						.get(session.getAttribute("localeCode").toString().toUpperCase())
						.getProperty("website.url.Status"));
			}

			if (CommonUtility.customServiceUtility() != null) {
				userRole = CommonUtility.customServiceUtility().getRetailUserOrdersFromCIMM(
						CommonUtility.validateString((String) session.getAttribute("isRetailUser")));
				salesInputParameter.setUserNote(userRole);
			}
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String entityId = (String) session.getAttribute("entityId");
			;
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			ArrayList<ProductsModel> salesOrderListByItems = null;
			entityIDType = (entityIDType == null) ? "Ship" : entityIDType;
			if (userId > 1) {
				String userToken = (String) session.getAttribute("userToken");
				boolean flag = true;
				displayAccountOrderInformation = "Y";
				if (orderNumber != null && !orderNumber.trim().equalsIgnoreCase("")) {
					salesInputParameter.setSearchString(orderNumber);
					// orderNumber = orderNumber.replaceAll("[^\\d]", "");
				} else if (CommonUtility.validateString(customerPoNumber).length() > 0) {
					customerPoNumber = customerPoNumber.trim();
					salesInputParameter.setPoNumber(customerPoNumber);
					salesInputParameter.setSearchString(customerPoNumber);
				} else if (CommonUtility.validateString(partNumberToERP).length() > 0) {
					partNumberToERP = partNumberToERP.trim();
					salesInputParameter.setPartNumber(partNumberToERP);
					salesInputParameter.setSearchString(partNumberToERP);
				} else if (CommonUtility.validateString(searchBy).equalsIgnoreCase("byItem")) {
					/*
					 * startDate = "01/01/1990"; endDate = formatter.format(date);
					 */
					salesInputParameter.setSearchString(searchString);
					startDate = "";
					endDate = "";
					searchString = "";
					String userName = (String) session.getAttribute(Global.USERNAME_KEY);
					salesInputParameter.setUserName(userName);
					salesInputParameter.setUserToken(userToken);
					salesInputParameter.setEntityId(CommonUtility.validateString(entityId));
					salesOrderDetailsByItems = salesObj.reorderPadInquiry(salesInputParameter);
					String partNumber = "";
					String delimit = "";
					if (salesOrderDetailsByItems != null && salesOrderDetailsByItems.size() > 0) {
						for (SalesModel salesOrderDetailsByItem : salesOrderDetailsByItems) {
							partNumber = partNumber + delimit + salesOrderDetailsByItem.getPartNumber();
							delimit = " OR ";
						}
					}
					salesOrderListByItems = ProductHunterSolr.getItemDetailsForGivenPartNumbers(subsetId, generalSubset,
							partNumber, 0, null, "partnumber");// buildPartNumberForInterActiveAdvoisor
					if (salesOrderDetailsByItems != null && salesOrderDetailsByItems.size() > 0
							&& salesOrderListByItems != null && salesOrderListByItems.size() > 0) {
						for (SalesModel salesOrderDetailsByItem : salesOrderDetailsByItems) {
							for (ProductsModel salesOrderListByItem : salesOrderListByItems) {
								if (salesOrderDetailsByItem.getPartNumber().trim()
										.equalsIgnoreCase(salesOrderListByItem.getPartNumber().trim())) {
									salesOrderDetailsByItem.setManufacturerPartNumber(
											salesOrderListByItem.getManufacturerPartNumber());
									salesOrderDetailsByItem.setItemId(salesOrderListByItem.getItemId());
									salesOrderDetailsByItem.setItemPriceId(salesOrderListByItem.getItemPriceId());
									break;
								}
							}
						}
					}

					System.out.println(salesOrderDetailsByItems.size());
					displayAccountOrderInformation = "N";
					flag = false;
				} else if (searchBy != null && searchBy.equalsIgnoreCase("yearToDate")) {
					Calendar now = Calendar.getInstance(); // Gets the current date and time.
					startDate = "01/01/" + now.get(Calendar.YEAR);
					endDate = formatter.format(date);
					salesInputParameter.setStartDate(startDate);
					salesInputParameter.setEndDate(endDate);

				}
				orderList = new ArrayList<SalesModel>();
				if (startDate != null && !startDate.trim().equalsIgnoreCase("")) {
					if (endDate == null) {
						endDate = "";
					}
					if (endDate.trim().equalsIgnoreCase("")) {
						endDate = formatter.format(date);
					}
					try {
						Date d1 = df.parse(startDate);
						Date d2 = df.parse(endDate);
						if (d1.after(d2)) {
							result = "Start Date must be greater than end date";
							flag = false;
						}
					} catch (ParseException e) {
						e.printStackTrace();
					}

					if (flag) {
						salesInputParameter.setUserId(userId);
						salesInputParameter.setOrderNum(orderNumber);
						salesInputParameter.setPoNumber(customerPoNumber);
						salesInputParameter.setStartDate(startDate);
						salesInputParameter.setPartNumber(partNumberToERP);
						salesInputParameter.setEndDate(endDate);
						salesInputParameter.setUserToken(userToken);
						salesInputParameter.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
						salesInputParameter.setEntityId(CommonUtility.validateString(entityId));
						salesInputParameter.setCustomerNumber(
								session.getAttribute("customerId") != null ? (String) session.getAttribute("customerId")
										: "0");
						salesInputParameter.setCustomerCountry(session.getAttribute("customerCountry") != null
								? (String) session.getAttribute("customerCountry")
								: "");
						salesInputParameter.setBillToEntityId((String) session.getAttribute("billingEntityId"));
						salesInputParameter.setSession(session);
						salesInputParameter.setReqType(entityIDType);
						salesInputParameter.setStatus(type);
						salesInputParameter.setErpOverrideFlag(erpOverrideFlag);
						salesInputParameter.setWareHouseCode((String) session.getAttribute("wareHouseCode"));
						if (searchBy != null && searchBy.equalsIgnoreCase("printInvoices")) {
							orderHistoryDetailList = new ArrayList<SalesModel>();
							orderList = salesObj.OrderHistory(salesInputParameter);
							ArrayList<SalesModel> invoiceOrders = new ArrayList<SalesModel>();
							String val[] = null;
							if (selectedInvoicesForPrint.contains("/")) {
								for (String orders : selectedInvoicesForPrint.split("/")) {
									if (!orders.isEmpty()) {
										val = orders.split("&");
										SalesModel invoiceModel = new SalesModel();
										invoiceModel.setOrderID(CommonUtility.validateString(val[0]));
										invoiceModel.setInvoiceNumber(CommonUtility.validateString(val[1]));
										if (orderStatus != null) {
											invoiceModel.setOrderStatus(orderStatus);
										} else {
											invoiceModel.setOrderStatus("History");
										}
										invoiceOrders.add(invoiceModel);
										invoices = true;
									}
								}
							} else {
								for (String orders : selectedInvoicesForPrint.split("/")) {
									val = selectedInvoicesForPrint.split("&");
									SalesModel invoiceModel = new SalesModel();
									invoiceModel.setOrderID(CommonUtility.validateString(val[0]));
									invoiceModel.setInvoiceNumber(CommonUtility.validateString(val[1]));
									if (orderStatus != null) {
										invoiceModel.setOrderStatus(orderStatus);
									} else {
										invoiceModel.setOrderStatus("History");
									}
									invoiceOrders.add(invoiceModel);
									invoices = true;
								}
							}
							for (SalesModel salesOrder : invoiceOrders) {
								if (invoices) {
									// SalesModel orderDetailPrint =SalesOrderInquiry.orderDetailByID((String)
									// session.getAttribute("eclipseSessionId"),(String)
									// session.getAttribute(Global.USERNAME_KEY),
									// salesOrder.getOrderID(),salesOrder.getGeneId());
									LinkedHashMap<String, ArrayList<SalesModel>> orderDetail = new LinkedHashMap<String, ArrayList<SalesModel>>();
									salesOrder.setUserToken((String) session.getAttribute("userToken"));
									salesOrder.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
									salesOrder.setCustomerNumber(session.getAttribute("customerId") != null
											? (String) session.getAttribute("customerId")
											: "0");
									salesOrder.setSession(session);
									salesOrder.setErpOverrideFlag(erpOverrideFlag);
									orderDetail = salesObj.OrderDetail(salesOrder);
									orderItemList = orderDetail.get("OrderItemList");
									ArrayList<SalesModel> orderDetailPrintList = orderDetail.get("OrderDetail");
									if (orderDetailPrintList != null && !orderDetailPrintList.isEmpty()) {
										SalesModel orderDetailPrint = orderDetailPrintList.get(0);
										orderDetailPrint.setOrderItem(orderDetail.get("OrderItemList"));
										if (orderDetailPrint != null) {
											orderHistoryDetailList.add(orderDetailPrint);
										}
									}
								}

								if (orderItemList != null && orderItemList.size() > 0) {
									ArrayList<ProductsModel> itemList = new ArrayList<ProductsModel>();
									ArrayList<Integer> partIdentifierQuantity = new ArrayList<Integer>();
									String homeTeritory = (String) session.getAttribute("shipBranchId");

									String buildPartNumberString = "";
									String delimit = "";

									for (SalesModel smodel : orderItemList) {
										ProductsModel pmodel = new ProductsModel();
										if (CommonUtility.validateString(smodel.getProductcode()).length() > 0) {
											pmodel.setPartNumber(smodel.getProductcode());
										} else {
											pmodel.setPartNumber(smodel.getPartNumber());
										}
										pmodel.setQty((int) smodel.getQuantityOrdered());
										partIdentifierQuantity.add((int) smodel.getQuantityOrdered());
										/*
										 * pmodel = SalesDAO.getItemPriceIdOnPartNumber(pmodel,subsetId,generalSubset);
										 * smodel.setItemPriceId(pmodel.getItemPriceId());
										 */
										itemList.add(pmodel);

										buildPartNumberString = buildPartNumberString + delimit + "\""
												+ CommonUtility.validateString(smodel.getPartNumber()) + "\"";
										delimit = " OR ";
									}

									ArrayList<ProductsModel> itemDetalsFromSOLR = null;
									if (CommonUtility.validateString(buildPartNumberString).length() > 0) {
										itemDetalsFromSOLR = ProductHunterSolr.getItemDetailsForGivenPartNumbers(
												subsetId, generalSubset,
												CommonUtility.validateString(buildPartNumberString), 0, null,
												"partnumber");
									}

									if (orderItemList != null && itemDetalsFromSOLR.size() > 0) {
										for (ProductsModel itmListSolr : itemDetalsFromSOLR) {
											for (SalesModel smodel : orderItemList) {
												if (CommonUtility.validateString(smodel.getPartNumber())
														.equalsIgnoreCase(CommonUtility
																.validateString(itmListSolr.getPartNumber()))) {
													smodel.setImageName(itmListSolr.getImageName());
													smodel.setImageType(itmListSolr.getImageType());
													smodel.setItemPriceId(itmListSolr.getItemPriceId());
													smodel.setBrandName(itmListSolr.getBrandName());
													smodel.setManufacturerPartNumber(
															itmListSolr.getManufacturerPartNumber());
													smodel.setShortDesc(itmListSolr.getShortDesc());
													smodel.setAltPartNumber1(itmListSolr.getAltPartNumber1());
												}
											}
										}
									}

									/*
									 * ProductManagement priceInquiry = new ProductManagementImpl();
									 * ProductManagementModel priceInquiryInput = new ProductManagementModel();
									 * priceInquiryInput.setEntityId(CommonUtility.validateString(entityId));
									 * priceInquiryInput.setHomeTerritory(homeTeritory);
									 * priceInquiryInput.setPartIdentifier(itemList);
									 * priceInquiryInput.setPartIdentifierQuantity(partIdentifierQuantity);
									 * priceInquiryInput.setRequiredAvailabilty("Y");
									 * priceInquiryInput.setUserName((String)session.getAttribute(Global.
									 * USERNAME_KEY));
									 * priceInquiryInput.setUserToken((String)session.getAttribute("userToken"));
									 * priceInquiryInput.setSession(session); ArrayList<ProductsModel>
									 * itemListPriceData = priceInquiry.priceInquiry(priceInquiryInput , itemList);
									 * 
									 * if(itemListPriceData!=null && itemListPriceData.size()>0){ for(ProductsModel
									 * itmListModel : itemListPriceData){ for(SalesModel smodel : orderItemList){
									 * if(CommonUtility.validateString(smodel.getProductcode()).equalsIgnoreCase(
									 * CommonUtility.validateString(itmListModel.getPartNumber()))){
									 * smodel.setUnitsPerStocking(itmListModel.getUnitsPerStocking());
									 * smodel.setUnitsPerStockingString(itmListModel.getUnitsPerStockingString()); }
									 * } } }
									 */

								}
								/*
								 * else{ LinkedHashMap<String, ArrayList<SalesModel>> orderDetail = new
								 * LinkedHashMap<String, ArrayList<SalesModel>>();
								 * salesOrder.setUserToken((String)session.getAttribute("userToken"));
								 * salesOrder.setUserName((String)session.getAttribute(Global.USERNAME_KEY));
								 * salesOrder.setCustomerNumber(session.getAttribute("customerId")!=null?(
								 * String) session.getAttribute("customerId"):"0");
								 * salesOrder.setSession(session); orderDetail =
								 * salesObj.OrderDetail(salesOrder); ArrayList<SalesModel> orderDetailPrintList
								 * = orderDetail.get("OrderDetail"); if(orderDetailPrintList!=null &&
								 * !orderDetailPrintList.isEmpty()) { SalesModel orderDetailPrint =
								 * orderDetailPrintList.get(0);
								 * orderDetailPrint.setOrderItem(orderDetail.get("OrderItemList"));
								 * if(orderDetailPrint != null){ orderHistoryDetailList.add(orderDetailPrint); }
								 * } }
								 */
							}
						} else if (searchBy != null && searchBy.equalsIgnoreCase("partNumber")) {
							orderList = salesObj.OrderHistory(salesInputParameter);
						} else if (searchBy != null && searchBy.equalsIgnoreCase("orderNumber")) {
							LinkedHashMap<String, ArrayList<SalesModel>> orderDetail = new LinkedHashMap<String, ArrayList<SalesModel>>();
							salesInputParameter.setUserToken((String) session.getAttribute("userToken"));
							salesInputParameter.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
							salesInputParameter.setSession(session);
							salesInputParameter.setOrderID(orderNumber);
							salesInputParameter.setOrderStatus(orderStatus);
							salesInputParameter.setWareHouseCode((String) session.getAttribute("wareHouseCode"));
							String guestFlag = request.getParameter("guestFlag");
							if (CommonUtility.validateString(guestFlag).length() > 0) {
								salesInputParameter.setGuestFlag(guestFlag);
							}
							orderDetail = salesObj.OrderDetail(salesInputParameter);
							if (orderDetail != null) {
								orderList = orderDetail.get("OrderDetail");
							} else {
								result = "No History Found.";
							}
						} else {
							if (CommonUtility.customServiceUtility() != null) {
								CommonUtility.customServiceUtility()
										.setOrderHistorySalesInputParams(salesInputParameter, request);
							}
							orderList = salesObj.OrderHistory(salesInputParameter);
						}
					}
				} else {
					if (valueSubmited != null && valueSubmited.trim().equalsIgnoreCase("1")) {
						if (orderNumber != null && !orderNumber.trim().equalsIgnoreCase("")) {
						} else if (customerPoNumber != null && !customerPoNumber.trim().equalsIgnoreCase("")) {
						} else {
							result = "Please select a date range or enter some value to search.";
						}
					}
				}

				if (CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ACCOUNT_DETAILS_IN_ORDERHISTORY"))
						.equalsIgnoreCase("Y")
						&& CommonUtility.validateString(displayAccountOrderInformation).equalsIgnoreCase("Y")) {
					UsersModel userAccountDetail = new UsersModel();
					UserManagement userObj = new UserManagementImpl();
					String tempdefaultShipId = (String) session.getAttribute("defaultShipToId");
					String tempdefaultBillToId = (String) session.getAttribute("defaultBillToId");
					if (tempdefaultBillToId != null && tempdefaultBillToId.trim().length() > 0) {
						defaultBillToId = (CommonUtility.validateNumber(tempdefaultBillToId));
					}
					if (tempdefaultShipId != null && tempdefaultShipId.trim().length() > 0) {
						defaultShipToId = CommonUtility.validateNumber(tempdefaultShipId);
					}
					if (defaultBillToId == 0 || defaultShipToId == 0) {
						HashMap<String, Integer> userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(
								(String) session.getAttribute(Global.USERNAME_KEY));
						defaultBillToId = userAddressId.get("Bill");
						defaultShipToId = userAddressId.get("Ship");
					}
					HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
							defaultShipToId);
					LinkedHashMap<String, String> accountInquiryInput = new LinkedHashMap<String, String>();
					accountInquiryInput.put("entityId", entityId);
					accountInquiryInput.put("userToken", (String) session.getAttribute("userToken"));
					accountInquiryInput.put("userName", (String) session.getAttribute(Global.USERNAME_KEY));
					userAccountDetail = userObj.getAccountDetail(accountInquiryInput);
					userAccountDetail
							.setFirstName(CommonUtility.validateString((String) session.getAttribute("userFirstName")));
					userAccountDetail
							.setLastName(CommonUtility.validateString((String) session.getAttribute("userLastName")));
					if (entityIDType.equalsIgnoreCase("ship")) {
						userAccountDetail.setCustomerName(userAddress.get("Ship").getCustomerName());
						userAccountDetail.setPhoneNo(userAddress.get("Ship").getPhoneNo());
						userAccountDetail.setFirstName(userAddress.get("Ship").getFirstName());
						userAccountDetail.setLastName(userAddress.get("Ship").getLastName());
						userAccountDetail.setAddress1(userAddress.get("Ship").getAddress1());
						entityIDType = "Ship";
						entityId = (String) session.getAttribute("entityId");
					} else if (entityIDType.equalsIgnoreCase("bill")) {
						userAccountDetail.setCustomerName(userAddress.get("Bill").getCustomerName());
						userAccountDetail.setPhoneNo(userAddress.get("Bill").getPhoneNo());
						userAccountDetail.setFirstName(userAddress.get("Bill").getFirstName());
						userAccountDetail.setLastName(userAddress.get("Bill").getLastName());
						userAccountDetail.setAddress1(userAddress.get("Bill").getAddress1());
						entityIDType = "Bill";
						entityId = String.valueOf(userAddress.get("Bill").getEntityId());
					}
					contentObject.put("userDetail", userAccountDetail);
					contentObject.put("entityIDType", entityIDType);
					contentObject.put("ARShipPassword", session.getAttribute("ARShipPassword"));
					contentObject.put("ARBillPassword", session.getAttribute("ARBillPassword"));
				}
				contentObject.put("orderNumber", orderNumber);
				contentObject.put("startDate", startDate);
				contentObject.put("endDate", endDate);
				contentObject.put("customerPoNumber", customerPoNumber);
				contentObject.put("orderList", orderList);
				contentObject.put("result", result);
				contentObject.put("type", type);
				contentObject.put("searchBy", searchBy);
				contentObject.put("salesOrderListByItems", salesOrderListByItems);
				contentObject.put("displayAccountOrderInformation", displayAccountOrderInformation);
				contentObject.put("salesOrderDetailsByItems", salesOrderDetailsByItems);
				if (searchBy != null && searchBy.equalsIgnoreCase("printInvoices")) {
					contentObject.put("orderHistoryDetailList", orderHistoryDetailList);
					contentObject.put("orderItemList", orderItemList);
					renderContent = LayoutGenerator.templateLoader("PrintInvoicesPage", contentObject, null, null,
							null);
					target = "printInvoices";
				} else if (searchBy != null && searchBy.equalsIgnoreCase("partNumber")) {
					String jsonResponse = "";
					Gson gson = new Gson();
					if (orderList.isEmpty()) {
						jsonResponse = "No Result Found";
					} else {
						jsonResponse = gson.toJson(orderList);
					}
					renderContent = jsonResponse;
					target = SUCCESS;
				} else {
					renderContent = LayoutGenerator.templateLoader("OrderHistoryPage", contentObject, null, null, null);
					target = SUCCESS;
				}
			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String OutStandingPaymentList() {
		request = ServletActionContext.getRequest();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		try {
			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			if (userId > 1) {
				if (searchString != null && !searchString.trim().equalsIgnoreCase("")) {

					String tmpArr[] = searchString.split(" ");
					startDate = tmpArr[1];
					if (startDate.contains("Older")) {
						startDate = "01/01/1990";
						endDate = tmpArr[6].substring(0, 8);
					} else {
						endDate = tmpArr[3].substring(0, 8);
					}

				} else if (startDate == null || endDate == null || startDate.equalsIgnoreCase("")
						|| endDate.equalsIgnoreCase("")) {
					Date date = new Date();
					Format formatter = new SimpleDateFormat("MM/dd/yyyy");
					startDate = "01/01/1990";
					endDate = formatter.format(date);
				}

				String entityId = (String) session.getAttribute("entityId");
				;
				String userToken = (String) session.getAttribute("userToken");

				SalesModel salesInputParameter = new SalesModel();
				salesInputParameter.setUserId(userId);
				// salesInputParameter.setOrderNum(orderNumber);
				// salesInputParameter.setPoNumber(customerPoNumber);
				salesInputParameter.setStartDate(startDate);
				// salesInputParameter.setPartNumber(partNumberToERP);
				salesInputParameter.setEndDate(endDate);
				salesInputParameter.setUserToken(userToken);
				salesInputParameter.setTranstype("SO,DO,CS,CR,BR,RM");
				salesInputParameter.setEntityId(CommonUtility.validateString(entityId));
				salesInputParameter.setCustomerNumber(
						session.getAttribute("customerId") != null ? (String) session.getAttribute("customerId") : "0");
				salesInputParameter.setCustomerCountry(session.getAttribute("customerCountry") != null
						? (String) session.getAttribute("customerCountry")
						: "");
				salesInputParameter.setBillToEntityId((String) session.getAttribute("billingEntityId"));
				salesInputParameter
						.setSortDirection(CommonUtility.validateString(request.getParameter("sortDirection")));
				salesInputParameter.setSession(session);
				SalesOrderManagement salesObj = new SalesOrderManagementImpl();
				orderList = salesObj.invoicedOrdersFromOrderHistory(salesInputParameter);
				contentObject.put("customerArInvoiceList", orderList);

				renderContent = LayoutGenerator.templateLoader("InvoiceListPage", contentObject, null, null, null);
				target = SUCCESS;
			} else {
				target = "SESSIONEXPIRED";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String OutStandingPayment() {

		request = ServletActionContext.getRequest();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		try {
			Date date = new Date();
			Format formatter = new SimpleDateFormat("MM/dd/yyyy");
			startDate = "01/01/1990";
			endDate = formatter.format(date);
			HttpSession session = request.getSession();
			session.removeAttribute("OutStandingOrderPaymentList");
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String entityId = (String) session.getAttribute("entityId");
			;
			String userToken = (String) session.getAttribute("userToken");
			double totalInvoiceAmount = 0.0;
			String inviceString = CommonUtility.validateString(request.getParameter("selectedInvoiceNumber"));
			String[] selectedInvoiceForPayment = inviceString.split(",");// request.getParameterValues("selectedInvoiceNumber");
			if (selectedInvoiceForPayment != null && selectedInvoiceForPayment.length > 0) {
				orderList = new ArrayList<SalesModel>();
				for (String orderNumber : selectedInvoiceForPayment) {

					if (CommonUtility.validateNumber(orderNumber) > 0) {
						SalesModel salesInputParameter = new SalesModel();
						salesInputParameter.setUserId(userId);
						salesInputParameter.setOrderNum(CommonUtility.validateString(orderNumber));
						salesInputParameter.setStartDate(startDate);
						salesInputParameter.setEndDate(endDate);
						salesInputParameter.setUserToken(userToken);
						// salesInputParameter.setTranstype("SO,DO,CS,CR,BR,RM");
						salesInputParameter.setEntityId(CommonUtility.validateString(entityId));
						salesInputParameter.setCustomerNumber(
								session.getAttribute("customerId") != null ? (String) session.getAttribute("customerId")
										: "0");
						// salesInputParameter.setCustomerCountry(session.getAttribute("customerCountry")!=null?(String)
						// session.getAttribute("customerCountry"):"");
						salesInputParameter.setBillToEntityId((String) session.getAttribute("billingEntityId"));
						salesInputParameter.setSession(session);
						SalesOrderManagement salesObj = new SalesOrderManagementImpl();
						ArrayList<SalesModel> orderDetails = salesObj
								.invoicedOrderDetailFromOrderHistory(salesInputParameter);
						if (orderDetails != null && !orderDetails.isEmpty()) {
							for (SalesModel orderdetailModel : orderDetails) {
								totalInvoiceAmount = totalInvoiceAmount + orderdetailModel.getTotal();
								orderdetailModel.setCustomerNumber(
										CommonUtility.validateString((String) session.getAttribute("customerId")));
								orderList.add(orderdetailModel);

							}
						}
					}
				}
			}
			if (orderList != null && !orderList.isEmpty()) {
				session.setAttribute("OutStandingOrderPaymentList", orderList);
			}
			contentObject.put("customerArInvoiceList", orderList);
			contentObject.put("totalInvoiceAmount", totalInvoiceAmount);
			renderContent = LayoutGenerator.templateLoader("InvoiceDetailPage", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String outStandingPaymentConfirmation() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String arTransactionID = CommonUtility.validateString(request.getParameter("arTransactionID"));
		String paymentGateway = "";
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		SimpleDateFormat formatCurrentDate = new SimpleDateFormat("MM/dd/yyyy");
		Date date = new Date();
		String currentDate = formatCurrentDate.format(date);
		try {

			int sequenceId = CommonDBQuery.getSequenceId("INOVICE_SEQ");
			if (creditCardPayment != null && creditCardPayment.trim().equalsIgnoreCase("Y") && ccTransactionId != null
					&& ccTransactionId.trim().length() > 0) {
				String paymentGatewayType = "";
				if (session.getAttribute("PAYMENT_GATEWAY") != null
						&& session.getAttribute("PAYMENT_GATEWAY").toString().length() > 0) {
					paymentGatewayType = (String) session.getAttribute("PAYMENT_GATEWAY");
				} else {
					paymentGatewayType = CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY");
				}
				ccNumber = ccNumber.replaceAll("XXXX-", "");
				ccNumber = ccNumber.replaceAll("\\*", "");
				ccNumber = ccNumber.replaceAll("#", "");
				ccNumber = ccNumber.replaceAll("-", "");
				creditCardValue = new CreditCardModel();
				creditCardValue.setCardHolder(cardHolder);
				creditCardValue.setDate(ccExp);
				creditCardValue.setElementPaymentAccountId(ccTransactionId);
				creditCardValue.setAddress1(streetAddress);
				creditCardValue.setZipCode(postalCode);
				creditCardValue.setPaymentGatewayType(paymentGatewayType);
				creditCardValue.setCreditCardResponseCode(ccResponseCode);
				creditCardValue.setCreditCardStatus(ccStatus);
				creditCardValue.setCreditCardHostRefNumber(ccHostRefNumber);
				creditCardValue.setCreditCardTaskID(ccTaskID);
				creditCardValue.setCreditCardAmount(ccAmount);
				creditCardValue.setCreditCardDeclineResponseReason(ccDeclineResponseReason);
				creditCardValue.setCreditCardCvv2VrfyCode(ccCvv2VrfyCode);
				creditCardValue.setCreditCardTip(ccTip);
				creditCardValue.setCreditCardTransTimeStamp(currentDate);
				creditCardValue.setCreditCardToken(ccToken);
				creditCardValue.setCreditCardApprovedAmount(ccApprovedAmount);
				creditCardValue.setCreditCardRequestedAmount(ccRequestedAmount);
				creditCardValue.setCreditCardHostResponseCode(ccHostResponseCode);
				creditCardValue.setCreditCardInvoice(ccInvoice);
				creditCardValue.setCreditCardApprovalCode(ccApprovalCode);
				creditCardValue.setCreditCardTransactionID(ccTransactionId);
				creditCardValue.setCreditCardServerTimestamp(ccServerTimestamp);
				creditCardValue.setCreditCardType(ccType);
				creditCardValue.setCreditCardFee(ccFee);
				creditCardValue.setCreditCardExternalSessionID(ccExternalSessionID);
				creditCardValue.setCreditCardAddVrfyCode(ccAddVrfyCode);
				creditCardValue.setCreditCardTax(ccTax);
				creditCardValue.setCreditCardNewDomainKey(ccNewDomainKey);
				creditCardValue.setCreditCardNumber(ccNumber);
				creditCardValue.setCreditCardRefNumber(ccRefrenceCode);
				creditCardValue.setCreditCardTaskID(Integer.toString(sequenceId));

				// SalesModel invoiceDetail = new SalesModel();
				orderList = new ArrayList<SalesModel>();
				ArrayList<SalesModel> invoiceDetails = (ArrayList<SalesModel>) session
						.getAttribute("OutStandingOrderPaymentList");

				// if(creditCardValue!=null){
				session.removeAttribute("creditCardValue");
				session.setAttribute("creditCardValue", creditCardValue);
				/*
				 * }else{ if(session.getAttribute("creditCardValue")!=null){ creditCardValue =
				 * (CreditCardModel) session.getAttribute("creditCardValue"); } }
				 */
				contentObject.put("invoiceDetail", invoiceDetails);
				contentObject.put("ccTransactionId", creditCardValue.getCreditCardTransactionID());
				contentObject.put("ccRefrenceCode", creditCardValue.getCreditCardRefNumber());
				contentObject.put("ccApprovalCode", creditCardValue.getCreditCardApprovalCode());
				contentObject.put("ccApprovedAmount", creditCardValue.getCreditCardApprovedAmount());
				contentObject.put("ccStatus", creditCardValue.getCreditCardStatus());
				contentObject.put("ccType", creditCardValue.getCreditCardType());
				contentObject.put("ccToken", creditCardValue.getCreditCardToken());
				contentObject.put("ccInvoice", creditCardValue.getCreditCardInvoice());
				contentObject.put("ccNumber", creditCardValue.getCreditCardNumber());
				contentObject.put("ccInvoice", creditCardValue.getCreditCardInvoice());
				contentObject.put("ccDate", creditCardValue.getCreditCardInvoice());
				contentObject.put("ccAmount", creditCardValue.getCreditCardAmount());
				contentObject.put("ccExp", creditCardValue.getDate());
				contentObject.put("arTransactionID", arTransactionID);
				contentObject.put("sequenceId", sequenceId);
				if (session.getAttribute("outStandingPaymentTotal") != null) {
					contentObject.put("outStandingPaymentTotal",
							CommonUtility.validateString((String) session.getAttribute("outStandingPaymentTotal")));
				}
				if (session.getAttribute("outStandingPayment") != null) {
					contentObject.put("outStandingPayment",
							CommonUtility.validateString((String) session.getAttribute("outStandingPayment")));
				}
				if (session.getAttribute("OutStandingOrderPaymentList") != null) {
					contentObject.put("outStandingOrderPaymentList",
							(ArrayList<SalesModel>) session.getAttribute("OutStandingOrderPaymentList"));
				}
				String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
				int userId = CommonUtility.validateNumber(sessionUserId);
				SendMailUtility.sendOutstandingOrderPaymentMail(creditCardValue, String.valueOf(userId));
				// session.removeAttribute("outStandingPayment");
				// session.removeAttribute("outStandingPaymentTotal");
				// session.removeAttribute("OutStandingOrderPaymentList");
				// session.removeAttribute("OutStandingOrderPaymentList");
				renderContent = LayoutGenerator.templateLoader("OutStandingOrderSuccess", contentObject, null, null,
						null);
				System.out.println("renderContent" + renderContent);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String OrderDetail() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			SalesOrderManagement salesObj = new SalesOrderManagementImpl();
			LinkedHashMap<String, ArrayList<SalesModel>> orderInfo = new LinkedHashMap<String, ArrayList<SalesModel>>();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			String userName = (String) session.getAttribute(Global.USERNAME_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String orderId = request.getParameter("orderId");
			String guestFlag = request.getParameter("guestFlag");
			String companyName = request.getParameter("companyName");
			String shippingOrgType = request.getParameter("orgType");
			tempCheck = request.getParameter("altPartnumber");
			genId = (String) request.getParameter("genId");
			String orderStatus = request.getParameter("orderStatus");
			invoiceId = (String) request.getParameter("invoiceId");
			String orderSufix = request.getParameter("sufix");
			String erpOverrideFlag = request.getParameter("erpOverrideFlag");
			String sequenceNumber = request.getParameter("sequenceNumber");
			String userRole = "";
			String reqType = (String) request.getParameter("Openorder");
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			Gson orderDetailJSON = new Gson();
			if (userId > 1) {
				SalesModel salesInputParameter = new SalesModel();
				salesInputParameter.setOrderID(orderId);
				if (orderId != null && orderId.trim().length() > 0) {
					salesInputParameter.setOrderId(CommonUtility.validateNumber(orderId));
				}
				if (orderSufix != null && orderSufix.trim().length() > 0 && reqType != null) {
					salesInputParameter.setOrderSuffix(CommonUtility.validateNumber(orderSufix));
				} else {
					salesInputParameter.setOrderSuffix(CommonUtility.validateNumber(orderSufix));
				}
				if (CommonUtility.customServiceUtility() != null) {
					userRole = CommonUtility.customServiceUtility().getRetailUserOrdersFromCIMM(
							CommonUtility.validateString((String) session.getAttribute("isRetailUser")));
					salesInputParameter.setUserNote(userRole);
				}

				salesInputParameter.setInvoiceNumber(invoiceId);
				salesInputParameter.setUserName(userName);
				salesInputParameter.setCompanyName(companyName);
				salesInputParameter.setShippingOrgType(shippingOrgType);
				salesInputParameter.setGeneId(genId);
				salesInputParameter.setReqType(reqType);
				salesInputParameter.setOrderNum(genId);
				salesInputParameter.setSeqnum(CommonUtility.validateNumber(sequenceNumber));
				salesInputParameter.setErpOverrideFlag(erpOverrideFlag);
				salesInputParameter.setUserToken((String) session.getAttribute("userToken"));
				salesInputParameter.setCustomerNumber(
						session.getAttribute("customerId") != null ? (String) session.getAttribute("customerId") : "0");
				salesInputParameter.setCustomerCountry(session.getAttribute("customerCountry") != null
						? (String) session.getAttribute("customerCountry")
						: "");
				salesInputParameter.setSession(session);
				salesInputParameter.setOrderStatus(orderStatus);
				salesInputParameter.setWareHouseCode((String) session.getAttribute("wareHouseCode"));
				salesInputParameter.setGuestFlag(guestFlag);
				orderInfo = salesObj.OrderDetail(salesInputParameter);
				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				SalesModel orderInformation = null;
				SalesModel orderToatalDetails = null;
				if (orderInfo != null) {
					if (orderInfo.get("OrderDetail") != null && !orderInfo.get("OrderDetail").isEmpty()) {
						orderDetail = (orderInfo.get("OrderDetail").get(0) != null)
								? orderInfo.get("OrderDetail").get(0)
								: null;
						orderItemList = orderInfo.get("OrderItemList");
						String erp = "defaults";
						if (session.getAttribute("erpType") != null
								&& session.getAttribute("erpType").toString().trim().length() > 0) {
							erp = session.getAttribute("erpType").toString().trim();
						}
						if (!CommonUtility.validateString(erp).equalsIgnoreCase("eclipse")
								&& !CommonUtility.validateString(erp).equalsIgnoreCase("defaults")
								&& !CommonUtility.validateString(erp).equalsIgnoreCase("cimm2bcentral")
								&& !CommonUtility.validateString(erp).equalsIgnoreCase("cimmesb")) {
							orderInformation = (orderInfo.get("OrderInfo").get(0) != null)
									? orderInfo.get("OrderInfo").get(0)
									: null;
							orderToatalDetails = (orderInfo.get("orderToatalDetails").get(0) != null)
									? orderInfo.get("orderToatalDetails").get(0)
									: null;
						}
					} else {
						contentObject.put("errorOnOrder", "Y");
						contentObject.put("errorMsg",
								LayoutLoader.getMessageProperties()
										.get(session.getAttribute("localeCode").toString().toUpperCase())
										.getProperty("OrderDetailTracking.error.orderIdNotFound"));
					}

				}
				if (CommonUtility.validateString(requestType).equalsIgnoreCase("quickorder")) {
					String jsonResponse = "";
					Gson gson = new Gson();
					jsonResponse = gson.toJson(orderItemList);
					renderContent = jsonResponse;

				} else {
					if (session.getAttribute("defaultBillToId") != null
							&& session.getAttribute("defaultBillToId").toString().trim().length() > 0) {
						defaultBillToId = CommonUtility
								.validateNumber((String) session.getAttribute("defaultBillToId"));
					}
					if (session.getAttribute("defaultShipToId") != null
							&& session.getAttribute("defaultShipToId").toString().trim().length() > 0) {
						defaultShipToId = CommonUtility
								.validateNumber((String) session.getAttribute("defaultShipToId"));
					}
					if (defaultBillToId == 0 || defaultShipToId == 0) {
						HashMap<String, Integer> userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(
								(String) session.getAttribute(Global.USERNAME_KEY));
						// UsersDAO.getDefaultAddressId(userId);
						defaultBillToId = userAddressId.get("Bill");
						defaultShipToId = userAddressId.get("Ship");

						session.setAttribute("defaultBillToId", "" + defaultBillToId);
						session.setAttribute("defaultShipToId", "" + defaultShipToId);
					}

					contentObject.put("orderId", orderId);
					contentObject.put("reqType", "webOrder");
					if (orderStatus != null && orderStatus.trim().length() > 0) {
						contentObject.put("orderStatus", orderStatus);
					} else {
						contentObject.put("orderStatus", "New");
					}

					ArrayList<ProductsModel> itemList = new ArrayList<ProductsModel>();
					ArrayList<Integer> partIdentifierQuantity = new ArrayList<Integer>();
					if (orderItemList != null && orderItemList.size() > 0) {
						String entityId = (String) session.getAttribute("entityId");
						String homeTeritory = (String) session.getAttribute("shipBranchId");

						String buildPartNumberString = "";
						String delimit = "";

						for (SalesModel smodel : orderItemList) {
							ProductsModel pmodel = new ProductsModel();
							if (CommonUtility.validateString(smodel.getProductcode()).length() > 0) {
								pmodel.setPartNumber(smodel.getProductcode());
							} else {
								pmodel.setPartNumber(smodel.getPartNumber());
							}
							pmodel.setQty((int) smodel.getQuantityOrdered());
							partIdentifierQuantity.add((int) smodel.getQuantityOrdered());
							/*
							 * pmodel = SalesDAO.getItemPriceIdOnPartNumber(pmodel,subsetId,generalSubset);
							 * smodel.setItemPriceId(pmodel.getItemPriceId());
							 */
							itemList.add(pmodel);
							if (CommonUtility.validateString(tempCheck).length() > 0) {
								smodel.setPartNumber(smodel.getAltPartNumber());
							}

							buildPartNumberString = buildPartNumberString + delimit + "\""
									+ CommonUtility.validateString(smodel.getPartNumber()) + "\"";
							delimit = " OR ";
						}

						ArrayList<ProductsModel> itemDetalsFromSOLR = null;
						if (CommonUtility.validateString(buildPartNumberString).length() > 0) {
							itemDetalsFromSOLR = ProductHunterSolr.getItemDetailsForGivenPartNumbers(subsetId,
									generalSubset, CommonUtility.validateString(buildPartNumberString), 0, null,
									"partnumber");
						}

						if (orderItemList != null && itemDetalsFromSOLR.size() > 0) {
							for (ProductsModel itmListSolr : itemDetalsFromSOLR) {
								for (SalesModel smodel : orderItemList) {
									if (CommonUtility.validateString(smodel.getPartNumber()).equalsIgnoreCase(
											CommonUtility.validateString(itmListSolr.getPartNumber()))) {
										if (CommonUtility.validateString(request.getParameter("orderStatus"))
												.equalsIgnoreCase("QUOTE")) {
											smodel.setDescription(smodel.getShortDesc());
										}

										smodel.setImageName(itmListSolr.getImageName());
										smodel.setImageType(itmListSolr.getImageType());
										smodel.setItemPriceId(itmListSolr.getItemPriceId());
										smodel.setBrandName(itmListSolr.getBrandName());
										smodel.setManufacturerPartNumber(itmListSolr.getManufacturerPartNumber());
										smodel.setShortDesc(itmListSolr.getShortDesc());
										smodel.setAltPartNumber1(itmListSolr.getAltPartNumber1());
									}
								}
							}
						}

						/*
						 * ProductManagement priceInquiry = new ProductManagementImpl();
						 * ProductManagementModel priceInquiryInput = new ProductManagementModel();
						 * priceInquiryInput.setEntityId(CommonUtility.validateString(entityId));
						 * priceInquiryInput.setHomeTerritory(homeTeritory);
						 * priceInquiryInput.setPartIdentifier(itemList);
						 * priceInquiryInput.setPartIdentifierQuantity(partIdentifierQuantity);
						 * priceInquiryInput.setRequiredAvailabilty("Y");
						 * priceInquiryInput.setUserName((String)session.getAttribute(Global.
						 * USERNAME_KEY));
						 * priceInquiryInput.setUserToken((String)session.getAttribute("userToken"));
						 * priceInquiryInput.setSession(session); ArrayList<ProductsModel>
						 * itemListPriceData = priceInquiry.priceInquiry(priceInquiryInput , itemList);
						 * 
						 * if(itemListPriceData!=null && itemListPriceData.size()>0){ for(ProductsModel
						 * itmListModel : itemListPriceData){ for(SalesModel smodel : orderItemList){
						 * if(CommonUtility.validateString(smodel.getProductcode()).equalsIgnoreCase(
						 * CommonUtility.validateString(itmListModel.getPartNumber()))){
						 * smodel.setUnitsPerStocking(itmListModel.getUnitsPerStocking());
						 * smodel.setUnitsPerStockingString(itmListModel.getUnitsPerStockingString()); }
						 * } } }
						 */

					}
					contentObject.put("orderItemList", orderItemList);
					contentObject.put("orderDetail", orderDetail);
					contentObject.put("requestType", requestType);
					contentObject.put("itemList", itemList);
					contentObject.put("orderToatalDetails", orderToatalDetails);
					contentObject.put("orderInformation", orderInformation);
					contentObject.put("defaultBillToId", defaultBillToId);
					contentObject.put("defaultShipToId", defaultShipToId);
					contentObject.put("siteShipViaList", CommonDBQuery.getSiteShipViaList());

					if (CommonUtility.validateString(request.getParameter("requestType")).equalsIgnoreCase("JSON")) {
						String orderDetails = orderDetailJSON.toJson(orderDetail);
						renderContent = orderDetails;
					} else {
						renderContent = LayoutGenerator.templateLoader("OrderDetailPage", contentObject, null, null,
								null);
					}

				}
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String ReOrder() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			try {
				int userId = CommonUtility.validateNumber(sessionUserId);
				if (userId > 1) {
					session.removeAttribute("isReOrder");
					session.removeAttribute("quoteNumber");
					session.removeAttribute("orderNumber");
					session.removeAttribute("quoteCartCount");
					SalesDAO.deleteQuoteCart(session.getId());
					String tempSubset = (String) session.getAttribute("userSubsetId");
					String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
					int subsetId = CommonUtility.validateNumber(tempSubset);
					int generalSubsetId = CommonUtility.validateNumber(tempGeneralSubset);

					if (ProductsDAO.getSubsetIdFromName(
							CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
						generalSubsetId = ProductsDAO.getSubsetIdFromName(
								CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
					}
					String getPriceFrom = request.getParameter("getPriceFrom");
					// if(quotePartNumber!=null && quotePartNumber.length > 0){
					if (quotePartNumberSelected != null && quotePartNumberSelected.length > 0) {
						session.setAttribute("erpQuoteNumber", erpQuoteNumber);
						session.setAttribute("quoteCartCount", quotePartNumberSelected.length);
						// String eclipseSessionId = (String) session.getAttribute("userToken");
						ArrayList<SalesModel> productPriceOutput = new ArrayList<SalesModel>();
						// productPriceOutput =
						// MassProductInquiry.massProductInquiry(eclipseSessionId,partIdentifiersList,
						// userName,entityId,"N");
						LinkedHashMap<String, Double> itemPriceList = new LinkedHashMap<String, Double>();
						for (SalesModel eclipseitemPrice : productPriceOutput) {
							itemPriceList.put(eclipseitemPrice.getPartNumber().trim(),
									eclipseitemPrice.getCustomerPrice());
						}

						// for(String qPno:quotePartNumber){
						for (String qPno : quotePartNumberSelected) {
							String qty = request.getParameter("qty_" + qPno);
							String partNumber = request.getParameter("partNumber_" + qPno);
							String mpn = request.getParameter("mpn_" + qPno);
							String shortDesc = request.getParameter("shortDesc_" + qPno);
							String stringPrice = request.getParameter("price_" + qPno);
							String stringTotal = request.getParameter("total_" + qPno);
							String uom = request.getParameter("uom_" + qPno);
							;
							String lineItemComment = request.getParameter("lineitemcomment_" + qPno);
							double price = 0d;
							double total = 0d;
							if (stringPrice != null && !stringPrice.trim().equalsIgnoreCase(""))
								price = Double.parseDouble(stringPrice);
							if (stringTotal != null && !stringTotal.trim().equalsIgnoreCase(""))
								total = Double.parseDouble(stringTotal);

							int iQty = 1;
							if (qty != null && !qty.trim().equalsIgnoreCase("")) {
								iQty = (int) Double.parseDouble(qty);
							}

							if (itemPriceList != null && itemPriceList.size() > 0) {
								price = itemPriceList.get(qPno);
								total = (price * iQty);
							}
							SalesModel cartVal = SalesDAO.getQuoteItemDetail(partNumber, subsetId, generalSubsetId);
							if (cartVal != null) {
								cartVal.setPrice(price);
								cartVal.setTotal(total);
								cartVal.setOrderQty(iQty);
								cartVal.setUom(uom);
								cartVal.setLineItemComment(lineItemComment);
							} else {
								cartVal = new SalesModel();
								cartVal.setPartNumber(partNumber);
								cartVal.setManufacturerPartNumber(mpn);
								cartVal.setShortDesc(shortDesc);
								cartVal.setItemId(2);
								cartVal.setUnspc("");
								cartVal.setMaterialGroup("");
								cartVal.setPrice(price);
								cartVal.setTotal(total);
								cartVal.setOrderQty(iQty);
								cartVal.setUom(uom);
								cartVal.setLineItemComment(lineItemComment);
							}
							cartVal.setGetPriceFrom(getPriceFrom);
							SalesDAO.saveQuoteCart(cartVal, session.getId());
						}
					}
					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("WILL_CALL_EXCLUDE_BRAND_ID"))
							.length() > 0) {
						String[] brandIDList = CommonDBQuery.getSystemParamtersList().get("WILL_CALL_EXCLUDE_BRAND_ID")
								.split(",");
						boolean isExcludeBranch = false;
						if (brandIDList != null) {
							for (String brandId : brandIDList) {
								isExcludeBranch = ProductsDAO.getCartBrandExcludeStatus(userId, session.getId(),
										Integer.parseInt(brandId), "QuoteCart");
								if (isExcludeBranch) {
									break;
								}
							}
							if (isExcludeBranch) {
								session.setAttribute("isWillCallExcludeReorder", "Y");
							} else {
								session.setAttribute("isWillCallExcludeReorder", "N");
							}
						}
					}
					target = "QuoteCart";

				} else {
					target = "SESSIONEXPIRED";
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String sendApproval() {
		ResultSet rs = null;
		Connection conn = null;
		String sql = "";
		PreparedStatement pstmt = null;
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		String tempBuyingCompany = (String) session.getAttribute("buyingCompanyId");
		int buyingCompanyId = CommonUtility.validateNumber(tempBuyingCompany);

		int userId = CommonUtility.validateNumber(sessionUserId);
		int count = 0;
		int savedListId = 0;
		String sessionParentId = (String) session.getAttribute("parentUserId");
		String tempdefaultShipId = (String) session.getAttribute("defaultShipToId");

		try {
			conn = ConnectionManager.getDBConnection();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		int approveUserId = 0;
		ArrayList<UsersModel> approverList = new ArrayList<UsersModel>();
		ArrayList<UsersModel> approverMailList = new ArrayList<UsersModel>();
		ArrayList<UsersModel> unlimtedApproverList = new ArrayList<UsersModel>();
		ArrayList<UsersModel> listOfApprovers = new ArrayList<UsersModel>();
		ArrayList<UsersModel> listOfUnlimitedAccessSuperAndAPAlist = new ArrayList<UsersModel>();
		listOfApprovers = UsersDAO.getAllApprovalUserList(userId);
		listOfUnlimitedAccessSuperAndAPAlist = UsersDAO.getUnlimitedAccessSuperAndAPAlist(userId, buyingCompanyId);

		UsersModel alwaysApprover = UsersDAO.checkAlwaysApprover(userId);

		if (lineItemTotal >= 0) {

			if (listOfApprovers.size() > 0 && CommonUtility.validateString(alwaysApprover.getAlwaysApprover()) == "N") {
				// Checking cart total with assigned approver budget limits.
				/*
				 * for(UsersModel userModelObject : listOfApprovers){
				 * 
				 * double budgetLimit =
				 * CommonUtility.validateDoubleNumber(userModelObject.getApproveLimit());
				 * if(lineItemTotal <= budgetLimit){ approverList.add(userModelObject);
				 * approverList.add(userModelObject.getApproverId()); }else if(budgetLimit ==
				 * 0){ unlimtedApproverList.add(userModelObject);
				 * unlimtedApproverList.add(userModelObject.getApproverId()); } }
				 */

				// considering APA as who has budget limit is zero and when cart does not match
				// assigned approver
				if (approverList.size() == 0) {

					if (listOfUnlimitedAccessSuperAndAPAlist.size() > 0) {
						for (UsersModel obj : listOfUnlimitedAccessSuperAndAPAlist) {
							approverList.add(obj);
							/* approverList.add(obj.getApproverId()); */
						}
					}
					if (unlimtedApproverList.size() > 0) {
						approverList.addAll(unlimtedApproverList);
						/* approverList.addAll(unlimtedApproverList); */
					}
				}
			} else if (CommonUtility.validateString(alwaysApprover.getAlwaysApprover()).length() > 0
					&& alwaysApprover.getAlwaysApprover().equalsIgnoreCase("on") && listOfApprovers.size() > 0) {
				/*
				 * for (UsersModel userModelObject : listOfApprovers) { double budgetLimit =
				 * CommonUtility.validateDoubleNumber(userModelObject.getApproveLimit()); if
				 * (lineItemTotal <= budgetLimit) { approverList.add(userModelObject); } else if
				 * (budgetLimit == 0) { unlimtedApproverList.add(userModelObject); } }
				 */
				for (UsersModel userModelObject : listOfApprovers) 
				{ double budgetLimit = CommonUtility.validateDoubleNumber(userModelObject.getApproveLimit());
				 if(lineItemTotal <= budgetLimit) { approverList.add(userModelObject); } else if
						  (budgetLimit == 0) { unlimtedApproverList.add(userModelObject); } }
				if (unlimtedApproverList.size() > 0) {
					approverList.addAll(unlimtedApproverList);
				}
				if (approverList.size() == 0 && listOfUnlimitedAccessSuperAndAPAlist.size() > 0) {
					for (UsersModel obj : listOfUnlimitedAccessSuperAndAPAlist) {
						approverList.add(obj);
					}
				}
				for (UsersModel approveUserIdValue : approverList) {
					if (CommonUtility.validateString(approveUserIdValue.getApproverSequence()).equalsIgnoreCase("1")) {
						approverMailList.add(approveUserIdValue);
						break;
					} else if (!CommonUtility.validateString(approveUserIdValue.getApproverSequence())
							.equalsIgnoreCase("1")
							&& CommonUtility.validateString(approveUserIdValue.getApproverSequence()) != "") {
						approverMailList.add(approveUserIdValue);
						break;
					} else if (CommonUtility.validateString(approveUserIdValue.getApproverSequence()) == "") {
						approverMailList.add(approveUserIdValue);
					}
				}
			}
		}

		try {
			if (userId > 1) {
				if (savedGroupId == 0) {
					sql = PropertyAction.SqlContainer.get("getFromCartQuery");
					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1, userId);
				} else {
					// sql = "SELECT C.ITEM_ID,C.QTY FROM SAVED_LIST_ITEMS C,LOC_ITEM_MASTER LIM
					// WHERE LIM.ITEM_ID = C.ITEM_ID AND C.SAVED_LIST_ID =?";
					// sql = "SELECT
					// C.CART_ID,C.ITEM_ID,C.QTY,LIM.SHORT_DESC,C.ITEMLEVEL_REQUIREDBYDATE FROM CART
					// C, LOC_ITEM_MASTER LIM WHERE LIM.ITEM_ID = C.ITEM_ID AND USER_ID = ?";
					sql = PropertyAction.SqlContainer.get("sendApproval");

					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1, savedGroupId);
				}
				Date date = new Date();
				DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
				dateFormat.setTimeZone(TimeZone.getTimeZone(CommonDBQuery.getSystemParamtersList().get("TIME_ZONE")));
				String datetime = dateFormat.format(date);
				System.out.println("Formatted date and time" + datetime);
				String groupName = (String) session.getAttribute(Global.USERNAME_KEY) + "_" + datetime;
				/*
				 * savedListId = CommonDBQuery.getSequenceId("SAVED_ITEM_LIST_SEQ");
				 * savedGroupId = savedListId;
				 */
				
				int requesterTokenId = CommonUtility.genrateRandomSevenDigitInteger();
				ArrayList<Integer> savedListGroupId = new ArrayList<Integer>();
				if(approverList!=null && approverList.size()>0){
					
					String approvalStatus = "";
					String approverSeq ="";
					String alwaysApproverFlag = "N";
					for(UsersModel approveUserIdValue : approverList){
						savedListId = CommonDBQuery.getSequenceId("SAVED_ITEM_LIST_SEQ");
						approveUserId = approveUserIdValue.getApproverId();
						/*
						 * count = ProductsDAO.createApproveCartName(conn, savedListId, approveUserId,
						 * "A", groupName, CommonUtility.validateNumber(tempdefaultShipId), userId);
						 */
						if(CommonUtility.validateString(alwaysApprover.getAlwaysApprover()).length() > 0 
				&& alwaysApprover.getAlwaysApprover().equalsIgnoreCase("on")){
							
							approvalStatus = "N";
							approverSeq = CommonUtility.validateString(approveUserIdValue.getApproverSequence()).length() > 0 ? approveUserIdValue.getApproverSequence() : "";
							alwaysApproverFlag = "Y";
						}
						
						
						  count = ProductsDAO.createApproveCart(conn,savedListId,approveUserId, "A",
						  groupName,CommonUtility.validateNumber(tempdefaultShipId),
						 userId,requesterTokenId,approvalStatus,approverSeq,alwaysApproverFlag);
						 
						
						if(count >0){
							savedListGroupId.add(savedListId);
						}
					}
				}
				if(savedListGroupId.size() > 0){

					rs = pstmt.executeQuery();
					
						while(rs.next())
						{
							for(Integer groupId : savedListGroupId){
								savedListId = groupId;
								count = ProductsDAO.insertItemToEachAPAGroup(conn, savedListId, rs.getInt("ITEM_ID"),rs.getInt("QTY"),rs.getString("ITEMLEVEL_REQUIREDBYDATE"),rs.getString("CATALOG_ID"),rs.getString("LINE_ITEM_COMMENT"),requesterTokenId,rs.getString("UOM"));
						}
					}	
						result = "0|"+"Succesful";
						SendMailUtility sendMailUtility = new SendMailUtility();
						/*boolean flag = sendMailUtility.sendMailToApprover(approveUserId,userId,(String) session.getAttribute(Global.USERNAME_KEY));*/
						
						boolean flag = sendMailUtility.sendMailToApprover(approverMailList,userId,(String) session.getAttribute(Global.USERNAME_KEY));
				}

				

				 else {
					result = "1|" + "Error in Submitting Apporval";
				}
				renderContent = result;
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBConnection(conn);
		}
		return target;
	}

	public String rfqPage() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			quickOrderPadSel = new ArrayList<ProductsModel>();
			ProductsModel selListVal = null;
			selListVal = new ProductsModel();
			selListVal.setProductListId(1);
			selListVal.setProductListName("NCE Part Number");
			quickOrderPadSel.add(selListVal);
			selListVal = new ProductsModel();
			selListVal.setProductListId(4);
			selListVal.setProductListName("Manufacturer Part Number");
			quickOrderPadSel.add(selListVal);
			selListVal = new ProductsModel();
			selListVal.setProductListId(5);
			selListVal.setProductListName("UPC");
			quickOrderPadSel.add(selListVal);
			int resultPerPage = 5;
			int noOfPage = (CommonUtility.validateNumber(pageNo) / resultPerPage) + 1;
			int fromRow = (noOfPage - 1) * resultPerPage + 1;
			int toRow = ((noOfPage - 1) * resultPerPage) + resultPerPage;
			rfqRefKeyList = new ArrayList<ProductsModel>();
			rfqRefKeyList = ProductsDAO.getRfqRefKey(userId, fromRow, toRow);

			if (rfqRefKeyList != null && rfqRefKeyList.size() > 0) {
				resultCount = rfqRefKeyList.get(0).getResultCount();
				float disp;
				float disp1;
				disp = resultCount;

				if (resultCount > resultPerPage) {

					paginate = (resultCount / resultPerPage);
					disp1 = (disp / resultPerPage);

				} else {
					paginate = (resultCount / resultPerPage);
					disp1 = (resultCount / resultPerPage);
				}

				if (disp1 > paginate) {
					paginate = paginate + 1;

				}

			}

			addressList = new UsersModel();
			addressList = UsersDAO.getEntityDetailsByUserId(userId);
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			contentObject.put("addressList", addressList);
			contentObject.put("paginate", paginate);
			contentObject.put("pageNo", pageNo);
			contentObject.put("quickOrderPadSel", quickOrderPadSel);
			contentObject.put("rfqRefKeyList", rfqRefKeyList);
			renderContent = LayoutGenerator.templateLoader("RequestForQuote", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String ProcessRfq() {
		int counter = 0;
		int count = 0;
		int nprId = 0;
		Connection conn = null;
		PreparedStatement pstmt = null;
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		resultData = new ArrayList<ProductsModel>();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		String tempBuyingCompany = (String) session.getAttribute("buyingCompanyId");
		int buyingCompanyId = CommonUtility.validateNumber(tempBuyingCompany);
		int userId = CommonUtility.validateNumber(sessionUserId);
		String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
		int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
		if (userId > 1) {
			int punchOutUser = 0;
			int orderId = 0;
			String erp = "";
			boolean flag = true;
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			SalesModel defaultOrderDetail = new SalesModel();
			ArrayList<ProductsModel> itemDetailObject = new ArrayList<ProductsModel>();
			result = "";
			try {
				conn = ConnectionManager.getDBConnection();
				if (session.getAttribute("isOciUser") == null) {
					punchOutUser = 0;
				} else {
					punchOutUser = (Integer) session.getAttribute("isOciUser");
				}
				DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
				Date date = new Date();
				String seq = dateFormat.format(date);
				String tempDate[] = null;
				if (PARTNUMARR != null && PARTNUMARR.length > 0) {
					if (punchOutUser == 2) {
						userId = (Integer) session.getAttribute("punchoutParentUserId");
					}
					// ArrayList<ProductsModel> orderDetails = new ArrayList<ProductsModel>();
					HashMap<String, Integer> userAddressId = new HashMap<String, Integer>();
					userAddressId = UsersDAO
							.getDefaultAddressIdForBCAddressBook((String) session.getAttribute(Global.USERNAME_KEY));
					// UsersDAO.getDefaultAddressId(userId);
					defaultBillToId = userAddressId.get("Bill");
					defaultShipToId = userAddressId.get("Ship");
					HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
							defaultShipToId);
					billAddress = userAddress.get("Bill");
					billAddress.setOrderNotes(comments);
					billAddress.setReqDate(reqDate);

					shipAddress = userAddress.get("Ship");
					shipAddress.setOrderNotes(comments);
					shipAddress.setReqDate(reqDate);
					shipAddress.setPhoneNo(phoneNumber);
					if (CommonUtility.validateString(city).length() > 0) {
						shipAddress.setCity(city);
					}
					if (CommonUtility.validateString(state).length() > 0) {
						shipAddress.setState(state);
					}
					billAddress.setSession(session);

					billEntityId = billAddress.getEntityId();
					shipEntityId = shipAddress.getEntityId();

					// buyingCompanyId
					String shipId = UsersDAO.getPunchoutShipTo(buyingCompanyId);
					if (!CommonUtility.validateString(shipId).isEmpty()
							&& !CommonUtility.validateString(shipId).equals("0")) {
						shipEntityId = shipId;
					}
					String ipaddress = request.getHeader("X-Forwarded-For");
					if (ipaddress == null) {
						ipaddress = request.getRemoteAddr();
					}
					UsersModel userDefaultAddress = new UsersModel();
					userDefaultAddress = shipAddress;
					int isPunchout = 0;
					if (session.getAttribute("isOciUser") != null) {
						isPunchout = (Integer) session.getAttribute("isOciUser");
					}
					for (int i = 0; i < PARTNUMARR.length; i++) {
						if (!PARTNUMARR[i].trim().equalsIgnoreCase("")) {
							ProductsModel nprDetail = null;
							counter++;
							if (counter == 1) {
								String sql = PropertyAction.SqlContainer.get("insertNewProduct");
								if (reqDate != null && !reqDate.trim().equalsIgnoreCase("")) {
									tempDate = reqDate.split("/");
									// reqDate = tempDate[2]+"/"+tempDate[0]+"/"+tempDate[1];
									String reqDateTemp = tempDate[2] + "/" + tempDate[0] + "/" + tempDate[1];
									String temp = "TO_DATE('" + reqDateTemp + "','yyyy/mm/dd')";
									sql = sql.replace("REPLACESTRING", temp);
									userDefaultAddress.setReqDate(tempDate[0] + "/" + tempDate[1] + "/" + tempDate[2]);

								} else {
									sql = sql.replace("REPLACESTRING", "''");
								}

								nprId = CommonDBQuery.getSequenceId("NEW_PRODUCT_REQUEST_SEQ");

								pstmt = conn.prepareStatement(sql);
								// NPR_ID,NPR_NAME,NPR_DESC,UPDATED_DATETIME,USER_ID
								// result = "NPR"+seq;
								String newProdName = "NPR" + seq;
								pstmt.setInt(1, nprId);
								pstmt.setString(2, newProdName);
								pstmt.setString(3, comments);
								pstmt.setInt(4, userId);
								count = pstmt.executeUpdate();
								ConnectionManager.closeDBPreparedStatement(pstmt);
								creditCardValue = null;
								orderId = 0;
								String homeBranchId = (String) session.getAttribute("homeBranchId");
								String homeBranchName = (String) session.getAttribute("homeBranchName");
								String shipBranchId = (String) session.getAttribute("shipBranchId");
								String shipBranchName = (String) session.getAttribute("shipBranchName");

								LinkedHashMap<String, Object> orderDetail = new LinkedHashMap<String, Object>();
								orderDetail.put("homeBranchId", homeBranchId);
								orderDetail.put("homeBranchName", homeBranchName);
								orderDetail.put("shipBranchId", shipBranchId);
								orderDetail.put("shipBranchName", shipBranchName);
								orderId = saveOrder(conn, userId, orderId, billAddress, shipAddress, "RFQ", taxExempt,
										referenceKey, "", "", "", "", "", ipaddress, creditCardValue,
										customerReleaseNumber, orderDetail);
							}
							String itemQty = ITEMQTYARR[i];
							if (CommonUtility.validateNumber(itemQty) == 0) {
								itemQty = "1";
							}

							String partNumber = ProductHunterSolr.escapeQueryCulpritsWithoutWhiteSpace(PARTNUMARR[i]);
							partNumber = "\"" + partNumber + "\"";

							String rfqSearchField = CommonUtility
									.validateString(CommonDBQuery.getSystemParamtersList().get("RFQ_SEARCH_FIELD"));

							ArrayList<ProductsModel> itemDetalsFromSOLR = null;
							itemDetalsFromSOLR = ProductHunterSolr.getItemDetailsForGivenPartNumbers(subsetId,
									generalSubset, CommonUtility.validateString(partNumber), 0, null, rfqSearchField);
							if (itemDetalsFromSOLR.size() > 0) {
								for (ProductsModel itmListSolr : itemDetalsFromSOLR) {
									if (CommonUtility.validateString(PARTNUMARR[i])
											.equalsIgnoreCase(CommonUtility.validateString(itmListSolr.getPartNumber()))
											|| CommonUtility.validateString(PARTNUMARR[i])
													.equalsIgnoreCase(CommonUtility
															.validateString(itmListSolr.getManufacturerPartNumber()))) {
										nprDetail = new ProductsModel();
										nprDetail = itmListSolr;
									}
								}
							}
							// nprDetail = SalesDAO.getNPRItemDetail(conn, partNumber, subsetId,
							// rfqSearchField);
							String lineItemComment = "";
							if (nprDetail == null) {
								if (CommonDBQuery.getSystemParamtersList().get("NewProductEnquiry") != null
										&& CommonDBQuery.getSystemParamtersList().get("NewProductEnquiry").trim()
												.equalsIgnoreCase("Y")) {
									nprDetail = new ProductsModel();
									nprDetail
											.setPartNumber(CommonDBQuery.getSystemParamtersList().get("RFQPartNumber"));
									nprDetail.setCustomerPartNumber(PARTNUMARR[i]);
									nprDetail.setItemId(CommonUtility
											.validateNumber(CommonDBQuery.getSystemParamtersList().get("RFQItemId")));
								} else {
									flag = false;
									result = result + PARTNUMARR[i]
											+ " was not found. Please try different Manufacturer Part Number<br/>";
								}
								lineItemComment = "1";
							}
							nprDetail.setQty(CommonUtility.validateNumber(itemQty));
							String desc = "";
							if (PARTNUMARR[i] != null && !PARTNUMARR[i].trim().equalsIgnoreCase(""))
								desc = "Mfr Part# : " + PARTNUMARR[i];

							if (BRANDNAMEARR[i] != null && !BRANDNAMEARR[i].trim().equalsIgnoreCase(""))
								desc = desc + "<br/> Brand/Mfr Name : " + BRANDNAMEARR[i];

							if (DESCARR[i] != null && !DESCARR[i].trim().equalsIgnoreCase("")) {
								desc = desc + "<br/> Short Description : " + DESCARR[i];
								nprDetail.setDescription(DESCARR[i]);
							}
							if (flag) {
								if (CommonUtility.validateString(lineItemComment).equalsIgnoreCase("1")) {
									lineItemComment = desc;
								}
								nprDetail.setShortDesc(desc);
								// orderDetails.add(nprDetail);
								SalesDAO.saveNewProductItem(conn, nprId, PARTNUMARR[i], BRANDNAMEARR[i], DESCARR[i],
										CommonUtility.validateNumber(itemQty));
								saveOrderItems(conn, orderId, nprDetail.getItemId(),
										CommonUtility.validateNumber(itemQty), nprDetail.getPartNumber(), "", desc,
										nprDetail.getPrice(), "", "", "", lineItemComment, "", "", "", "");
								UserManagement userObj = new UserManagementImpl();
								UsersModel customerInfoInput = new UsersModel();
								customerInfoInput.setSession(session);
								userObj.checkERPConnection(customerInfoInput);
								// int entityId = CommonUtility.validateNumber((String)
								// session.getAttribute("entityId"));
								String eclipsePartNumber = ""; /*
																 * ProductNewSubmit.eclipseProductNewSubmit((String)
																 * session.getAttribute("userToken"), PARTNUMARR[i],
																 * BRANDNAMEARR[i], DESCARR[i],entityId,(String)
																 * session.getAttribute(Global.USERNAME_KEY));
																 */
								SalesDAO.updateNewProductItem(conn, count, eclipsePartNumber);
								itemDetailObject.add(nprDetail);
							}

						}
					}

					if (flag) {
						SalesModel eclipseOrderDetail = new SalesModel();
						String internalNote = "";
						internalNote = internalNote + "Contact Name : " + orderedBy;
						if (isPunchout > 0) {
							internalNote = internalNote + " ------ Shipto City : " + city;
							internalNote = internalNote + " ------ Shipto State: " + state;
						}

						internalNote = internalNote + " ------ Contact Phone : " + phoneNumber;
						internalNote = internalNote + " ------ Contact Email : " + email;
						internalNote = internalNote + " ------ Eclipse Id : " + shipEntityId;
						internalNote = internalNote + " ------ Comments : " + comments;
						internalNote = internalNote + "------ Shipping Instructions :" + shippingInstruction;

						// eclipseOrderDetail =
						// submitNewProductQuote(orderDetails,billEntityId,shipEntityId,"",(String)
						// session.getAttribute("userToken"),userDefaultAddress,taxExempt,(String)
						// session.getAttribute(Global.USERNAME_KEY),creditCardValue,poNumber,internalNote);
						AddressModel selectedShipAddress = new AddressModel();
						selectedShipAddress.setAddress1(address1 != null ? address1 : shipAddress.getAddress1());
						selectedShipAddress.setAddress2(address2 != null ? address2 : shipAddress.getAddress2());
						selectedShipAddress.setCity(city != null ? city : shipAddress.getCity());
						selectedShipAddress.setState(state != null ? state : shipAddress.getState());
						selectedShipAddress.setZipCode(zipCode != null ? zipCode : shipAddress.getZipCode());
						selectedShipAddress.setCountry(country != null ? country : shipAddress.getCountry());
						selectedShipAddress.setPhoneNo(phoneNumber != null ? phoneNumber : shipAddress.getPhoneNo());

						SalesOrderManagementModel salesOrderInput = new SalesOrderManagementModel();
						salesOrderInput.setShipVia(shipVia);
						salesOrderInput.setShippingInstruction(internalNote);
						salesOrderInput.setOrderNotes(comments);
						salesOrderInput.setOrderedBy(orderedBy);
						salesOrderInput.setReqDate(reqDate);
						salesOrderInput.setSession(session);
						salesOrderInput.setOrderId(orderId);
						salesOrderInput.setBillEntityId(billEntityId);
						salesOrderInput.setShipEntityId(shipEntityId);
						salesOrderInput.setUserToken((String) session.getAttribute("userToken"));
						salesOrderInput.setShipAddress(selectedShipAddress);
						salesOrderInput
								.setBillAddress(Cimm2BCentralClient.getInstance().userModelToAddressModel(billAddress));
						salesOrderInput.setTaxExempt(taxExempt);
						salesOrderInput.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
						salesOrderInput.setCreditCardValue(creditCardValue);
						salesOrderInput.setPurchaseOrderNumber(poNumber);
						salesOrderInput.setSelectedBranch(selectedBranch);
						salesOrderInput.setNote("RFQ");
						salesOrderInput.setOrderType(CommonUtility.validateString(request.getParameter("orderType")));
						salesOrderInput.setOrderItems(itemDetailObject);
						// UsersDAO user=new UsersDAO();
						// user.checkEclipseSession();
						UserManagement userObj = new UserManagementImpl();
						UsersModel customerInfoInput = new UsersModel();
						customerInfoInput.setSession(session);
						// userObj.checkERPConnection(customerInfoInput);

						SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();
						eclipseOrderDetail = salesOrderSubmit.submitOrderToERP(salesOrderInput);
						if (session.getAttribute("shipViaMap") != null) {
							LinkedHashMap<String, String> shipViaMap = (LinkedHashMap<String, String>) session
									.getAttribute("shipViaMap");
							if (CommonUtility.validateString(shipVia).equalsIgnoreCase("Multiple")) {
								eclipseOrderDetail.setShipViaMethod(shipVia.toUpperCase());
							} else {
								eclipseOrderDetail.setShipViaMethod(shipViaMap.get(shipVia.toUpperCase()));
							}
						}

						if (eclipseOrderDetail != null) {
							if (eclipseOrderDetail.getReqDate() != null
									&& eclipseOrderDetail.getReqDate().trim().length() > 0) {
							} else {
								eclipseOrderDetail.setReqDate(reqDate);
							}
							if (eclipseOrderDetail.getOrderedBy() != null
									&& eclipseOrderDetail.getOrderedBy().trim().length() > 0) {
							} else {
								eclipseOrderDetail.setOrderedBy(orderedBy);
							}
							if (eclipseOrderDetail.getOrderNotes() != null
									&& eclipseOrderDetail.getOrderNotes().trim().length() > 0) {
							} else {
								eclipseOrderDetail.setOrderNotes(comments);
							}
							if (CommonUtility.validateString(eclipseOrderDetail.getErpOrderNumber()).length() > 0) {
								result = "0| Quote : #" + eclipseOrderDetail.getErpOrderNumber();
							} else {
								result = "1| RFQ Failed";
							}
							updateSalesOrder(conn, orderId, eclipseOrderDetail);
						} else {
							defaultOrderDetail.setReqDate(reqDate);
							defaultOrderDetail.setOrderNotes(comments);
							defaultOrderDetail.setOrderedBy(orderedBy);
							defaultOrderDetail.setStatusDescription("Successful");
							updateSalesOrder(conn, orderId, defaultOrderDetail);
						}
						SalesModel otherDetail = new SalesModel();
						otherDetail.setSession(session);
						// SalesDAO.clearRfqCart(userId); Table dosent exist hence removed
						count = SalesDAO.sendConfirmationMail(orderId, userId, 1, email, otherDetail);
						// sendMail.buildNewProductMail(userId,
						// nprId,emailAddress,internalNote,punchOutUser,eclipseOrderDetail.getOrderID(),orderedBy,phoneNumber,
						// (String) session.getAttribute(Global.USERNAME_KEY));
					}

				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				ConnectionManager.closeDBPreparedStatement(pstmt);
				ConnectionManager.closeDBConnection(conn);
			}
			// renderContent = shoppingCartCount+"|"+result;
			renderContent = result;
			return SUCCESS;
		} else {
			renderContent = "sessionexpired";
			return SUCCESS;
		}

	}

	public String ProcessRfqV2() {
		int counter = 0;
		int count = 0;
		int nprId = 0;
		Connection conn = null;
		PreparedStatement pstmt = null;
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		resultData = new ArrayList<ProductsModel>();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		String tempBuyingCompany = (String) session.getAttribute("buyingCompanyId");
		int buyingCompanyId = CommonUtility.validateNumber(tempBuyingCompany);
		int userId = CommonUtility.validateNumber(sessionUserId);
		String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
		int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
		if (userId > 1) {
			int punchOutUser = 0;
			int orderId = 0;
			String erp = "";
			boolean flag = true;
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			SalesModel defaultOrderDetail = new SalesModel();

			ArrayList<ProductsModel> itemDetailObject = new ArrayList<ProductsModel>();
			result = "";
			try {
				conn = ConnectionManager.getDBConnection();
				if (session.getAttribute("isOciUser") == null) {
					punchOutUser = 0;
				} else {
					punchOutUser = (Integer) session.getAttribute("isOciUser");
				}
				DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
				Date date = new Date();
				String seq = dateFormat.format(date);
				String tempDate[] = null;
				if (PARTNUMARR != null && PARTNUMARR.length > 0) {
					HashMap<String, Integer> userAddressId = new HashMap<String, Integer>();
					userAddressId = UsersDAO
							.getDefaultAddressIdForBCAddressBook((String) session.getAttribute(Global.USERNAME_KEY));
					// UsersDAO.getDefaultAddressId(userId);
					defaultBillToId = userAddressId.get("Bill");
					defaultShipToId = userAddressId.get("Ship");
					HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
							defaultShipToId);
					billAddress = userAddress.get("Bill");
					billAddress.setOrderNotes(comments);
					billAddress.setReqDate(reqDate);
					if (userAddress.get("Ship") == null) {
						shipAddress = userAddress.get("Bill");
					} else {
						shipAddress = userAddress.get("Ship");
					}
					shipAddress.setOrderNotes(comments);
					shipAddress.setReqDate(reqDate);
					shipAddress.setPhoneNo(phoneNumber);
					billAddress.setSession(session);

					billEntityId = billAddress.getEntityId();
					shipEntityId = shipAddress.getEntityId();

					// buyingCompanyId
					String shipId = UsersDAO.getPunchoutShipTo(buyingCompanyId);
					if (!CommonUtility.validateString(shipId).isEmpty()
							&& !CommonUtility.validateString(shipId).equals("0")) {
						shipEntityId = shipId;
					}
					String ipaddress = request.getHeader("X-Forwarded-For");
					if (ipaddress == null) {
						ipaddress = request.getRemoteAddr();
					}
					UsersModel userDefaultAddress = new UsersModel();
					userDefaultAddress = shipAddress;
					int isPunchout = 0;
					if (session.getAttribute("isOciUser") != null) {
						isPunchout = (Integer) session.getAttribute("isOciUser");
					}
					for (int i = 0; i < PARTNUMARR.length; i++) {
						if (!PARTNUMARR[i].trim().equalsIgnoreCase("")) {
							ProductsModel nprDetail = null;
							counter++;
							if (counter == 1) {
								String sql = PropertyAction.SqlContainer.get("insertNewProduct");
								if (reqDate != null && !reqDate.trim().equalsIgnoreCase("")) {
									tempDate = reqDate.split("/");
									String reqDateTemp = tempDate[2] + "/" + tempDate[0] + "/" + tempDate[1];
									String temp = "TO_DATE('" + reqDateTemp + "','yyyy/mm/dd')";
									sql = sql.replace("REPLACESTRING", temp);
									userDefaultAddress.setReqDate(tempDate[0] + "/" + tempDate[1] + "/" + tempDate[2]);

								} else {
									sql = sql.replace("REPLACESTRING", "''");
								}

								nprId = CommonDBQuery.getSequenceId("NEW_PRODUCT_REQUEST_SEQ");

								pstmt = conn.prepareStatement(sql);
								String newProdName = "NPR" + seq;
								pstmt.setInt(1, nprId);
								pstmt.setString(2, newProdName);
								pstmt.setString(3, comments);
								pstmt.setInt(4, userId);
								count = pstmt.executeUpdate();
								ConnectionManager.closeDBPreparedStatement(pstmt);
								creditCardValue = null;
								orderId = 0;
								String homeBranchId = (String) session.getAttribute("homeBranchId");
								String homeBranchName = (String) session.getAttribute("homeBranchName");
								String shipBranchId = (String) session.getAttribute("shipBranchId");
								String shipBranchName = (String) session.getAttribute("shipBranchName");

								LinkedHashMap<String, Object> orderDetail = new LinkedHashMap<String, Object>();
								orderDetail.put("homeBranchId", homeBranchId);
								orderDetail.put("homeBranchName", homeBranchName);
								orderDetail.put("shipBranchId", shipBranchId);
								orderDetail.put("shipBranchName", shipBranchName);
								orderId = saveOrder(conn, userId, orderId, billAddress, shipAddress, "RFQ", taxExempt,
										referenceKey, "", "", "", "", "", ipaddress, creditCardValue,
										customerReleaseNumber, orderDetail);
							}
							String itemQty = ITEMQTYARR[i];
							if (CommonUtility.validateNumber(itemQty) == 0) {
								itemQty = "1";
							}
							String pattern = "[^A-Za-z0-9]";
							String partNumber = ProductHunterSolr.escapeQueryCulpritsWithoutWhiteSpace(PARTNUMARR[i]);
							// String scrubbedKeyword = partNumber.replaceAll(pattern,"");
							// partNumber = scrubbedKeyword;
							partNumber = "\"" + partNumber + "\"";

							String rfqSearchField = CommonUtility
									.validateString(CommonDBQuery.getSystemParamtersList().get("RFQ_SEARCH_FIELD"));

							ArrayList<ProductsModel> itemDetalsFromSOLR = null;
							itemDetalsFromSOLR = ProductHunterSolr.getItemDetailsForGivenPartNumbers(subsetId,
									generalSubset, CommonUtility.validateString(partNumber), 0, null, rfqSearchField);
							if (itemDetalsFromSOLR.size() > 0) {
								for (ProductsModel itmListSolr : itemDetalsFromSOLR) {
									if (CommonUtility.validateString(PARTNUMARR[i])
											.equalsIgnoreCase(CommonUtility.validateString(itmListSolr.getPartNumber()))
											|| CommonUtility.validateString(PARTNUMARR[i])
													.equalsIgnoreCase(CommonUtility
															.validateString(itmListSolr.getManufacturerPartNumber()))) {
										nprDetail = new ProductsModel();
										nprDetail = itmListSolr;
									}
								}
							}

							String lineItemComment = "";
							if (nprDetail == null) {
								nprDetail = new ProductsModel();
								if (CommonDBQuery.getSystemParamtersList().get("NewProductEnquiry") != null
										&& CommonDBQuery.getSystemParamtersList().get("NewProductEnquiry").trim()
												.equalsIgnoreCase("Y")) {
									nprDetail = new ProductsModel();
									nprDetail
											.setPartNumber(CommonDBQuery.getSystemParamtersList().get("RFQPartNumber"));
									nprDetail.setCustomerPartNumber(PARTNUMARR[i]);
									nprDetail.setItemId(CommonUtility
											.validateNumber(CommonDBQuery.getSystemParamtersList().get("RFQItemId")));
								} else {
									flag = false;
									result = result + PARTNUMARR[i]
											+ " was not found. Please try different Manufacturer Part Number<br/>";
								}
								lineItemComment = "1";
							}
							nprDetail.setQty(CommonUtility.validateNumber(itemQty));
							String desc = "";
							if (PARTNUMARR[i] != null && !PARTNUMARR[i].trim().equalsIgnoreCase(""))
								desc = PARTNUMARR[i] + " ";
							if (BRANDNAMEARR[i] != null && !BRANDNAMEARR[i].trim().equalsIgnoreCase(""))

								if (DESCARR[i] != null && !DESCARR[i].trim().equalsIgnoreCase("")) {
									desc = desc + DESCARR[i];
									nprDetail.setDescription(DESCARR[i]);
								}
							if (flag) {
								if (CommonUtility.validateString(lineItemComment).equalsIgnoreCase("1")) {
									lineItemComment = desc;
								}
								nprDetail.setShortDesc(desc);
								SalesDAO.saveNewProductItem(conn, nprId, PARTNUMARR[i], BRANDNAMEARR[i], DESCARR[i],
										CommonUtility.validateNumber(itemQty));
								saveOrderItems(conn, orderId, nprDetail.getItemId(),
										CommonUtility.validateNumber(itemQty), nprDetail.getPartNumber(), "", desc,
										nprDetail.getPrice(), "", "", "", lineItemComment, "", "", "", "");
								UserManagement userObj = new UserManagementImpl();
								UsersModel customerInfoInput = new UsersModel();
								customerInfoInput.setSession(session);
								userObj.checkERPConnection(customerInfoInput);
								String eclipsePartNumber = "";
								SalesDAO.updateNewProductItem(conn, count, eclipsePartNumber);
								itemDetailObject.add(nprDetail);
							}

						}
					}

					if (flag) {
						SalesModel eclipseOrderDetail = new SalesModel();
						String internalNote = "";
						internalNote = internalNote + "Contact Name : " + orderedBy;
						if (isPunchout > 0) {
							internalNote = internalNote + " ------ Shipto City : " + city;
							internalNote = internalNote + " ------ Shipto State: " + state;
						}

						internalNote = internalNote + " ------ Comments : " + comments;
						internalNote = internalNote + "------ Shipping Instructions :" + shippingInstruction;

						AddressModel selectedShipAddress = new AddressModel();
						selectedShipAddress.setAddress1(address1 != null ? address1 : shipAddress.getAddress1());
						selectedShipAddress.setAddress2(address2 != null ? address2 : shipAddress.getAddress2());
						selectedShipAddress.setCity(city != null ? city : shipAddress.getCity());
						selectedShipAddress.setState(state != null ? state : shipAddress.getState());
						selectedShipAddress.setZipCode(zipCode != null ? zipCode : shipAddress.getZipCode());
						selectedShipAddress.setCountry(country != null ? country : shipAddress.getCountry());
						selectedShipAddress.setPhoneNo(phoneNumber != null ? phoneNumber : shipAddress.getPhoneNo());

						SalesOrderManagementModel salesOrderInput = new SalesOrderManagementModel();
						salesOrderInput.setShipVia(shipVia);
						salesOrderInput.setShippingInstruction(internalNote);
						salesOrderInput.setOrderNotes(comments);
						salesOrderInput.setOrderedBy(orderedBy);
						salesOrderInput.setReqDate(reqDate);
						salesOrderInput.setSession(session);
						salesOrderInput.setOrderId(orderId);
						salesOrderInput.setBillEntityId(billEntityId);
						salesOrderInput.setShipEntityId(shipEntityId);
						salesOrderInput.setUserToken((String) session.getAttribute("userToken"));
						salesOrderInput.setShipAddress(selectedShipAddress);
						salesOrderInput
								.setBillAddress(Cimm2BCentralClient.getInstance().userModelToAddressModel(billAddress));
						salesOrderInput.setTaxExempt(taxExempt);
						salesOrderInput.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
						salesOrderInput.setCreditCardValue(creditCardValue);
						salesOrderInput.setPurchaseOrderNumber(poNumber);
						salesOrderInput.setSelectedBranch(selectedBranch);
						salesOrderInput.setNote("RFQ");
						salesOrderInput.setOrderType(CommonUtility.validateString(request.getParameter("orderType")));
						salesOrderInput.setOrderItems(itemDetailObject);
						UserManagement userObj = new UserManagementImpl();
						UsersModel customerInfoInput = new UsersModel();
						customerInfoInput.setSession(session);
						SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();
						eclipseOrderDetail = salesOrderSubmit.submitOrderToERP(salesOrderInput);
						if (session.getAttribute("shipViaMap") != null) {
							LinkedHashMap<String, String> shipViaMap = (LinkedHashMap<String, String>) session
									.getAttribute("shipViaMap");
							if (CommonUtility.validateString(shipVia).equalsIgnoreCase("Multiple")) {
								eclipseOrderDetail.setShipViaMethod(shipVia.toUpperCase());
							} else {
								eclipseOrderDetail.setShipViaMethod(shipViaMap.get(shipVia.toUpperCase()));
							}
						}

						if (eclipseOrderDetail != null) {
							if (eclipseOrderDetail.getReqDate() != null
									&& eclipseOrderDetail.getReqDate().trim().length() > 0) {
							} else {
								eclipseOrderDetail.setReqDate(reqDate);
							}
							if (eclipseOrderDetail.getOrderedBy() != null
									&& eclipseOrderDetail.getOrderedBy().trim().length() > 0) {
							} else {
								eclipseOrderDetail.setOrderedBy(orderedBy);
							}
							if (eclipseOrderDetail.getOrderNotes() != null
									&& eclipseOrderDetail.getOrderNotes().trim().length() > 0) {
							} else {
								eclipseOrderDetail.setOrderNotes(comments);
							}
							if (CommonUtility.validateString(eclipseOrderDetail.getErpOrderNumber()).length() > 0) {
								result = "0| Quote : #" + eclipseOrderDetail.getErpOrderNumber();
							} else {
								result = "1| RFQ Failed";
							}
							updateSalesOrder(conn, orderId, eclipseOrderDetail);
						} else {
							defaultOrderDetail.setReqDate(reqDate);
							defaultOrderDetail.setOrderNotes(comments);
							defaultOrderDetail.setOrderedBy(orderedBy);
							defaultOrderDetail.setStatusDescription("Successful");
							updateSalesOrder(conn, orderId, defaultOrderDetail);
						}
						SalesModel otherDetail = new SalesModel();
						otherDetail.setSession(session);
						count = SalesDAO.sendConfirmationMail(orderId, userId, 1, email, otherDetail);
					}

				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				ConnectionManager.closeDBPreparedStatement(pstmt);
				ConnectionManager.closeDBConnection(conn);
			}
			renderContent = result;
			return SUCCESS;
		} else {
			renderContent = "sessionexpired";
			return SUCCESS;
		}

	}

	public String quickOrderProcess() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		resultData = new ArrayList<ProductsModel>();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		String sessionId = session.getId();
		requestType = "quickOrder";
		if (request.getParameter("responseType") != null && request.getParameter("responseType").trim().length() > 0) {
			requestType = request.getParameter("responseType");
		}
		if (CommonUtility.validateString(request.getParameter("partNumberOnly")).length() > 0) {
			partNumberOnly = request.getParameter("partNumberOnly");
		}
		String tempBuyingCompany = (String) session.getAttribute("buyingCompanyId");
		int buyingCompanyId = CommonUtility.validateNumber(tempBuyingCompany);
		UserManagement userObj = new UserManagementImpl();
		UsersModel customerInfoInput = new UsersModel();
		customerInfoInput.setSession(session);
		userObj.checkERPConnection(customerInfoInput);
		String errorValue = "";
		boolean flag = false;
		String tempSubset = (String) session.getAttribute("userSubsetId");
		int subsetId = CommonUtility.validateNumber(tempSubset);
		String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
		int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
		int userId = CommonUtility.validateNumber(sessionUserId);
		String userToken = (String) session.getAttribute("userToken");
		String searchType = "";
		String entityId = (String) session.getAttribute("entityId");
		String homeTeritory = (String) session.getAttribute("shipBranchId");
		String wareHousecode = (String) session.getAttribute("wareHouseCode");
		String customerId = (String) session.getAttribute("customerId"); // 7932
		String customerCountry = (String) session.getAttribute("customerCountry");
		ArrayList<String> partIdentifier = new ArrayList<String>();
		ArrayList<Integer> partIdentifierQuantity = new ArrayList<Integer>();
		boolean addItemToCart = true;
		ArrayList<ProductsModel> cartItemList = new ArrayList<ProductsModel>();
		ProductsModel resultVal = null;
		boolean checkAvailability = false;
		boolean addZeroPriceItem = false;
		boolean restrictItem = false;
		LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
		LinkedHashMap<String, ArrayList<MarketBasketData>> searchListMap = new LinkedHashMap<String, ArrayList<MarketBasketData>>();
		ArrayList<MarketBasketData> rowSearchDetailList = new ArrayList<MarketBasketData>();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();

		try {

			if (MPN == null) {
				MPN = new String[ITEMQTYARR.length];
			}
			if (LINEITEMCMTARR == null) {
				LINEITEMCMTARR = new String[ITEMQTYARR.length];
			}

			int rowNum = 1;
			for (int i = 0; i < SELOPTARR.length; i++) {
				resultVal = new ProductsModel();
				// String getQtySql="SELECT CASE WHEN NVL(IP.MIN_ORDER_QTY,1) < 2 THEN
				// NVL(IM.MIN_ORDER_QTY,1) WHEN NVL(IP.MIN_ORDER_QTY,1) > 1 THEN
				// NVL(IP.MIN_ORDER_QTY,1) END MIN_ORDER_QTY, CASE WHEN
				// NVL(IP.ORDER_QTY_INTERVAL,1) < 2 THEN NVL(IM.ORDER_QTY_INTERVAL,1) WHEN
				// NVL(IP.ORDER_QTY_INTERVAL,1) > 1 THEN NVL(IP.ORDER_QTY_INTERVAL,1) END
				// ORDER_QTY_INTERVAL FROM ITEM_MASTER IM, ITEM_PRICES IP WHERE ";
				if (!PARTNUMARR[i].trim().equalsIgnoreCase("")) {
					// int count = 0;
					int qty = 1;
					if (!ITEMQTYARR[i].trim().equalsIgnoreCase(""))
						qty = CommonUtility.validateNumber(ITEMQTYARR[i]);

					ArrayList<Integer> cartId = new ArrayList<Integer>();

					switch (CommonUtility.validateNumber(SELOPTARR[i])) {
					case 1:
						searchType = "SEARCH-AS08";
						errorValue = LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("label.partnumber").trim();
						break;

					case 2:
						searchType = "SEARCH-AS01";
						errorValue = LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("label.customerpartnumber").trim();
						break;

					/*
					 * case 3: sql = sql + " UPPER(COMPETITOR_PART_NUMBER)=?"; sql1 = sql1 +
					 * " UPPER(COMPETITOR_PART_NUMBER)=?"; sqlAppend = sqlAppend +
					 * " UPPER(COMPETITOR_PART_NUMBER)=?)"; getQtySql =
					 * getQtySql+"COMPETITOR_PART_NUMBER=?"; errorValue = "Competitor Part Number";
					 * break;
					 */

					case 4:
						searchType = "SEARCH-AS07";
						String ph = "";
						if (MPN[i] != null && MPN[i].equalsIgnoreCase("-1")) {
							MPN[i] = "";
						}

						errorValue = LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("label.mfrpartnumber").trim();
						break;
					case 5:
						searchType = "SEARCH-AS10";

						errorValue = LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("label.upc").trim();
						break;

					default:
						searchType = "SEARCH";
						break;
					}
					boolean partialSearch = true;
					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("ENABLE_PARTIAL_SEARCH_IN_QUICK_ORDER"))
							.equalsIgnoreCase("Y")) {
						partialSearch = false;
					}
					HashMap<String, ArrayList<ProductsModel>> searchResult = ProductHunterSolr.searchNavigation(
							PARTNUMARR[i].toUpperCase(), subsetId, generalSubset, 0, 10, searchType, 0, 0, 0, 0, null,
							MPN[i], sessionId, null, 12, null, buyingCompanyId,
							(String) session.getAttribute(Global.USERNAME_KEY), userToken, entityId, userId,
							homeTeritory, searchType, wareHousecode, customerId, customerCountry, false, partialSearch,
							"", "", "");

					ArrayList<ProductsModel> itemList = searchResult.get("itemList");
					ArrayList<Integer> itemListId = new ArrayList<Integer>();
					LinkedHashMap<String, Double> priceCheckInERP = new LinkedHashMap<String, Double>();
					LinkedHashMap<String, String> itemRestrictCheckInERP = new LinkedHashMap<String, String>();
					LinkedHashMap<String, Integer> availCheckInERP = new LinkedHashMap<String, Integer>();
					if (itemList != null && itemList.size() > 0
							&& CommonUtility.validateString(session.getAttribute("userToken").toString()).length() > 0
							&& !CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ERP"))
									.equalsIgnoreCase("defaults")) {

						for (ProductsModel itemResult : itemList) {
							partIdentifierQuantity = new ArrayList<Integer>(); // Check for Norco
							partIdentifierQuantity.add(qty);
							if (itemResult.getQty() < 1) {
								itemResult.setQty(qty);
							}
							itemListId.add(itemResult.getItemId());
						}
						ProductManagement priceInquiry = new ProductManagementImpl();
						ProductManagementModel priceInquiryInput = new ProductManagementModel();
						priceInquiryInput.setEntityId(CommonUtility.validateString(entityId));
						priceInquiryInput.setHomeTerritory(homeTeritory);
						priceInquiryInput.setPartIdentifier(itemList);
						priceInquiryInput.setPartIdentifierQuantity(partIdentifierQuantity);
						priceInquiryInput.setRequiredAvailabilty("Y");
						priceInquiryInput.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
						priceInquiryInput.setUserToken((String) session.getAttribute("userToken"));
						priceInquiryInput.setSession(session);
						priceInquiryInput.setRequestFrom("QuickOrder");
						itemList = priceInquiry.priceInquiry(priceInquiryInput, itemList);

						if (CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("QUICK_ORDER_AVAIL_CHECK"))
								.equalsIgnoreCase("Y")) {
							checkAvailability = true;
						}
						if (CommonUtility
								.validateString(
										CommonDBQuery.getSystemParamtersList().get("QUICK_ORDER_ADD_ZERO_PRICE_ITEM"))
								.equalsIgnoreCase("Y")) {
							addZeroPriceItem = true;
						}
						for (ProductsModel model : itemList) {
							priceCheckInERP.put(model.getPartNumber().toUpperCase(), model.getTotal());
							if (CommonUtility.validateString(model.getRestrictiveProduct()).equalsIgnoreCase("Y")) {
								itemRestrictCheckInERP.put(model.getPartNumber().toUpperCase(),
										model.getRestrictiveProduct());
							}
							if (CommonDBQuery.getSystemParamtersList().get("MAX_PRIZE_TO_CART") != null
									&& CommonDBQuery.getSystemParamtersList().get("MAX_PRIZE_TO_CART").length() > 0) {
								double itemMaxPrice = Double
										.valueOf(CommonDBQuery.getSystemParamtersList().get("MAX_PRIZE_TO_CART"));
								if (model.getUnitPrice() >= itemMaxPrice) {
									itemRestrictCheckInERP.put(model.getPartNumber().toUpperCase(), "Y");
								}
							}
							if (checkAvailability) {
								availCheckInERP.put(model.getPartNumber(), model.getBranchTotalQty());
							}

						}
					}

					LinkedHashMap<String, Object> utilityMap = new LinkedHashMap<String, Object>();
					utilityMap.put("considerLineItemComment", true);

					if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
							.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
						customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(subsetId, generalSubset,
								StringUtils.join(itemListId, " OR "), "itemid");
					}

					if (itemList != null && itemList.size() > 0) {

						if (itemList.size() == 1) {

							ProductsModel cartItem = new ProductsModel();
							for (ProductsModel itemResult : itemList) {

								if (itemRestrictCheckInERP != null && CommonUtility
										.validateString(itemRestrictCheckInERP.get(itemResult.getPartNumber()))
										.equalsIgnoreCase("Y")) {
									restrictItem = true;
								} else {
									restrictItem = false;
								}
								if (!restrictItem) {
									int minOrderQty = itemResult.getMinOrderQty();// rs.getString("MIN_ORDER_QTY");
									int orderQtyIntr = itemResult.getOrderInterval();
									if (CommonUtility.validateNumber(ITEMQTYARR[i]) >= minOrderQty) {
										if (CommonUtility.validateNumber(ITEMQTYARR[i]) % orderQtyIntr == 0) {
											System.out.println("MinOrderQty and OrderQtyInterval is correct.");
											// session.setAttribute("newsLetter","N");

											cartItem.setItemId(itemResult.getItemId());
											cartItem.setQty(qty);
											cartItem.setItemPriceId(itemResult.getItemPriceId());
											cartItem.setPartNumber(PARTNUMARR[i].toUpperCase());
											cartItem.setLineItemComment(LINEITEMCMTARR[i]);

											resultVal = new ProductsModel();

											if (requestType != null && requestType.trim().equalsIgnoreCase("STD")) {
												cartId = ProductsDAO.selectFromCart(userId, cartItem.getItemId(), "");

												double priceCheck = priceCheckInERP
														.get(CommonUtility.validateString(itemResult.getPartNumber()));

												int availCheck = 0;
												if (CommonUtility
														.validateString(CommonDBQuery.getSystemParamtersList()
																.get("QUICK_ORDER_AVAIL_CHECK"))
														.equalsIgnoreCase("Y")) {
													availCheck = availCheckInERP.get(
															CommonUtility.validateString(itemResult.getPartNumber()));
												}
												boolean hasPrice = true;
												boolean hasAvailability = true;

												if (!addZeroPriceItem && priceCheck <= 0) {
													hasPrice = false;
												}
												if (checkAvailability && availCheck < 1) {
													hasAvailability = false;
												}
												if (hasPrice && hasAvailability) {
													if (cartId != null && cartId.size() > 0) {
														utilityMap.put("considerLineItemComment", false);
														ProductsDAO.updateCart(userId, cartId.get(0), cartItem.getQty(),
																cartId.get(1), "", "", utilityMap);
													} else {
														utilityMap.put("considerLineItemComment", true);
														// ProductsDAO.insertItemToCart(userId, cartItem.getItemId(),
														// cartItem.getQty(),
														// sessionId+".QUICKCART",cartItem.getLineItemComment(),"","",CommonUtility.validateParseDoubleToString(priceCheck),0,
														// 0, 0);
														ProductsDAO.insertItemToCart(userId, cartItem.getItemId(),
																cartItem.getQty(), sessionId,
																cartItem.getLineItemComment(), "", "",
																CommonUtility.validateParseDoubleToString(priceCheck),
																0, 0, 0, utilityMap);
													}
													resultVal.setShortDesc("was successfully added to your cart.");
												} else {
													if (!hasPrice)
														resultVal.setShortDesc(CommonUtility
																.validateString(LayoutLoader.getMessageProperties()
																		.get(session.getAttribute("localeCode")
																				.toString().toUpperCase())
																		.getProperty("quickorder.lable.hasnoprice")));
													if (!hasAvailability)
														resultVal.setShortDesc(CommonUtility.validateString(LayoutLoader
																.getMessageProperties()
																.get(session.getAttribute("localeCode").toString()
																		.toUpperCase())
																.getProperty("quickorder.lable.hasnoavailability")));
												}
												resultVal.setPartNumber(cartItem.getPartNumber());
												resultVal.setItemId(cartItem.getItemId());

												if (customFieldVal != null && !customFieldVal.isEmpty()) {
													LinkedHashMap<String, Object> customValue = customFieldVal
															.get(itemResult.getItemId());
													if (customValue != null
															&& customValue.get("custom_PART_NUMBER_EDUP") != null) {
														resultVal.setAltPartNumber1(CommonUtility.validateString(
																customValue.get("custom_PART_NUMBER_EDUP").toString()));
													}
												}
											} else {

												double priceCheck = priceCheckInERP.get(cartItem.getPartNumber());
												int availCheck = 0;
												if (CommonUtility
														.validateString(CommonDBQuery.getSystemParamtersList()
																.get("QUICK_ORDER_AVAIL_CHECK"))
														.equalsIgnoreCase("Y")) {
													availCheck = availCheckInERP.get(cartItem.getPartNumber());
												}
												boolean hasPrice = true;
												boolean hasAvailability = true;

												if (priceCheck <= 0)
													hasPrice = false;
												if (checkAvailability && availCheck < 1) {
													hasAvailability = false;
												}

												if (hasPrice && hasAvailability) {
													if (cartId != null && cartId.size() > 0) {
														utilityMap.put("considerLineItemComment", false);
														ProductsDAO.updateCart(userId, cartId.get(0), cartItem.getQty(),
																cartId.get(1), "", "", utilityMap);
													} else {
														utilityMap.put("considerLineItemComment", true);
														// ProductsDAO.insertItemToCart(userId, cartItem.getItemId(),
														// cartItem.getQty(),
														// sessionId+".QUICKCART",cartItem.getLineItemComment(),"","",CommonUtility.validateParseDoubleToString(priceCheck),0,
														// 0.0, 0.0);
														ProductsDAO.insertItemToCart(userId, cartItem.getItemId(),
																cartItem.getQty(), sessionId,
																cartItem.getLineItemComment(), "", "",
																CommonUtility.validateParseDoubleToString(priceCheck),
																0, 0.0, 0.0, utilityMap);
													}
													resultVal.setShortDesc("was successfully added to your cart.");
												} else {
													if (!hasPrice) {
														resultVal.setShortDesc(CommonUtility
																.validateString(LayoutLoader.getMessageProperties()
																		.get(session.getAttribute("localeCode")
																				.toString().toUpperCase())
																		.getProperty("quickorder.lable.hasnoprice")));
													}
													if (!hasAvailability) {
														resultVal.setShortDesc(CommonUtility.validateString(LayoutLoader
																.getMessageProperties()
																.get(session.getAttribute("localeCode").toString()
																		.toUpperCase())
																.getProperty("quickorder.lable.hasnoavailability")));
													}
												}
												resultVal.setPartNumber(cartItem.getPartNumber());
												resultVal.setItemId(cartItem.getItemId());
											}
											flag = true;
										} else {

											addItemToCart = false;
											resultVal.setPartNumber(PARTNUMARR[i]);
											resultVal.setItemId(0);
											resultVal.setShortDesc(
													" - The Quantity must be the multiple of " + orderQtyIntr);
											System.out.println("OrderQtyInterval is incorrect.");
										}
									} else {
										addItemToCart = false;
										resultVal.setPartNumber(PARTNUMARR[i]);
										resultVal.setItemId(0);
										resultVal.setShortDesc(" - The Minimum Order Quantity must be " + minOrderQty);
										System.out.println("MinOrderQty is incorrect.");
									}

								} else {

									if (CommonDBQuery.getSystemParamtersList().get("MAX_PRIZE_TO_CART") != null
											&& CommonDBQuery.getSystemParamtersList().get("MAX_PRIZE_TO_CART")
													.length() > 0) {
										double itemMaxPrice = Double.valueOf(
												CommonDBQuery.getSystemParamtersList().get("MAX_PRIZE_TO_CART"));
										if (itemResult.getUnitPrice() >= itemMaxPrice) {

											addItemToCart = false;
											resultVal.setPartNumber(PARTNUMARR[i]);
											resultVal.setItemId(0);
											resultVal.setShortDesc(LayoutLoader.getMessageProperties()
													.get(session.getAttribute("localeCode").toString().toUpperCase())
													.getProperty("label.maxPriceItem").trim());
											System.out.println("Max price to add to cart");
										}
									} else {
										addItemToCart = false;
										resultVal.setPartNumber(PARTNUMARR[i]);
										resultVal.setItemId(0);
										resultVal.setShortDesc(" - Product Not Available ");
										System.out.println("Product Not Available flag true from ERP.");
									}
								}

							}

						} else {
							addItemToCart = false;
							resultVal.setPartNumber(PARTNUMARR[i]);
							resultVal.setItemId(0);

							if (CommonUtility
									.validateString(CommonDBQuery.getSystemParamtersList()
											.get("QUICK_ORDER_RESULTS_TO_FILE_UPLOAD_RESULT_PAGE"))
									.equalsIgnoreCase("Y")) {
								String searchTypes = "Key_word";
								rowSearchDetailList = new ArrayList<MarketBasketData>();
								MarketBasketData marketBasketData = new MarketBasketData();
								marketBasketData.setDuplicate(false);
								marketBasketData.setLineItemComment("");
								marketBasketData.setUserQuantity(qty);
								marketBasketData.setSearchType(searchTypes);
								marketBasketData.setSearchKeyWord(PARTNUMARR[i]);
								marketBasketData.setRowNum(rowNum);
								marketBasketData.setDuplicateItemRows("");
								marketBasketData
										.setIndex(CommonUtility.validateString("" + (rowSearchDetailList.size())));
								rowSearchDetailList.add(marketBasketData);
								searchListMap.put(CommonUtility.validateString("" + rowNum), rowSearchDetailList);
								rowNum++;
							}

							String displayString = "has multiple results. <a href='/searchPage.action?keyWord="
									+ PARTNUMARR[i] + "'>Click here</a> to see all Items";
							String MobileResult = "has multiple results. <a href='/searchPage.action?keyWord="
									+ PARTNUMARR[i] + "'>Click here</a> to see all Items";

							if (!CommonUtility.validateString(
									CommonDBQuery.getSystemParamtersList().get("DISPLAY_RESULTIN_QUICK_ORDER_RESULT"))
									.equalsIgnoreCase("N")) {
								StringBuilder hiddenField = new StringBuilder();
								for (ProductsModel itemResultMore : itemList) {
									itemResultMore.getPartNumber();
									String addTOCart = "";
									if (itemResultMore.getTotal() > 0) {
										addTOCart = "<a href='javascript:void(0);' class='buttonGrad addToCart' id='enableCart_'"
												+ itemResultMore.getPartNumber().replaceAll("\\ ", "_")
												+ "' data-itemId='" + itemResultMore.getItemId()
												+ "' data-itemPriceId='" + itemResultMore.getItemPriceId()
												+ "'> Select </a></div>";
									} else {
										addTOCart = "<a href='javascript:void(0);' class='buttonGrad btns-disable' id='enableCart_'"
												+ itemResultMore.getPartNumber().replaceAll("\\ ", "_")
												+ "' data-itemId='" + itemResultMore.getItemId()
												+ "' data-itemPriceId='" + itemResultMore.getItemPriceId()
												+ "'> Select </a></div>";
									}
									hiddenField = new StringBuilder();
									hiddenField.append("<input type='hidden' value='"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_")
											+ "' name='idListPrice'/>");
									hiddenField.append("<input type='hidden' id='priceSaleQty_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "' value='"
											+ itemResultMore.getSaleQty() + "'/>");
									hiddenField.append("<input type='hidden' id='uomValue_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "' value='"
											+ itemResultMore.getUom() + "'/>");
									hiddenField.append("<input type='hidden' id='priceValue_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "' value='"
											+ itemResultMore.getPrice() + "'/>");
									hiddenField.append("<input type='hidden' id='salesQtyVal_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "' value='"
											+ itemResultMore.getSaleQty() + "'/>");
									hiddenField.append("<input type='hidden' id='tempItemId_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "' value='"
											+ itemResultMore.getItemId() + "'/>");
									hiddenField.append(
											"<input type='hidden' id='itmId_" + itemResultMore.getItemId() + "' value='"
													+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "'/>");
									hiddenField.append("<input type='hidden' id='packageQty_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "' value='"
											+ itemResultMore.getPackageQty() + "'/>");
									hiddenField.append("<input type='hidden' id='itemPriceID_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_")
											+ "' name='itemPriceID_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "' value='"
											+ itemResultMore.getItemPriceId() + "'/>");
									hiddenField.append("<input type='hidden' id='itemTxtSXAvail"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_")
											+ "' name='itemTxtSXAvail"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "' value='"
											+ itemResultMore.getAvailQty() + "'/>");
									hiddenField.append(
											"<input type='hidden' id='itemTxtAvail$itemId' name='itemTxtAvail$itemId' value='"
													+ itemResultMore.getAvailQty() + "'/>");
									hiddenField.append("<input type='hidden' id='priceSaleQty_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_")
											+ "' name='priceSaleQty_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "' value='"
											+ itemResultMore.getSaleQty() + "' />");
									hiddenField.append(
											"<input type='hidden' id='navigationType' name='navigationType' value='$navigationType' />");
									hiddenField.append(
											"<input type='hidden' value='$!srchTyp' id='searchType' name='searchType'/>");
									if (itemResultMore.getMinOrderQty() > 0) {
										hiddenField.append(
												"<input type='hidden' name='itemTxtQty" + itemResultMore.getItemId()
														+ "' value='" + itemResultMore.getMinOrderQty()
														+ "' id='itemTxtQty" + itemResultMore.getItemId() + "'/>");
									} else {
										hiddenField.append(
												"<input type='hidden' name='itemTxtQty" + itemResultMore.getItemId()
														+ "' value='" + itemResultMore.getMinOrderQty()
														+ "' id='itemTxtQty" + itemResultMore.getItemId() + "'/>");
									}

									hiddenField.append("<input type='hidden' id='avail_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "' name='avail_"
											+ itemResultMore.getPartNumber().replaceAll("\\ ", "_") + "'/>");
									hiddenField.append("<p id='itemShortDesc" + itemResultMore.getItemId() + "'>"
											+ itemResultMore.getShortDesc() + "</p>");

									if (CommonUtility.validateString(itemResultMore.getImageName()).length() > 0) {
										if (itemResultMore.getImageName().contains("http")) {
											hiddenField.append("<img id='imageName" + itemResultMore.getItemId()
													+ "' src='" + itemResultMore.getImageName() + "' title='"
													+ itemResultMore.getShortDesc() + "' onerror=\"this.src='"
													+ CommonDBQuery.getSystemParamtersList().get("WEB_ADDRESS")
													+ CommonUtility.validateString(
															CommonDBQuery.getSystemParamtersList().get("WEB_THEMES"))
													+ CommonDBQuery.getSystemParamtersList().get("SITE_NAME")
													+ "/images/NoImage.png';\" style='display:none;'/>");
										} else {
											hiddenField.append("<img id='imageName" + itemResultMore.getItemId()
													+ "' src='"
													+ CommonDBQuery.getSystemParamtersList().get("WEB_ADDRESS")
													+ CommonUtility.validateString(
															CommonDBQuery.getSystemParamtersList().get("DETAILIMAGE"))
													+ itemResultMore.getImageName() + "' title='"
													+ itemResultMore.getShortDesc() + "' onerror=\"this.src='"
													+ CommonDBQuery.getSystemParamtersList().get("WEB_ADDRESS")
													+ CommonUtility.validateString(
															CommonDBQuery.getSystemParamtersList().get("WEB_THEMES"))
													+ CommonDBQuery.getSystemParamtersList().get("SITE_NAME")
													+ "/images/NoImage.png';\" style='display:none;'/>");
										}
									} else {
										hiddenField.append("<img id='imageName" + itemResultMore.getItemId() + "' src='"
												+ itemResultMore.getImageName() + "' title='"
												+ itemResultMore.getShortDesc() + "' onerror=\"this.src='"
												+ CommonDBQuery.getSystemParamtersList().get("WEB_ADDRESS")
												+ CommonUtility.validateString(
														CommonDBQuery.getSystemParamtersList().get("WEB_THEMES"))
												+ CommonDBQuery.getSystemParamtersList().get("SITE_NAME")
												+ "/images/NoImage.png';\" style='display:none;'/>");
									}
									if (customFieldVal != null && customFieldVal.size() > 0) {
										LinkedHashMap<String, Object> customValue = customFieldVal
												.get(itemResultMore.getItemId());
										hiddenField.append("<input type='hidden' id='cannotAddToCart_"
												+ itemResultMore.getItemId() + "' value='"
												+ customValue.get("custom_CANNOT_ADD_TO_CART") + "'/>");
										hiddenField.append(
												"<input type='hidden' id='hazmatItem_" + itemResultMore.getItemId()
														+ "' value='" + customValue.get("custom_HAZARDOUS") + "'/>");
										hiddenField.append(
												"<input type='hidden' id='overSizeItem_" + itemResultMore.getItemId()
														+ "' value='" + customValue.get("custom_HEAVY") + "'/>");
										hiddenField.append("<input type='hidden' id='crossOutPrice_"
												+ itemResultMore.getItemId() + "' value='"
												+ customValue.get("custom_CROSS_OUT_PRICE") + "'/>");
										hiddenField.append(
												"<input type='hidden' id='promoPrice_" + itemResultMore.getItemId()
														+ "' value='" + customValue.get("custom_PROMO_PRICE") + "'/>");
										hiddenField.append("<input type='hidden' id='batteryWithoutAcid_"
												+ itemResultMore.getItemId() + "' value='"
												+ customValue.get("custom_BATTERY_WITHOUT_ACID") + "'/>");
										hiddenField.append("<input type='hidden' id='storePickupOnly_"
												+ itemResultMore.getItemId() + "' value='"
												+ customValue.get("custom_STORE_PICKUP_ONLY") + "'/>");
										hiddenField.append("<input type='hidden' id='promotionText_"
												+ itemResultMore.getItemId() + "' value='"
												+ customValue.get("custom_PROMOTION_TEXT") + "'/>");
										hiddenField.append(
												"<input type='hidden' id='showPrice_" + itemResultMore.getItemId()
														+ "' value='" + customValue.get("custom_SHOW_PRICE") + "'/>");
									}
									MobileResult = MobileResult + "~" + itemResultMore.getItemId() + "~"
											+ itemResultMore.getItemPriceId() + "~" + itemResultMore.getPartNumber()
											+ "~" + itemResultMore.getShortDesc();
									if (CommonUtility.validateString(partNumberOnly).equalsIgnoreCase("Y")) {
										displayString = displayString
												+ "<div class='qickCartSelectDiv'><span class='qickCartSelect'> Part Number: "
												+ itemResultMore.getPartNumber()
												+ " </span><span class='qickCartAddtocart'> " + addTOCart + "</span>"
												+ hiddenField.toString() + "<div class='clear'></div><div>";
									} else {
										displayString = displayString
												+ "<div class='qickCartSelectDiv'><span class='qickCartSelect'> Part Number: "
												+ itemResultMore.getPartNumber()
												+ " </span><span class='qickCartSelectShortDesc'>"
												+ itemResultMore.getShortDesc()
												+ "</span><span class='qickCartAddtocart'> " + addTOCart + "</span>"
												+ hiddenField.toString() + "<div class='clear'></div><div>";
									}
								}
							}
							String requestFrom = (String) session.getAttribute("browseType");
							if (CommonUtility.validateString(requestFrom).equalsIgnoreCase("Mobile")) {
								resultVal.setShortDesc(MobileResult);
							} else {
								resultVal.setShortDesc(displayString);
							}

							if (MPN[i] != null && !MPN[i].trim().equalsIgnoreCase("")
									&& CommonUtility.validateNumber(SELOPTARR[i]) == 4) {
								errorValue = LayoutLoader.getMessageProperties()
										.get(session.getAttribute("localeCode").toString().toUpperCase())
										.getProperty("label.brandname").trim();
							}

						}

					} else {
						addItemToCart = false;
						resultVal.setPartNumber(PARTNUMARR[i]);
						resultVal.setItemId(0);

						if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList()
								.get("QUICK_ORDER_RESULTS_TO_FILE_UPLOAD_RESULT_PAGE")).equalsIgnoreCase("Y")) {
							String searchTypes = "Key_word";
							rowSearchDetailList = new ArrayList<MarketBasketData>();
							MarketBasketData marketBasketData = new MarketBasketData();
							marketBasketData.setDuplicate(false);
							marketBasketData.setLineItemComment("");
							marketBasketData.setUserQuantity(qty);
							marketBasketData.setSearchType(searchTypes);
							marketBasketData.setSearchKeyWord(PARTNUMARR[i]);
							marketBasketData.setRowNum(rowNum);
							marketBasketData.setDuplicateItemRows("");
							marketBasketData.setIndex(CommonUtility.validateString("" + (rowSearchDetailList.size())));
							rowSearchDetailList.add(marketBasketData);
							searchListMap.put(CommonUtility.validateString("" + rowNum), rowSearchDetailList);
							rowNum++;
						}

						if (MPN[i] != null && !MPN[i].trim().equalsIgnoreCase("")
								&& CommonUtility.validateNumber(SELOPTARR[i]) == 4) {
							errorValue = LayoutLoader.getMessageProperties()
									.get(session.getAttribute("localeCode").toString().toUpperCase())
									.getProperty("label.brandname").trim();
						}
						// resultVal.setShortDesc("is not a valid "+errorValue+". Please try a different
						// "+errorValue+".");
						resultVal.setShortDesc("is not a valid " + errorValue + " and Qty is " + qty
								+ ". Please try a different " + errorValue + ".");
					}
					resultVal.setRequestType(requestType);
					resultData.add(resultVal);
				}
			}

			if (flag) {
				shoppingCartCount = ProductsDAO.getCartCount(userId, subsetId, generalSubset);
			}

			if (searchListMap != null && searchListMap.size() > 0 && CommonUtility.validateString(
					CommonDBQuery.getSystemParamtersList().get("QUICK_ORDER_RESULTS_TO_FILE_UPLOAD_RESULT_PAGE"))
					.equalsIgnoreCase("Y")) {
				session.setAttribute("searchListMap", searchListMap);
				session.setAttribute("lastRowNum", searchListMap.size());
				session.setAttribute("colCnt", Integer.toString(CommonUtility
						.validateNumber(CommonDBQuery.getSystemParamtersList().get("XLSFILE_COLUMN_SIZE"))));
				session.setAttribute("MarketBasketErrorMsg", "No Duplicate");
				session.setAttribute("InvalidPartList", "NO");
				contentObject.put("redirectToFileUploadResult", "Y");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		contentObject.put("responseType", requestType);
		contentObject.put("resultData", resultData);
		contentObject.put("shoppingCartCount", shoppingCartCount);
		for (int k = 0; k < resultData.size(); k++) {
			System.out.println(resultData.get(k).getPartNumber() + " :" + resultData.get(k).getShortDesc() + " :"
					+ resultData.get(k).getRequestType());
		}

		renderContent = LayoutGenerator.templateLoader("ResultLoaderPage", contentObject, null, null, null);
		return SUCCESS;
	}

	public String quickOrderProcessOld() {
		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		resultData = new ArrayList<ProductsModel>();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		String sessionId = session.getId();
		requestType = "quickOrder";
		if (request.getParameter("responseType") != null && request.getParameter("responseType").trim().length() > 0) {
			requestType = request.getParameter("responseType");
		}

		LinkedHashMap<String, Object> utilityMap = new LinkedHashMap<String, Object>();
		utilityMap.put("considerLineItemComment", true);

		UserManagement userObj = new UserManagementImpl();
		UsersModel customerInfoInput = new UsersModel();
		customerInfoInput.setSession(session);
		userObj.checkERPConnection(customerInfoInput);
		String errorValue = "";
		boolean flag = false;
		String tempSubset = (String) session.getAttribute("userSubsetId");
		int subsetId = CommonUtility.validateNumber(tempSubset);
		String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
		int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);

		int userId = CommonUtility.validateNumber(sessionUserId);
		try {
			conn = ConnectionManager.getDBConnection();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			String sql = "";
			String sql1 = "";
			String sqlAppend = "";

			if (LINEITEMCMTARR == null) {
				LINEITEMCMTARR = new String[ITEMQTYARR.length];
			}

			for (int i = 0; i < SELOPTARR.length; i++) {
				String getQtySql = "SELECT  CASE WHEN NVL(IP.MIN_ORDER_QTY,1) < 2 THEN   NVL(IM.MIN_ORDER_QTY,1) WHEN NVL(IP.MIN_ORDER_QTY,1) > 1 THEN  NVL(IP.MIN_ORDER_QTY,1) END MIN_ORDER_QTY, CASE WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2 THEN   NVL(IM.ORDER_QTY_INTERVAL,1) WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1 THEN   NVL(IP.ORDER_QTY_INTERVAL,1) END ORDER_QTY_INTERVAL FROM ITEM_MASTER IM, ITEM_PRICES IP WHERE ";
				if (!PARTNUMARR[i].trim().equalsIgnoreCase("")) {
					int count = 0;
					int qty = 1;
					if (!ITEMQTYARR[i].trim().equalsIgnoreCase(""))
						qty = CommonUtility.validateNumber(ITEMQTYARR[i]);

					ArrayList<Integer> cartId = new ArrayList<Integer>();
					sql = PropertyAction.SqlContainer.get("quickOrderQuery");
					sql1 = PropertyAction.SqlContainer.get("quickOrderQuery1");
					sqlAppend = PropertyAction.SqlContainer.get("quickOrderQueryAppend");

					ProductsModel resultVal = new ProductsModel();
					switch (CommonUtility.validateNumber(SELOPTARR[i])) {
					case 1:
						sql = sql + " PART_NUMBER=?";
						sql1 = sql1 + " PART_NUMBER=?";
						sqlAppend = sqlAppend + " PART_NUMBER=?)";
						getQtySql = getQtySql + " PART_NUMBER=?";
						errorValue = "Part Number";
						break;

					case 2:
						sql = sql + " UPPER(CUSTOMER_PART_NUMBER)=?";
						sql1 = sql1 + " UPPER(CUSTOMER_PART_NUMBER)=?";
						sqlAppend = sqlAppend + " UPPER(CUSTOMER_PART_NUMBER)=?)";
						getQtySql = getQtySql + "CUSTOMER_PART_NUMBER=?";
						errorValue = LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("label.partnumber").trim();
						break;

					case 3:
						sql = sql + " UPPER(COMPETITOR_PART_NUMBER)=?";
						sql1 = sql1 + " UPPER(COMPETITOR_PART_NUMBER)=?";
						sqlAppend = sqlAppend + " UPPER(COMPETITOR_PART_NUMBER)=?)";
						getQtySql = getQtySql + "COMPETITOR_PART_NUMBER=?";
						errorValue = "Competitor Part Number";
						break;

					case 4:
						String ph = "";
						if (MPN[i] != null && !MPN[i].equalsIgnoreCase("-1")) {
							ph = " AND MANUFACTURER_ID='" + MPN[i] + "'";
						}
						sql = sql + " UPPER(MANUFACTURER_PART_NUMBER)=?" + ph;
						sql1 = sql1 + " UPPER(MANUFACTURER_PART_NUMBER)=?" + ph;
						sqlAppend = sqlAppend + " UPPER(MANUFACTURER_PART_NUMBER)=?)";
						getQtySql = getQtySql + " MANUFACTURER_PART_NUMBER=?";
						errorValue = "Manufacturer Part Number";
						break;
					case 5:
						sql = sql + " UPC=?";
						sql1 = sql1 + " UPC=?";
						sqlAppend = sqlAppend + " UPC=?)";
						getQtySql = getQtySql + "UPC=?";
						errorValue = "UPC";
						break;
					}

					getQtySql = getQtySql + " AND IP.SUBSET_ID = ? AND IP.ITEM_ID=IM.ITEM_ID";
					ConnectionManager.closeDBPreparedStatement(pstmt);
					pstmt = conn.prepareStatement(getQtySql);
					pstmt.setString(1, PARTNUMARR[i].trim().toUpperCase());
					pstmt.setInt(2, subsetId);
					rs = pstmt.executeQuery();
					session.setAttribute("newsLetter", "N");
					while (rs.next()) {
						String minOrderQty = rs.getString("MIN_ORDER_QTY");
						String orderQtyIntr = rs.getString("ORDER_QTY_INTERVAL");
						if (CommonUtility.validateNumber(ITEMQTYARR[i]) >= CommonUtility.validateNumber(minOrderQty)) {
							if (CommonUtility.validateNumber(ITEMQTYARR[i])
									% CommonUtility.validateNumber(orderQtyIntr) == 0) {
								System.out.println("MinOrderQty and OrderQtyInterval is correct.");
								// session.setAttribute("newsLetter","N");

								ResultSet rsNew = null;
								if (generalSubset > 0) {
									sql = sql + " union " + sql1 + " " + sqlAppend;
									ConnectionManager.closeDBPreparedStatement(pstmt);
									pstmt = conn.prepareStatement(sql);
									System.out.println("Quick Cart Form Submit Query" + sql);
									pstmt.setInt(1, subsetId);
									pstmt.setString(2, PARTNUMARR[i].toUpperCase());
									pstmt.setInt(3, generalSubset);
									pstmt.setString(4, PARTNUMARR[i].toUpperCase());
									pstmt.setInt(5, subsetId);
									pstmt.setString(6, PARTNUMARR[i].toUpperCase());
									rsNew = pstmt.executeQuery();
								} else {
									pstmt = conn.prepareStatement(sql);
									System.out.println("Quick Cart Form Submit Query" + sql);
									pstmt.setInt(1, subsetId);
									pstmt.setString(2, PARTNUMARR[i].toUpperCase());
									rsNew = pstmt.executeQuery();
								}

								if (rsNew.next()) {

									if (requestType != null && requestType.trim().equalsIgnoreCase("STD")) {
										cartId = ProductsDAO.selectFromCart(userId, rsNew.getInt("ITEM_ID"), "");
										if (cartId != null && cartId.size() > 0) {
											count = ProductsDAO.updateCart(userId, cartId.get(0), qty, cartId.get(1),
													LINEITEMCMTARR[i], "", utilityMap);
										} else {
											count = ProductsDAO.insertItemToCart(userId, rsNew.getInt("ITEM_ID"), qty,
													sessionId, LINEITEMCMTARR[i], "", "", "", 0, 0.0, 0.0, utilityMap);
										}
										System.out.println("PARTNUMARR[i] : " + i + " : " + PARTNUMARR[i]);
										resultVal.setPartNumber(PARTNUMARR[i]);
										resultVal.setItemId(1);
										resultVal.setShortDesc("added successfully to cart.");
									} else {
										// count = ProductsDAO.insertItemToCart(userId, rsNew.getInt("ITEM_ID"), qty,
										// sessionId+".QUICKCART",LINEITEMCMTARR[i],"","","",0, 0.0, 0.0);
										count = ProductsDAO.insertItemToCart(userId, rsNew.getInt("ITEM_ID"), qty,
												sessionId, LINEITEMCMTARR[i], "", "", "", 0, 0.0, 0.0, utilityMap);
										resultVal.setPartNumber(PARTNUMARR[i]);
										resultVal.setItemId(1);
										resultVal.setShortDesc("found successfully.");
									}

									flag = true;
								} else {
									resultVal.setPartNumber(PARTNUMARR[i]);
									resultVal.setItemId(0);
									resultVal.setShortDesc("was not found in " + errorValue
											+ ". Please try a different " + errorValue + ".");
								}
								ConnectionManager.closeDBResultSet(rsNew);
							} else {
								resultVal.setPartNumber(PARTNUMARR[i]);
								resultVal.setItemId(0);
								resultVal.setShortDesc(" - The Quantity must be the multiple of " + orderQtyIntr);
								System.out.println("OrderQtyInterval is incorrect.");
							}
						} else {
							resultVal.setPartNumber(PARTNUMARR[i]);
							resultVal.setItemId(0);
							resultVal.setShortDesc(" - The Minimum Order Quantity must be " + minOrderQty);
							System.out.println("MinOrderQty is incorrect.");
						}

					}

					if (resultVal.getShortDesc() == null) {
						resultVal.setPartNumber(PARTNUMARR[i]);
						resultVal.setItemId(0);
						resultVal.setShortDesc("was not found. Please try a different " + errorValue + ".");
					}
					ConnectionManager.closeDBResultSet(rs);
					ConnectionManager.closeDBPreparedStatement(pstmt);

					resultVal.setRequestType(requestType);
					resultData.add(resultVal);
				}

			}

			if (flag)
				shoppingCartCount = ProductsDAO.getCartCount(userId, subsetId, generalSubset);

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBConnection(conn);
		}
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		contentObject.put("responseType", requestType);
		contentObject.put("resultData", resultData);
		contentObject.put("shoppingCartCount", shoppingCartCount);
		for (int k = 0; k < resultData.size(); k++) {
			System.out.println(resultData.get(k).getPartNumber() + " :" + resultData.get(k).getShortDesc() + " :"
					+ resultData.get(k).getRequestType());
		}

		renderContent = LayoutGenerator.templateLoader("ResultLoaderPage", contentObject, null, null, null);
		return SUCCESS;
	}

	public String confirmOrder() {
		long startTimer = CommonUtility.startTimeDispaly();
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		String wareHousecode = (String) session.getAttribute("wareHouseCode");
		String customerId = (String) session.getAttribute("customerId"); // 7932
		String orderType = request.getParameter("orderType");
		String customerCountry = (String) session.getAttribute("customerCountry");
		String userEmailAddress = (String) session.getAttribute("userEmailAddress");
		String userOfficePhone = (String) session.getAttribute("userOfficePhone");
		String itemleveShipDisplay = "";
		String POOverride = request.getParameter("POOverride");
		String discountValue = (String) session.getAttribute("discountValueToERP");
		String discountType = (String) session.getAttribute("discountType");
		String buyingCompanyId = (String) session.getAttribute("buyingCompanyId");
		ArrayList<UsersModel> orderStatusList = new ArrayList<UsersModel>();
		int userId = CommonUtility.validateNumber(sessionUserId);
		LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();
		String reqApprType = (String) request.getParameter("reqType");
		String checkOutPaymentType = CommonUtility.validateString((String) request.getParameter("checkOutPaymentType"));
		double taxFromErp = 0.0;
		String calculateTax = request.getParameter("calculateTax");
		String customParameter = "";
		List<Discount> appliedlDiscounts = new ArrayList<Discount>();
		double orderItemsDiscountVal = 0.0D;
		double orderDiscountVal = 0.0D;
		double totalSavingOnOrder = 0.0D;
		String discountAvailed = "no";
		String freeShipping = "no";
		String idList = "";
		String erpUserContactID = "";
		Collection<String> appliedCouponsArray = new ArrayList<String>();
		if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("DEFUALT_CONTACT_ID"))
				.length() > 0) {
			erpUserContactID = CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("DEFUALT_CONTACT_ID"));
		} else {
			erpUserContactID = CommonUtility.validateString(UsersDAO.getContactID(userId));
		}
		ArrayList<String> invalidCoupons = new ArrayList<String>();

		String shipToWareshouseCode = CommonUtility.validateString(request.getParameter("shipToWareshouseCode"));
		if (shipToWareshouseCode.length() > 0) {
			String networkWarehouse = null;
			try {
				// CustomServiceProvider
				if (CommonUtility.customServiceUtility() != null) {
					networkWarehouse = CommonUtility.customServiceUtility()
							.getNetworkWarehouseCode(CommonUtility.validateString(shipToWareshouseCode));
				}
				// CustomServiceProvider
				if (networkWarehouse != null) {
					wareHousecode = CommonUtility.validateString(networkWarehouse).trim();
				} else {
					wareHousecode = shipToWareshouseCode;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		String freightMessage = "";
		try {

			if (userId > 1) {
				session.removeAttribute("taxFromSFOEOrderTotLoadV2");
				String tempSubset = (String) session.getAttribute("userSubsetId");
				String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
				String tempdefaultShipId = request.getParameter("defaultShipToId");
				String tempEntityId = request.getParameter("entityId");
				String userToken = (String) session.getAttribute("userToken");
				if (session != null && session.getAttribute("orderStatusList") != null) {
					orderStatusList = (ArrayList<UsersModel>) session.getAttribute("orderStatusList");
				}
				int subsetId = CommonUtility.validateNumber(tempSubset);
				ccTransactionId = request.getParameter("ccTransactionId");

				String overRideShipEmail = "";
				String defaultShiptoId = "0";

				if (session.getAttribute("assignedShipTo") != null) {
					defaultShipToId = (Integer) session.getAttribute("assignedShipTo");
				}

				if (defaultShipToId > 0) {
					if (tempdefaultShipId != null) {
						defaultShipToId = CommonUtility.validateNumber(tempdefaultShipId);
					}
					session.removeAttribute("defaultShipToIdatCheckout");
					session.setAttribute("defaultShipToIdatCheckout", "" + defaultShipToId);
				} else {
					if (session.getAttribute("defaultShipToIdatCheckout") != null
							&& session.getAttribute("defaultShipToIdatCheckout").toString().length() > 0) {
						defaultShipToId = CommonUtility
								.validateNumber((String) session.getAttribute("defaultShipToIdatCheckout"));
					} else {
						defaultShiptoId = (String) session.getAttribute("defaultShipToId");
						defaultShipToId = CommonUtility.validateNumber(defaultShiptoId);
						if (defaultShiptoId != null && tempdefaultShipId != null
								&& !defaultShiptoId.equalsIgnoreCase(tempdefaultShipId)) {
							session.setAttribute("defaultShipToId", tempdefaultShipId);
							session.setAttribute("entityId", tempEntityId);
						}
					}
				}

				int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
				int subsetIdByName = ProductsDAO
						.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
				if (subsetIdByName > 0) {
					generalSubset = subsetIdByName;
				}

				double total = 0;
				cartListData = new ArrayList<ProductsModel>();
				if (defaultBillToId == 0) {
					HashMap<String, Integer> userAddressId = UsersDAO
							.getDefaultAddressIdForBCAddressBook((String) session.getAttribute(Global.USERNAME_KEY));
					defaultBillToId = userAddressId.get("Bill");
				}
				// All the reflection are pointing to same method in DAO
				/*
				 * UserManagement userObj = new UserManagementImpl(); HashMap<String,
				 * UsersModel> userAddress =
				 * userObj.getUserAddressFromBCAddressBook(defaultBillToId, defaultShipToId);
				 */
				HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
						defaultShipToId);
				billAddress = userAddress.get("Bill");
				shipAddress = userAddress.get("Ship");

				if (CommonUtility.validateString(shipEmail).length() > 0) {
					session.removeAttribute("overRideShipEmail");
					overRideShipEmail = CommonUtility.validateString(shipEmail);
					session.setAttribute("overRideShipEmail", overRideShipEmail);
				} else if (CommonUtility.validateString((String) session.getAttribute("overRideShipEmail"))
						.length() > 0) {
					overRideShipEmail = CommonUtility
							.validateString((String) session.getAttribute("overRideShipEmail"));
					session.setAttribute("overRideShipEmail", overRideShipEmail);
				}

				session.removeAttribute("overrideBillAddress");
				AddressModel overrideBillAddress = new AddressModel();
				overrideBillAddress.setCompanyName(billCompanyName);
				overrideBillAddress.setAddress1(billAddress1);
				overrideBillAddress.setAddress2(billAddress2);
				overrideBillAddress.setCity(billCity);
				overrideBillAddress.setState(billState);
				overrideBillAddress.setCountry(billCountry);
				overrideBillAddress.setZipCode(billZipcode);
				overrideBillAddress.setPhoneNo(billPhoneNo);
				overrideBillAddress.setEmailAddress(billEmail);

				if (billAddress != null && CommonUtility.validateString(billAddress.getEmailAddress()).length() < 1) {
					billAddress.setEmailAddress(billEmail);
				}
				if (billAddress != null && CommonUtility.validateString(billAddress.getPhoneNo()).length() < 1) {
					billAddress.setPhoneNo(billPhoneNo);
				}
				session.setAttribute("overrideBillAddress", overrideBillAddress);

				session.removeAttribute("overrideShipAddress");
				AddressModel overrideShipAddress = new AddressModel();
				overrideShipAddress.setCompanyName(shipCompanyName != null ? shipCompanyName : billCompanyName);
				overrideShipAddress.setAddress1(shipAddress1);
				overrideShipAddress.setAddress2(shipAddress2);
				overrideShipAddress.setCity(shipCity);
				overrideShipAddress.setState(shipState);
				if (CommonUtility.validateString(shipCountry).equalsIgnoreCase("USA")) {
					shipCountry = "US";
				} else {
					overrideShipAddress.setCountry(shipCountry);
				}
				overrideShipAddress.setZipCode(shipZipcode);
				overrideShipAddress.setPhoneNo(shipPhoneNo);
				overrideShipAddress.setEmailAddress(shipEmail);
				if (shipAddress.getShipToId() != null) {
					overrideShipAddress.setShipToId(shipAddress.getShipToId());
				}

				if (CommonUtility.validateString(request.getParameter("overrideShip")).equalsIgnoreCase("Y")) {
					if (!CommonUtility.validateString(shipAddress1)
							.equalsIgnoreCase(CommonUtility.validateString(shipAddress.getAddress1()))
							|| !CommonUtility.validateString(shipAddress2)
									.equalsIgnoreCase(CommonUtility.validateString(shipAddress.getAddress2()))
							|| !CommonUtility.validateString(shipCountry)
									.equalsIgnoreCase(CommonUtility.validateString(shipAddress.getCountry()))
							|| !CommonUtility.validateString(shipState)
									.equalsIgnoreCase(CommonUtility.validateString(shipAddress.getState()))
							|| !CommonUtility.validateString(shipZipcode).equalsIgnoreCase(
									CommonUtility.validateString(shipAddress.getZipCodeStringFormat()))
							|| !CommonUtility.validateString(shipPhoneNo)
									.equalsIgnoreCase(CommonUtility.validateString(shipAddress.getPhoneNo()))
							|| !CommonUtility.validateString(shipEmail)
									.equalsIgnoreCase(CommonUtility.validateString(shipAddress.getEmailAddress()))) {
						session.setAttribute("overrideShipAddress", overrideShipAddress);
						session.setAttribute("selectedshipToIdSx", overrideShipAddress.getShipToId());
					}
					shipAddress.setCustomerName(shipCompanyName);
					shipAddress.setCompanyName(shipCompanyName);
					shipAddress.setAddress1(shipAddress1);
					shipAddress.setAddress2(shipAddress2);
					shipAddress.setCity(shipCity);
					shipAddress.setState(shipState);
					shipAddress.setCountry(shipCountry);
					shipAddress.setZipCode(shipZipcode);
					shipAddress.setZipCodeStringFormat(shipZipcode);
					shipAddress.setPhoneNo(shipPhoneNo);
					shipAddress.setEmailAddress(shipEmail);
				}

				if (shipAddress != null && CommonUtility.validateString(overRideShipEmail).trim().length() > 0) {
					shipAddress.setEmailAddress(overRideShipEmail);
				}

				System.out.println(isReOrder);
				if (isReOrder == null && session.getAttribute("isReOrder") != null
						&& session.getAttribute("isReOrder").toString().trim().length() > 0) {
					isReOrder = (String) session.getAttribute("isReOrder");
				}

				if (isReOrder != null && isReOrder.trim().equalsIgnoreCase("Y")) {
					session.setAttribute("isReOrder", isReOrder);
					cartListData = SalesDAO.getOrderDetailsQuote(session);
				} else {
					session.setAttribute("isReOrder", "N");
					cartListData = SalesDAO.getOrderDetails(savedGroupId, userId, subsetId, generalSubset, session,
							"confirmOrder");
				}

				LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
				if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
						.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
					ArrayList<Integer> itemList = new ArrayList<Integer>();
					if (cartListData != null && cartListData.size() > 0) {
						for (ProductsModel pModel : cartListData) {
							itemList.add(pModel.getItemId());
						}
					}
					customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(subsetId, generalSubset,
							StringUtils.join(itemList, " OR "), "itemid");
				}

				String c = "";
				for (ProductsModel itemPrice : cartListData) {
					itemPrice.setNetPrice(itemPrice.getTotal());
					total = itemPrice.getCartTotal();

					idList = idList + c + itemPrice.getItemId();
					c = " OR ";
				}
				if (CommonUtility.validateString(idList).length() > 0) {
					LinkedHashMap<Integer, ArrayList<ProductsModel>> customerPartNumber = ProductHunterSolr
							.getcustomerPartnumber(idList, CommonUtility.validateNumber(buyingCompanyId),
									CommonUtility.validateNumber(buyingCompanyId));
					if (customerPartNumber != null && customerPartNumber.size() > 0) {
						for (ProductsModel item : cartListData) {
							item.setCustomerPartNumberList(customerPartNumber.get(item.getItemId()));
						}
					}
				}

				String shipViaDisplay = "";
				int shipViaServiceCode = 0;
				if (shipVia != null && shipVia.trim().length() > 0) {
				} else {
					if (session.getAttribute("selectedBranchWillCall") != null
							&& session.getAttribute("selectedBranchWillCall").toString().trim().length() > 0) {
						String tempShip = (String) session.getAttribute("selectedBranchWillCall");
						String[] arry = tempShip.split("\\|");
						if (arry != null && arry[1] != null) {
							shipVia = arry[1].toString();
							shipViaDisplay = arry[2].toString();
						}

					}
				}
				if (!CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
						.equalsIgnoreCase("Y")) {
					if (session.getAttribute("shipViaMap") != null) {
						LinkedHashMap<String, String> shipViaMap = (LinkedHashMap<String, String>) session
								.getAttribute("shipViaMap");
						if (CommonUtility.validateString(shipVia).equalsIgnoreCase("Multiple")) {
							shipViaDisplay = shipVia.toUpperCase();
						} else {
							shipViaDisplay = shipViaMap.get(shipVia.toUpperCase());
						}
						ArrayList<ShipVia> shipViaList = (ArrayList<ShipVia>) session
								.getAttribute("customerShipViaList");
						// -- Isssue in lamda expression, so rolling back to old for loop
						/*
						 * if(shipViaList != null && shipViaList.size() > 0 &&
						 * CommonUtility.validateString(shipVia).length()>0){ shipViaServiceCode =
						 * shipViaList.stream().filter(via->CommonUtility.validateString(via.
						 * getShipViaID()).equalsIgnoreCase(CommonUtility.validateString(shipVia))).
						 * findFirst().get().getServiceCode(); }
						 */
						if (shipViaList != null && shipViaList.size() > 0) {
							for (ShipVia via : shipViaList) {
								if (CommonUtility.validateString(via.getShipViaID()).equalsIgnoreCase(shipVia)) {
									shipViaServiceCode = via.getServiceCode();
									break;
								}
							}
						}
					}
				} else {
					shipViaDisplay = CommonUtility.validateString(request.getParameter("shipViaDisplay"));
					shipViaServiceCode = CommonUtility.validateNumber(request.getParameter("serviceCode"));
				}
				/*
				 * double totalCartFrieghtCharges = 0;
				 * if(CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get(
				 * "GET_UPS_FRIEGHT_CHARGES")).equalsIgnoreCase("Y") &&
				 * (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get(
				 * "ITEMLEVELSHIPVIA")).equalsIgnoreCase("Y") ||
				 * CommonUtility.validateString(shipViaDisplay).toUpperCase(Locale.US).contains(
				 * "UPS"))){ double totalCartFrieght= SalesDAO.getTotalCartWeight(cartListData);
				 * if(CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get(
				 * "ERP")).equalsIgnoreCase("eclipse")){ wareHousecode =(String)
				 * session.getAttribute("homeBranchId"); } WarehouseModel wareHouseDetail = new
				 * WarehouseModel(); wareHouseDetail =
				 * UsersDAO.getWareHouseDetailsByCode(wareHousecode); totalCartFrieghtCharges =
				 * UpsCarrier.getUPSFreightCharges(totalCartFrieght,wareHouseDetail,shipAddress,
				 * shipViaServiceCode); //total = total + totalCartFrieghtCharges; }
				 * 
				 * if(CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get(
				 * "GET_FEDEX_FRIEGHT_CHARGES")).equalsIgnoreCase("Y") &&
				 * (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get(
				 * "ITEMLEVELSHIPVIA")).equalsIgnoreCase("Y") ||
				 * CommonUtility.validateString(shipViaDisplay).toUpperCase(Locale.US).contains(
				 * "FEDEX"))){ ProductsModel totalCartDimensions = new ProductsModel();
				 * totalCartDimensions= SalesDAO.getTotalDimensions(cartListData); double
				 * totalCartWeight= SalesDAO.getTotalCartWeight(cartListData); int
				 * totalCartLength= (int) totalCartDimensions.getLength(); int totalCartHeight=
				 * (int) totalCartDimensions.getHeight(); int totalCartWidth= (int)
				 * totalCartDimensions.getWidth();
				 * if(CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get(
				 * "ERP")).equalsIgnoreCase("eclipse")){ wareHousecode =(String)
				 * session.getAttribute("homeBranchId"); } WarehouseModel wareHouseDetail = new
				 * WarehouseModel(); wareHouseDetail =
				 * UsersDAO.getWareHouseDetailsByCode(wareHousecode); totalCartFrieghtCharges =
				 * RateWebServiceClient.getFedExFreightCharges(totalCartWeight, totalCartLength,
				 * totalCartHeight, totalCartWidth
				 * ,wareHouseDetail,shipAddress,CommonUtility.validateString(shipVia)); //total
				 * = total + totalCartFrieghtCharges; }
				 */

				String shipViaServiceName = "UPS";
				if (CommonUtility
						.validateString(LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("ups.service.name"))
						.length() > 0
						&& shipViaDisplay.toUpperCase(Locale.US)
								.contains(LayoutLoader.getMessageProperties()
										.get(session.getAttribute("localeCode").toString().toUpperCase())
										.getProperty("ups.service.name"))) {
					shipViaServiceName = CommonUtility.validateString(LayoutLoader.getMessageProperties()
							.get(session.getAttribute("localeCode").toString().toUpperCase())
							.getProperty("ups.service.name"));
				} else if (CommonUtility
						.validateString(LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("ups.service.addon.name"))
						.length() > 0
						&& shipViaDisplay.toUpperCase(Locale.US)
								.contains(LayoutLoader.getMessageProperties()
										.get(session.getAttribute("localeCode").toString().toUpperCase())
										.getProperty("ups.service.addon.name"))) {
					shipViaServiceName = CommonUtility.validateString(LayoutLoader.getMessageProperties()
							.get(session.getAttribute("localeCode").toString().toUpperCase())
							.getProperty("ups.service.addon.name"));
				}
				double totalCartFrieghtCharges = 0;
				String erp = "defaults";
				if (session != null
						&& CommonUtility.validateString((String) session.getAttribute("erpType")).length() > 0) {
					erp = CommonUtility.validateString((String) session.getAttribute("erpType"));
				}
				ErpType erpType = CimmUtil.getErpType(erp);
				WarehouseModel wareHouseDetail = new WarehouseModel();

				double totalCartFreight = SalesDAO.getTotalCartWeight(cartListData);
				wareHouseDetail = UsersDAO.getWareHouseDetailsByCode(wareHousecode);
				SalesModel freightParameters = new SalesModel();
				freightParameters.setShippingAddress(shipAddress);
				freightParameters.setWareHouseDetails(wareHouseDetail);
				freightParameters.setTotalCartFrieght(totalCartFreight);
				freightParameters.setShipViaServiceCode(CommonUtility.validateParseIntegerToString(shipViaServiceCode));
				freightParameters.setShipViaMethod(shipViaDisplay);
				freightParameters.setShipViaServiceName(shipViaServiceName);
				freightParameters.setShipViaDescription(shipVia);
				freightParameters.setCartData(cartListData);

				if (isCalculateFreight() && !CommonUtility.validateString(erp).equalsIgnoreCase("eclipse")
						&& !CommonUtility.validateString(erp).equalsIgnoreCase("defaults")) {
					totalCartFrieghtCharges = FreightService.getFreightData(freightParameters, erpType);
				}

				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("GET_UPS_FRIEGHT_CHARGES"))
						.equalsIgnoreCase("Y")
						&& CommonUtility.validateString(shipViaDisplay).toUpperCase(Locale.US)
								.contains(shipViaServiceName.toUpperCase(Locale.US))) {
					// double totalCartFrieght= SalesDAO.getTotalCartWeight(cartListData);
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ERP"))
							.equalsIgnoreCase("eclipse")) {
						wareHousecode = (String) session.getAttribute("homeBranchId");
					}
					wareHouseDetail = UsersDAO.getWareHouseDetailsByCode(wareHousecode);
					/* Freight charges from CIMM2BC */

					double thresholdWeightLimit = CommonUtility.validateDoubleNumber(
							CommonDBQuery.getSystemParamtersList().get("MAXIMUM_CARTWEIGHT_FOR_SHIPPING"));
					if (totalCartFreight <= thresholdWeightLimit) {
						// totalCartFrieghtCharges =
						// UpsCarrier.getUPSFreightCharges(totalCartFrieght,wareHouseDetail,shipAddress,
						// shipViaServiceCode);
						totalCartFrieghtCharges = new UpsFreightService().getFreightCharges(shipAddress,
								wareHouseDetail, totalCartFreight,
								CommonUtility.validateParseIntegerToString(shipViaServiceCode), shipViaDisplay);
					} else {
						int multiple = (int) (totalCartFreight / thresholdWeightLimit);
						double balanceweight = totalCartFreight - (thresholdWeightLimit * multiple);
						totalCartFrieghtCharges = new UpsFreightService().getFreightCharges(shipAddress,
								wareHouseDetail, thresholdWeightLimit,
								CommonUtility.validateParseIntegerToString(shipViaServiceCode), shipVia);
						// totalCartFrieghtCharges =
						// UpsCarrier.getUPSFreightCharges(thresholdWeightLimit,wareHouseDetail,
						// shipAddress, shipViaServiceCode) * multiple;
						if (balanceweight > 0) {
							totalCartFrieghtCharges += new UpsFreightService().getFreightCharges(shipAddress,
									wareHouseDetail, balanceweight,
									CommonUtility.validateParseIntegerToString(shipViaServiceCode), shipVia);
							// totalCartFrieghtCharges =
							// totalCartFrieghtCharges+UpsCarrier.getUPSFreightCharges(balanceweight,wareHouseDetail,shipAddress,
							// shipViaServiceCode);
						}
					}
					// total = total + totalCartFrieghtCharges;
				}
				if (totalCartFrieghtCharges > 0 && CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ADDITIONAL_FREIGHT_CHARGES"))
						.length() > 0) {
					totalCartFrieghtCharges += totalCartFrieghtCharges * CommonUtility.validateDoubleNumber(
							CommonDBQuery.getSystemParamtersList().get("ADDITIONAL_FREIGHT_CHARGES"));
				}

				if (CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("GET_FEDEX_FRIEGHT_CHARGES_CIMM2BC"))
						.equalsIgnoreCase("Y")
						&& CommonUtility.validateString(shipViaDisplay).toUpperCase(Locale.US).contains("FEDEX")) {

					wareHouseDetail = UsersDAO.getWareHouseDetailsByCode(wareHousecode);
					ProductsModel totalCartDimensions = new ProductsModel();
					totalCartDimensions = SalesDAO.getTotalDimensions(cartListData);
					double totalCartWeight = SalesDAO.getTotalCartWeight(cartListData);
					int totalCartLength = (int) totalCartDimensions.getLength();
					int totalCartHeight = (int) totalCartDimensions.getHeight();
					int totalCartWidth = (int) totalCartDimensions.getWidth();
					String fedExCartDimensionUom = (CommonDBQuery.getSystemParamtersList()
							.get("FEDEX_FRIEGHT_DIMENSION") != null
									? CommonDBQuery.getSystemParamtersList().get("FEDEX_FRIEGHT_DIMENSION")
									: "CM");
					String fedExCartWeightUom = (CommonDBQuery.getSystemParamtersList().get("FEDEX_FRIEGHT_UOM") != null
							? CommonDBQuery.getSystemParamtersList().get("FEDEX_FRIEGHT_DIMENSION")
							: "LB");
					PackageDimension fedExCartDimension = new PackageDimension(fedExCartDimensionUom, totalCartHeight,
							totalCartWidth, totalCartLength);
					// PackageDimension fedExCartDimension = new PackageDimension("CM", 1, 5, 8);
					PackageInfo packageInfo = new PackageInfo(fedExCartWeightUom,
							CommonUtility.validateParseDoubleToString(totalCartFreight));
					// PackageInfo packageInfo = new PackageInfo(fedExCartWeightUom,151);
					shipViaDisplay = shipViaDisplay.toUpperCase();
					shipViaDisplay = shipViaDisplay.replaceAll(" ", "_");
					totalCartFrieghtCharges = new FedExFreightSerivce().getFedExCharges(shipAddress, wareHouseDetail,
							packageInfo, fedExCartDimension, "REGULAR_PICKUP", shipViaDisplay, "YOUR_PACKAGING",
							cartListData);
					/* Freight charges from CIMM2BC */
				}

				if (CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("GET_FEDEX_FRIEGHT_CHARGES"))
						.equalsIgnoreCase("Y")
						&& (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
								.equalsIgnoreCase("Y")
								|| CommonUtility.validateString(shipViaDisplay).toUpperCase(Locale.US)
										.contains("FEDEX"))) {
					ProductsModel totalCartDimensions = new ProductsModel();
					totalCartDimensions = SalesDAO.getTotalDimensions(cartListData);
					double totalCartWeight = SalesDAO.getTotalCartWeight(cartListData);
					int totalCartLength = (int) totalCartDimensions.getLength();
					int totalCartHeight = (int) totalCartDimensions.getHeight();
					int totalCartWidth = (int) totalCartDimensions.getWidth();
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ERP"))
							.equalsIgnoreCase("eclipse")) {
						wareHousecode = (String) session.getAttribute("homeBranchId");
					}

					wareHouseDetail = UsersDAO.getWareHouseDetailsByCode(wareHousecode);
					totalCartFrieghtCharges = RateWebServiceClient.getFedExFreightCharges(totalCartWeight,
							totalCartLength, totalCartHeight, totalCartWidth, wareHouseDetail, shipAddress,
							CommonUtility.validateString(shipVia));
					// total = total + totalCartFrieghtCharges;
				}
				if (CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("GET_FEDEX_FRIEGHT_CHARGES_CIMMESB"))
						.equalsIgnoreCase("Y")
						&& (CommonUtility.validateString(shipViaDisplay).toUpperCase(Locale.US).contains("FEDEX")
								|| CommonUtility.validateString(shipViaDisplay).toUpperCase(Locale.US)
										.contains("STANDARD OVERNIGHT")
								|| CommonUtility.validateString(shipViaDisplay).toUpperCase(Locale.US)
										.contains("PRIORITY OVERNIGHT")
								|| CommonUtility.validateString(shipViaDisplay).toUpperCase(Locale.US)
										.contains("GROUND HOME DELIVERY"))) {

					wareHouseDetail = UsersDAO.getWareHouseDetailsByCode(wareHousecode);
					ProductsModel totalCartDimensions = new ProductsModel();
					totalCartDimensions = SalesDAO.getTotalDimensions(cartListData);
					double totalCartWeight = SalesDAO.getTotalCartWeight(cartListData);
					int totalCartLength = (int) totalCartDimensions.getLength();
					int totalCartHeight = (int) totalCartDimensions.getHeight();
					int totalCartWidth = (int) totalCartDimensions.getWidth();
					String fedExCartDimensionUom = (CommonDBQuery.getSystemParamtersList()
							.get("FEDEX_FRIEGHT_DIMENSION") != null
									? CommonDBQuery.getSystemParamtersList().get("FEDEX_FRIEGHT_DIMENSION")
									: "CM");
					String fedExCartWeightUom = (CommonDBQuery.getSystemParamtersList().get("FEDEX_FRIEGHT_UOM") != null
							? CommonDBQuery.getSystemParamtersList().get("FEDEX_FRIEGHT_DIMENSION")
							: "LB");
					com.unilog.cimmesb.client.ecomm.request.PackageDimension fedExCartDimension = new com.unilog.cimmesb.client.ecomm.request.PackageDimension(
							fedExCartDimensionUom, totalCartHeight, totalCartWidth, totalCartLength);
					// PackageDimension fedExCartDimension = new PackageDimension("CM", 1, 5, 8);
					com.unilog.cimmesb.client.ecomm.request.PackageInfo packageInfo = new com.unilog.cimmesb.client.ecomm.request.PackageInfo(
							fedExCartWeightUom, CommonUtility.validateParseDoubleToString(totalCartFreight));
					// PackageInfo packageInfo = new PackageInfo(fedExCartWeightUom,151);
					shipViaDisplay = shipViaDisplay.toUpperCase();
					shipViaDisplay = shipViaDisplay.replaceAll(" ", "_");
					totalCartFrieghtCharges = new FedExFreightSerivce().getFedExChargesEsb(shipAddress, wareHouseDetail,
							packageInfo, fedExCartDimension, "REGULAR_PICKUP", shipViaDisplay, "YOUR_PACKAGING",
							cartListData);
					/* Freight charges from CIMM2BC */
				}

				if (CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("IS_DISCOUNT_COUPONS_ENABLED"))
						.equalsIgnoreCase("Y")) {
					Cart cart = null;
					if (cartListData != null && cartListData.size() > 0) {
						// removing old discount calculation if any from session
						clearSavedDiscounts(session);
						cart = new Cart();
						cart.setCustomerName((String) session.getAttribute("loginCustomerName"));
						cart.setUserId(userId);
						cart.setBuyingCompanyId(Long.parseLong(session.getAttribute("buyingCompanyId").toString()));
						cart.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
						cart.setWebsite((String) session.getAttribute("websiteName"));
						LinkedHashMap<String, String> userCustomFieldValue = (LinkedHashMap<String, String>) session
								.getAttribute("userCustomFieldValue");
						if (userCustomFieldValue != null && CommonUtility
								.validateString(userCustomFieldValue.get("USER_LEVEL_COUPON_GROUPS")).length() > 0) {
							cart.setUserGroupName(userCustomFieldValue.get("USER_LEVEL_COUPON_GROUPS"));
						}
						LinkedHashMap<String, String> customerCustomFieldValue = (LinkedHashMap<String, String>) session
								.getAttribute("customerCustomFieldValue");
						if (customerCustomFieldValue != null && CommonUtility
								.validateString(customerCustomFieldValue.get("CUSTOMER_COUPON_GROUP")).length() > 0) {
							cart.setCustomerGroupName(customerCustomFieldValue.get("CUSTOMER_COUPON_GROUP"));
						}
						if (session.getAttribute("wareHouseName") != null) {
							cart.setWareHouseName((String) session.getAttribute("wareHouseName"));
						}
						if (shipVia == null) {
							if (session.getAttribute("selectedShipVia") != null) {
								cart.setSelectedShipMethod((String) session.getAttribute("selectedShipVia"));
							}
						} else {
							cart.setSelectedShipMethod(shipVia);
						}

						// TODO set Customer Group Name and User Group Name
						for (ProductsModel cartItem : cartListData) {
							LineItem lineItem = new LineItem();
							lineItem.setLineItemId(cartItem.getProductListId());
							lineItem.setPartNumber(cartItem.getPartNumber());
							lineItem.setOrderQuantity(cartItem.getQty());
							lineItem.setPrice((float) cartItem.getPrice());
							lineItem.setExtendedPrice((float) cartItem.getTotal());
							lineItem.setNetPrice((float) cartItem.getTotal());
							if (cartItem.getCustomFieldVal() != null && cartItem.getCustomFieldVal().size() > 0
									&& cartItem.getCustomFieldVal().get("custom_ITEM_LEVEL_COUPON_GROUPS") != null
									&& CommonUtility.validateString(cartItem.getCustomFieldVal()
											.get("custom_ITEM_LEVEL_COUPON_GROUPS").toString()).length() > 0) {
								if (CommonUtility.validateString(
										(String) cartItem.getCustomFieldVal().get("custom_ITEM_LEVEL_COUPON_GROUPS"))
										.length() > 0) {
									lineItem.setItemGroupName((String) cartItem.getCustomFieldVal()
											.get("custom_ITEM_LEVEL_COUPON_GROUPS"));
								}
							}
							if (session.getAttribute("wareHouseName") != null) {
								lineItem.setWareHouseName((String) session.getAttribute("wareHouseName"));
							}
							cart.getLineItems().add(lineItem);
						}

						try {
							SalesPromotionService promotionService = SalesPromotionService.getInstance();

							List<Coupon> couponsList = new ArrayList<Coupon>();

							if (discountCoupons != null && !discountCoupons.trim().isEmpty()) {
								for (String couponCode : discountCoupons.split(",")) {
									Coupon coupon = new Coupon();
									coupon.setCopounCode(couponCode);
									couponsList.add(coupon);
								}
							}
							promotionService.checkDiscount(cart, couponsList);
							for (LineItem discountedLineItem : cart.getLineItems()) {
								for (ProductsModel cartItem : cartListData) {
									if (cartItem.getProductListId() == discountedLineItem.getLineItemId()) {
										cartItem.setdDiscountValue(discountedLineItem.getDiscount());
										cartItem.setTotal(discountedLineItem.getExtendedPrice());
										cartItem.setNetPrice(discountedLineItem.getNetPrice());
										if (discountedLineItem.getAvailedDiscount() != null) {
											cartItem.setPromoCode(discountedLineItem.getAvailedDiscount()
													.getDiscountCoupon().getCopounCode());
											appliedlDiscounts.add(discountedLineItem.getAvailedDiscount());
										}
										orderItemsDiscountVal += discountedLineItem.getDiscount();
									}
								}

							}
							if (cart.isItemDiscountAvailed()) {
								discountAvailed = "yes";
							}
							if (cart.getDiscount() > 0.0) {
								orderDiscountVal = cart.getDiscount();
								appliedlDiscounts.addAll(cart.getAvailedDiscounts());
								discountAvailed = "yes";
								if (CommonUtility.customServiceUtility() != null) {
									double discountRoundVal = CommonUtility.customServiceUtility()
											.setroundOfDiscount(orderDiscountVal);
									if (discountRoundVal > 0) {
										orderDiscountVal = discountRoundVal;
									}
								}
							}
							if (cart.isFreeShipping()) {
								freeShipping = "yes";
								appliedlDiscounts.add(cart.getAvailedShippingDiscount());
							}
							total = cart.getTotal();
							totalSavingOnOrder = orderItemsDiscountVal + orderDiscountVal;
							// setting in session to use in save sales order
							for (Discount test : appliedlDiscounts) {
								appliedCouponsArray.add(test.getDiscountCoupon().getCopounCode());
							}

							for (Coupon invalidCoupon : cart.getRejectedCoupons()) {
								invalidCoupons.add(invalidCoupon.getCopounCode());
							}
							session.setAttribute("availedDiscounts", cart);
							session.setAttribute("appliedDiscountCoupons", appliedlDiscounts);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}

				}

				FreightCalculatorModel freightValue = null;
				if (total > 0) {
					FreightCalculatorModel freightInput = new FreightCalculatorModel();
					freightInput.setCartTotal(total);
					freightInput.setCountry(customerCountry);
					freightInput.setCustomerNumber(customerId);
					freightInput.setLocale(
							CommonUtility.validateString(session.getAttribute("localeCode").toString().toUpperCase()));

					if (CommonUtility.customServiceUtility() != null) {
						wareHousecode = CommonUtility.customServiceUtility()
								.setPricingDefaultWareHouseCode(wareHousecode);
					}

					if (customFieldVal != null
							&& CommonDBQuery.getSystemParamtersList().get("OVERSIZE_ITEM_FREIGHT_RULE") != null
							&& CommonDBQuery.getSystemParamtersList().get("OVERSIZE_ITEM_FREIGHT_RULE").trim()
									.equalsIgnoreCase("Y")) {
						for (Map.Entry<Integer, LinkedHashMap<String, Object>> entry : customFieldVal.entrySet()) {
							if (entry != null && entry.getValue() != null
									&& entry.getValue().toString().contains("custom_OverSize=Y")) {
								freightInput.setOverSize("Y");
								break;
							} else {
								freightInput.setOverSize("N");
							}
						}
					}

					if (session.getAttribute("itemleveShip") != null) {
						itemleveShipDisplay = (String) session.getAttribute("itemShipDesc");
					}

					if (shipVia == null) {
						if (session.getAttribute("selectedShipVia") != null) {
							shipVia = (String) session.getAttribute("selectedShipVia");
						}
					} else {
						session.setAttribute("selectedShipVia", shipVia);
					}

					freightInput.setShipVia(shipVia);
					freightInput.setWareHouseCode(wareHousecode);
					UsersModel shipAddress = null;
					if (session != null && session.getAttribute("defaultShipAddress") != null) {
						shipAddress = (UsersModel) session.getAttribute("defaultShipAddress");
						if (CommonUtility.validateString(request.getParameter("overrideShip")).equalsIgnoreCase("Y")) {

							freightInput.setState(shipState);
						} else {
							if (shipAddress != null && shipAddress.getState() != null
									&& shipAddress.getState().trim().length() > 0) {
								freightInput.setState(shipAddress.getState().trim());
							}
						}
					}

					freightValue = FreightCalculator.getFreightByTotal(freightInput);
					if (freightValue != null) {
						freightMessage = freightValue.getMessage();
					}

				}

				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
						.equalsIgnoreCase("SHIPVIA_COST_TABLE")
						&& session.getAttribute("customerShipViaListJson") != null) {
					String shipCostTableJasonString = CommonUtility
							.validateString((String) session.getAttribute("customerShipViaListJson"));
					Gson gson = new Gson();
					ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
							new TypeToken<List<ShipVia>>() {
							}.getType());
					if (shipCostTable != null && !shipCostTable.isEmpty()) {
						if (shipCostTable != null && !shipCostTable.isEmpty()) {
							if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
								session.removeAttribute("selectedShipCodeOption");
							} else {
								if (session.getAttribute("selectedShipCodeOption") != null)
									selectedShipCodeOption = CommonUtility
											.validateString(session.getAttribute("selectedShipCodeOption").toString());
							}
							if (freeShipping.equalsIgnoreCase("no")) {
								for (ShipVia shipViaObj : shipCostTable) {
									// if(shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)){
									if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
										if (shipViaObj.getShipCode().equalsIgnoreCase(selectedShipCodeOption)) {
											session.setAttribute("selectedShipCodeOption", selectedShipCodeOption);
											freightValue = new FreightCalculatorModel();
											freightValue.setFreightValue(shipViaObj.getShipCost());
											break;
										}
									} else {
										if (shipViaObj.getShipViaID() != null
												&& shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)) {
											freightValue = new FreightCalculatorModel();
											freightValue.setFreightValue(shipViaObj.getShipCost());
											break;
										}
									}
								}
							}
						}
					}
				}

				if (CommonUtility.validateString(poNumber).length() > 0
						|| CommonUtility.validateString(POOverride).equalsIgnoreCase("N")) {
				} else {
					if (session.getAttribute("orderedBy") != null) {
						poNumber = CommonUtility.validateString(session.getAttribute("orderedBy").toString());
					} else {
						poNumber = "";
					}
				}
				session.setAttribute("poNumber", poNumber);

				if (CommonUtility.validateString(orderedBy).length() > 0) {
				} else {
					if (session.getAttribute("orderedBy") != null
							&& session.getAttribute("orderedBy").toString().trim().length() > 0) {
						orderedBy = (String) session.getAttribute("orderedBy");
					} else {
						orderedBy = (String) session.getAttribute("userFirstName") + " "
								+ (String) session.getAttribute("userLastName");
					}
				}
				session.setAttribute("orderedBy", orderedBy);

				if (CommonUtility.validateString(orderNotes).length() > 0) {
				} else {
					if (session.getAttribute("orderNotes") != null
							&& session.getAttribute("orderNotes").toString().trim().length() > 0) {
						orderNotes = (String) session.getAttribute("orderNotes");
					} else {
						orderNotes = "";
					}
				}
				session.setAttribute("orderNotes", orderNotes);

				if (CommonUtility.validateString(shippingInstruction).length() > 0) {
				} else {
					if (session.getAttribute("shippingInstruction") != null
							&& session.getAttribute("shippingInstruction").toString().trim().length() > 0) {
						shippingInstruction = (String) session.getAttribute("shippingInstruction");
					} else {
						shippingInstruction = "";
					}
				}
				session.setAttribute("shippingInstruction", shippingInstruction);

				if (CommonUtility.validateString(customerReleaseNumber).length() > 0) {
				} else {
					if (session.getAttribute("customerReleaseNumber") != null
							&& session.getAttribute("customerReleaseNumber").toString().trim().length() > 0) {
						customerReleaseNumber = (String) session.getAttribute("customerReleaseNumber");
					} else {
						customerReleaseNumber = "";
					}
				}
				session.setAttribute("customerReleaseNumber", customerReleaseNumber);

				if (CommonUtility.validateString(reqDate).length() > 0) {
				} else {
					if (session.getAttribute("reqDate") != null
							&& session.getAttribute("reqDate").toString().trim().length() > 0) {
						reqDate = (String) session.getAttribute("reqDate");
					} else {
						reqDate = "";
					}
				}
				shipAddress.setReqDate(reqDate);

				if (CommonDBQuery.getSystemParamtersList().get("CUSTOMER_SHIP_VIA_FROM_ERP") != null && CommonDBQuery
						.getSystemParamtersList().get("CUSTOMER_SHIP_VIA_FROM_ERP").trim().equalsIgnoreCase("Y")) {
					String selectedShipVia = (String) session.getAttribute("selectedShipVia");// WC
					String customerShipVia = (String) session.getAttribute("actualCustomerShipVia");// BALT
					HashMap<String, UsersModel> userShipListDetails = UsersDAO.getUserShipVia();
					if (userShipListDetails != null && userShipListDetails.size() > 0) {
						UsersModel shiplistModel = new UsersModel();
						shiplistModel = userShipListDetails
								.get(CommonUtility.validateString(customerShipVia).trim().toUpperCase());
						String shipViaMethod = "";
						if (shiplistModel != null && shiplistModel.getShipViaMethod() != null) {
							shipViaMethod = shiplistModel.getShipViaMethod();// DEL
						}
						if (shipViaMethod != null && shipViaMethod.trim().equalsIgnoreCase(selectedShipVia.trim())) {
							shipVia = customerShipVia;
						} else {
							shipVia = selectedShipVia;
						}
					}
				}

				if (CommonUtility.customServiceUtility() != null) {
					Map<String, Object> details = new LinkedHashMap<>();
					CommonUtility.customServiceUtility().orderFreightcalculation(details, cartListData);
					if (details.get("otherCharges") != null
							&& CommonUtility.validateString(details.get("otherCharges").toString()).length() > 0) {
						totalCartFrieghtCharges = Double.parseDouble(details.get("otherCharges").toString());
					}
				}

				session.setAttribute("reqDate", reqDate);
				createQuoteInput.put("couponResponse", (CimmOrder) session.getAttribute("couponsApllied"));
				createQuoteInput.put("couponItemId",
						CommonUtility.validateString(LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("coupons.itemid")));
				createQuoteInput.put("orderedBy", orderedBy);
				createQuoteInput.put("orderType", orderType);
				createQuoteInput.put("itemList", cartListData);
				createQuoteInput.put("userToken", userToken);
				createQuoteInput.put("shipToEntity", userToken);
				createQuoteInput.put("orderedBy", orderedBy);
				createQuoteInput.put("orderNotes", orderNotes);
				createQuoteInput.put("shippingInstruction", shippingInstruction);
				createQuoteInput.put("poNumber", poNumber);
				createQuoteInput.put("gasPoNumber", gasPoNumber);
				createQuoteInput.put("reqDate", reqDate);
				createQuoteInput.put("shipVia", shipVia);
				createQuoteInput.put("shipViaDisplay", shipViaDisplay);
				createQuoteInput.put("selectedShipCodeOption", selectedShipCodeOption);
				createQuoteInput.put("billAddress", billAddress);
				createQuoteInput.put("shipAddress", shipAddress);
				createQuoteInput.put("defaultBillToId", defaultBillToId);
				createQuoteInput.put("defaultShipToId", defaultShipToId);
				createQuoteInput.put("customerId", customerId);
				createQuoteInput.put("wareHousecode", CommonUtility.validateString(wareHousecode));
				createQuoteInput.put("customerCountry", CommonUtility.validateString(customerCountry));
				createQuoteInput.put("customerName", CommonUtility.validateString(shipAddress.getCustomerName()));
				createQuoteInput.put("customerReleaseNumber", customerReleaseNumber);
				createQuoteInput.put("discountValue", discountValue);
				createQuoteInput.put("discountType", discountType);
				createQuoteInput.put("buyingCompanyId", buyingCompanyId);
				createQuoteInput.put("selectedBranch", selectedBranch);
				createQuoteInput.put("orderDiscountVal", orderDiscountVal);
				createQuoteInput.put("totalCartFrieghtCharges", totalCartFrieghtCharges);
				createQuoteInput.put("selectedWillCallBranchCode",
						CommonUtility.validateString(selectedWillCallBranchCode));
				createQuoteInput.put("handlingListItems",
						CommonUtility.validateString(LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("handlingcharge.labels")));
				createQuoteInput.put("deliveryListItems",
						CommonUtility.validateString(LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("deliverycharge.labels")));
				createQuoteInput.put("errorMsgToDisplay",
						CommonUtility.validateString(LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("errormsgtodisplay.labels")));
				createQuoteInput.put("overrideShipAddress", overrideShipAddress);
				createQuoteInput.put("userId", userId);
				createQuoteInput.put("calculateTax", calculateTax);
				createQuoteInput.put("shipViaServiceCode", shipViaServiceCode);
				if (userEmailAddress != null && userEmailAddress.trim().length() > 0) {
					createQuoteInput.put("userEmailAddress", userEmailAddress);
				}
				if (userOfficePhone != null && userOfficePhone.trim().length() > 0) {
					createQuoteInput.put("userOfficePhone", userOfficePhone);
				}
				if (customFieldVal != null) {
					createQuoteInput.put("customFieldVal", customFieldVal);
				}
				if (freightValue != null) {
					createQuoteInput.put("freight", freightValue.getFreightValue());
				}
				createQuoteInput.put("creditCardValue", creditCardValue);

				SalesModel quoteResponse = null;
				if (session.getAttribute("quoteNumber") == null
						|| CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("CREATE_NEW_QUOTE"))
								.equalsIgnoreCase("Y")) {
					if (session.getAttribute("orderingType") != null && CommonUtility
							.validateString(session.getAttribute("orderingType").toString()).length() > 0) {
						orderingType = CommonUtility.validateString(session.getAttribute("orderingType").toString());
					}
					if (session.getAttribute("calculateTax") != null && CommonUtility
							.validateString(session.getAttribute("calculateTax").toString()).length() > 0) {
						calculateTax = CommonUtility.validateString(session.getAttribute("calculateTax").toString());
					}

					if ((CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
							.equalsIgnoreCase("SO"))
							|| (request.getParameterMap().containsKey("orderingType")
									&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO"))) {
						session.setAttribute("orderingType", orderingType);
						// if(CommonUtility.validateString(calculateTax).equalsIgnoreCase("Y")){
						// //------ Enable this statment based on ERP implementation
						session.setAttribute("calculateTax", calculateTax);
						/**
						 * Below code Written is for Tyndale to get tax for all ship methods.
						 * *Reference- Chetan Sandesh
						 */
						customParameter = CommonUtility.validateString(request.getParameter("customParameter"));
						LinkedHashMap<String, Object> taxOutPutFromERP = null;
						SalesOrderManagement salesObj = new SalesOrderManagementImpl();
						/*
						 * customServices customService= new customServices(); taxFromErp =
						 * customService.getGroupedTaxFrom(createQuoteInput,customParameter);
						 */

						// CustomServiceProvider
						if (CommonUtility.customServiceUtility() != null
								&& CommonUtility.validateString(avalaraTax).length() == 0) {
							taxFromErp = CommonUtility.customServiceUtility().getGroupOfTax(createQuoteInput,
									customParameter);
						} else {
							taxOutPutFromERP = salesObj.getTaxFromERP(createQuoteInput);
						}
						// CustomServiceProvider

						if (taxOutPutFromERP != null && !taxOutPutFromERP.isEmpty()) {
							if (taxOutPutFromERP.get("TaxInfo").getClass().equals(ProductsModel.class)) {
								ProductsModel itemTaxOutPut = (ProductsModel) taxOutPutFromERP.get("TaxInfo");
								taxFromErp = itemTaxOutPut.getSalesTax();
								session.setAttribute("taxFromSFOEOrderTotLoadV2", Double.toString(taxFromErp));
							} else if (taxOutPutFromERP.get("TaxInfo").getClass().equals(SalesModel.class)) {
								SalesModel itemTaxOutPut = (SalesModel) taxOutPutFromERP.get("TaxInfo");
								taxFromErp = itemTaxOutPut.getTax();
								if (itemTaxOutPut.getCashDiscountAmount() > 0) {
									orderDiscountVal = itemTaxOutPut.getCashDiscountAmount();
								}

								session.setAttribute("taxFromSFOEOrderTotLoadV2", Double.toString(taxFromErp));
							}
						} else if (CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("TAX_FROM_CIMM"))
								.equalsIgnoreCase("Y")) {
							List<CIMMTaxModel> cimmTaxTable = CommonDBQuery.getCimmTaxTable();
							double taxPercentage = 0.00;
							boolean applyTax = false;
							double zipCode = CommonUtility
									.validateDoubleNumber(shipAddress.getZipCodeStringFormat().replaceAll("-", "."));
							System.out.println("zipcodeTax:" + zipCode);
							for (CIMMTaxModel taxData : cimmTaxTable) {
								if (zipCode >= CommonUtility.validateDoubleNumber(taxData.getStartZip())
										&& zipCode <= CommonUtility.validateDoubleNumber(taxData.getEndZip())) {
									applyTax = true;
									taxPercentage = taxData.getTaxPercentage();
									break;
								}
							}
							if (applyTax && taxPercentage > 0) {
								taxFromErp = total * taxPercentage;
								System.out.println("Custom Tax" + taxFromErp);
								// orderTotal = orderTotal + taxFromErp;
							}
						}
						// }
					} else {
						SalesOrderManagement salesObj = new SalesOrderManagementImpl();
						if (!(CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CREATE_QUOTE_CART"))
								.equalsIgnoreCase("Y"))) {
							if (CommonUtility.customServiceUtility() != null) {
								quoteResponse = CommonUtility.customServiceUtility().createQuote(createQuoteInput);
							}
							if (quoteResponse != null) {
								session.removeAttribute("quoteResponseCimm2BCentralShipVia");
								session.setAttribute("quoteResponseCimm2BCentralShipVia",
										quoteResponse.getCimm2BCentralShipVia());
							} else {
								quoteResponse = salesObj.createQuote(createQuoteInput);
							}
							taxFromErp = quoteResponse.getTax();
							if (quoteResponse != null && CommonUtility.customServiceUtility() != null) {
								CommonUtility.customServiceUtility().setQuoteTotal(quoteResponse, total);
							}
						}
					}
					if (quoteResponse != null && !CommonUtility.validateString(quoteResponse.getQuoteNumber()).trim()
							.equalsIgnoreCase("")) {
						session.setAttribute("quoteNumber", quoteResponse.getQuoteNumber().trim());
					}

				} else {
					quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
					System.out.println((String) session.getAttribute("quoteNumber"));
				}

				String quoteNumber = "";
				String createQuoteResponse = "";
				if (quoteResponse != null) {
					quoteNumber = CommonUtility.validateString(quoteResponse.getQuoteNumber());
					if (quoteNumber != null && !quoteNumber.trim().equalsIgnoreCase("")) {
						session.setAttribute("quoteNumber", quoteNumber);
					} else {
						createQuoteResponse = quoteResponse.getStatusDescription();
					}
					session.setAttribute("quoteResponse", quoteResponse);
				}
				System.out.println("Req Date : " + reqDate);
				// orderTotal = total+taxFromErp;
				orderTotal = total + taxFromErp - totalSavingOnOrder;

				/*
				 * //-- Feb 28- 2018 - changed and moved to else block below freight was pulled
				 * from Ship cost table if(freightValue!=null &&
				 * freightValue.getFreightValue()>0){ orderTotal =
				 * orderTotal+freightValue.getFreightValue(); //orderTotal =
				 * orderTotal+freightValue.getFreightValue() - orderDiscountVal; }
				 */

				if (CommonUtility.customServiceUtility() != null) {
					totalCartFrieghtCharges = CommonUtility.customServiceUtility().getFrieghtCharges(shipViaDisplay,
							session, customFieldVal, totalCartFrieghtCharges, freightValue);// Electrozad Custom Service
				}
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ERP"))
						.equalsIgnoreCase("cimm2bcentral")) {
					if (quoteResponse != null) {
						taxFromErp = quoteResponse.getTax();
						if (quoteResponse.getTotal() > 0) {
							if (!(CommonUtility
									.validateString(
											CommonDBQuery.getSystemParamtersList().get("DISABLE_CREATE_QUOTE_CART"))
									.equalsIgnoreCase("Y"))) {
								orderTotal = CommonUtility.roundHalfUp(CommonUtility
										.validateParseDoubleToString(quoteResponse.getTotal() - orderDiscountVal));
							} else {
								orderTotal = CommonUtility.roundHalfUp(CommonUtility.validateParseDoubleToString(
										quoteResponse.getTotal() + totalCartFrieghtCharges - orderDiscountVal));
							}
						} else {
							orderTotal = CommonUtility.roundHalfUp(CommonUtility.validateParseDoubleToString(
									total + taxFromErp + totalCartFrieghtCharges - orderDiscountVal));
						}
					} else {
						if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("WITHOUT_ROUNDUP"))
								.equalsIgnoreCase("Y")) {
							orderTotal = total + taxFromErp + totalCartFrieghtCharges - orderDiscountVal;
						} else {
							orderTotal = CommonUtility.roundHalfUp(CommonUtility.validateParseDoubleToString(
									total + taxFromErp + totalCartFrieghtCharges - orderDiscountVal));
						}
					}
				} else {
					if (freightValue != null && freightValue.getFreightValue() > 0) {
						totalCartFrieghtCharges = totalCartFrieghtCharges + freightValue.getFreightValue();
						// orderTotal = orderTotal+freightValue.getFreightValue();//-- Feb 28- 2018 -
						// freight was pulled from Ship cost table
						// orderTotal = orderTotal+freightValue.getFreightValue() - orderDiscountVal;
					}
					orderTotal = orderTotal + totalCartFrieghtCharges;
				}

				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				if (CommonUtility.validateString(checkOutPaymentType).length() > 0) {
					session.setAttribute("checkOutPaymentType", checkOutPaymentType);
				}

				contentObject.put("appliedCouponsArray", StringUtils.join(appliedCouponsArray, ","));
				contentObject.put("orderingType", CommonUtility.validateString(orderingType));
				contentObject.put("acceptPo", CommonUtility.validateString(acceptPo));
				contentObject.put("createQuoteResponse", createQuoteResponse);
				contentObject.put("quoteNumber", quoteNumber);
				contentObject.put("checkOutPaymentType", checkOutPaymentType);
				contentObject.put("subTotal", total);
				contentObject.put("orderTax", taxFromErp);
				contentObject.put("orderTotal", orderTotal);
				contentObject.put("quoteResponse", quoteResponse);
				contentObject.put("orderStatusCode", orderStatusCode);
				contentObject.put("defaultBillToId", defaultBillToId);
				contentObject.put("defaultShipToId", defaultShipToId);
				contentObject.put("billAddress", billAddress);
				contentObject.put("shipAddress", shipAddress);
				contentObject.put("cartListData", cartListData);
				contentObject.put("orderStatus", orderStatus);
				contentObject.put("customerReleaseNumber", customerReleaseNumber);
				contentObject.put("shippingAccountNumber", shippingAccountNumber);
				contentObject.put("shipVia", shipVia);
				contentObject.put("shipViaDisplay", shipViaDisplay);
				contentObject.put("shipViaServiceCode", shipViaServiceCode);
				contentObject.put("selectedShipCodeOption", selectedShipCodeOption);
				contentObject.put("savedGroupId", savedGroupId);
				contentObject.put("newsLetterSubscription", newsLetterSubscription);
				contentObject.put("shippingInstruction", shippingInstruction);
				contentObject.put("orderNotes", orderNotes);
				contentObject.put("poNumber", poNumber);
				contentObject.put("gasPoNumber", gasPoNumber);
				contentObject.put("orderedBy", orderedBy);
				contentObject.put("reqDate", reqDate);
				contentObject.put("isReOrder", isReOrder);
				contentObject.put("ccTransactionId", ccTransactionId);
				contentObject.put("freightValue", freightValue);
				contentObject.put("freightMessage", freightMessage);
				contentObject.put("shipViaDisplay", shipViaDisplay);
				contentObject.put("reqApprType", reqApprType);
				contentObject.put("orderStatusList", orderStatusList);
				contentObject.put("itemleveShipDisplay", itemleveShipDisplay);
				contentObject.put("customFieldVal", customFieldVal);
				contentObject.put("totalCartFrieghtCharges", totalCartFrieghtCharges);
				contentObject.put("requestType", requestType);
				contentObject.put("selectedBranch", selectedBranch);
				contentObject.put("invalidCoupons", StringUtils.join(invalidCoupons, ","));
				if (ccTransactionId != null && ccTransactionId.length() > 0) {
					contentObject.put("creditCardPayment", "Y");
					contentObject.put("cardHolder", cardHolder);
					contentObject.put("ccExp", ccExp);
					contentObject.put("ccType", ccType);
					contentObject.put("postalCode", postalCode);
					contentObject.put("streetAddress", streetAddress);
					contentObject.put("ccNumber", ccNumber);
				}

				contentObject.put("discountType", discountType);
				contentObject.put("couponResponse", (CimmOrder) session.getAttribute("couponsApllied"));
				contentObject.put("discountAvailed", discountAvailed);
				contentObject.put("appliedDiscountCoupons", appliedlDiscounts);
				contentObject.put("orderItemsDiscount", orderItemsDiscountVal);
				contentObject.put("orderDiscount", orderDiscountVal);
				contentObject.put("totalSavings", totalSavingOnOrder);
				contentObject.put("sendQuoteMail", sendQuoteMail);
				contentObject.put("erpUserContactID", erpUserContactID);
				contentObject.put("additionalName", additionalName);
				contentObject.put("additionalPickupPerson", additionalPickupPerson);
				contentObject.put("additionalEmailNotification", additionalEmailNotification);
				contentObject.put("custComments", custComments);
				contentObject.put("custCommentsShipToStore", custCommentsShipToStore);
				contentObject.put("notesIndicator", notesIndicator);
				if (CommonUtility.customServiceUtility() != null) {
					CommonUtility.customServiceUtility().setOrderValuesFromQuoteResponse(quoteResponse, contentObject);
				}
				boolean sendMailFlag = true;
				if (CommonUtility.validateString(sendQuoteMail).equalsIgnoreCase("Y")) {
					contentObject.put("quoteCreatedStatus", "Y");
					int sendMailCount = 0;
					int orderId = saveRequestQuote(session, request, isReOrder, savedGroupId, type, poNumber,
							billAddress, shipAddress, quoteResponse);

					if (quoteResponse != null && CommonUtility.validateString(quoteResponse.getStatusDescription())
							.toUpperCase().contains("ERROR") && !quoteResponse.isSendMailFlag()) {
						sendMailFlag = false;
						contentObject.put("quoteCreatedStatus", "N");
					}

					if (sendMailFlag) {
						SalesModel otherDetail = new SalesModel();
						otherDetail.setSession(session);
						otherDetail.setSendmailToSalesRepOnly(sendmailToSalesRepOnly);
						otherDetail.setSendQuoteMail(sendQuoteMail);
						sendMailCount = SalesDAO.sendConfirmationMail(orderId, userId, 0, null, otherDetail);
					}
					Connection conn = ConnectionManager.getDBConnection();
					deleteFromCart(conn, userId);
					ConnectionManager.closeDBConnection(conn);
				}

				if (CommonUtility.customServiceUtility() != null) {
					CommonUtility.customServiceUtility().getCreditBalanceDetails(session, userAddress, contentObject);// Electrozad
																														// Custom
																														// Service
				}
				renderContent = LayoutGenerator.templateLoader("ConfirmOrderPage", contentObject, null, null, null);
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		CommonUtility.endTimeAndDiffrenceDisplay(startTimer);
		return target;
	}

	public static Discount getItemDiscount(HttpSession session, int lineItemId, String partNumber, int orderQty) {
		Discount itemDiscount = null;
		try {

			if (session.getAttribute("availedDiscounts") != null) {
				Cart cart = (Cart) session.getAttribute("availedDiscounts");
				if (cart.isItemDiscountAvailed()) {
					for (LineItem discountlineItem : cart.getLineItems()) {
						if (discountlineItem.getPartNumber().equalsIgnoreCase(partNumber)
								&& discountlineItem.getLineItemId() == lineItemId
								&& discountlineItem.getOrderQuantity() == orderQty) {
							itemDiscount = discountlineItem.getAvailedDiscount();
						}
					}
				}
			}
		} catch (NullPointerException npe) {
			npe.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return itemDiscount;
	}

	public static List<Discount> getOrderDiscount(HttpSession session) {
		List<Discount> orderDiscounts = new ArrayList<Discount>();
		try {
			if (session.getAttribute("availedDiscounts") != null) {
				Cart cart = (Cart) session.getAttribute("availedDiscounts");
				if (cart.getAvailedDiscounts() != null) {
					orderDiscounts = cart.getAvailedDiscounts();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return orderDiscounts;
	}

	public static Discount getOrderShippingDiscount(HttpSession session) {
		Discount orderDiscount = null;
		try {
			if (session.getAttribute("availedDiscounts") != null) {
				Cart cart = (Cart) session.getAttribute("availedDiscounts");
				if (cart.getAvailedShippingDiscount() != null) {
					orderDiscount = cart.getAvailedShippingDiscount();
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return orderDiscount;
	}

	public static void clearSavedDiscounts(HttpSession session) {
		try {
			session.removeAttribute("availedDiscounts");
			session.removeAttribute("appliedDiscountCoupons");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String displayCreditCard() {
		target = SUCCESS;
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		System.out.println(address1);
		int userId = CommonUtility.validateNumber(sessionUserId);
		// String newsLetter = request.getParameter("newsLetterSubscription");
		// String newsLetterStatus = (String) session.getAttribute("newsLetter");
		HashMap<String, Integer> userAddressId;
		cardDetails = new ArrayList<CreditCardModel>();
		try {
			String reqApprType = request.getParameter("reqType");

			String userTransactionType = "";
			if (session != null && session.getAttribute("auUserLogin") != null) {
				userTransactionType = CommonUtility.validateString(session.getAttribute("auUserLogin").toString());
			}
			if (userTransactionType.equalsIgnoreCase("Y")) {
				UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
				sessionUserId = CommonUtility
						.validateString(CommonUtility.validateParseIntegerToString(userDetail.getUserId()));
				userId = CommonUtility.validateNumber(sessionUserId);
				String tempdefaultShipId = (String) session.getAttribute("defaultShipToId");
				if (userDetail != null) {
					if (userDetail.getShipAddress() != null) {
						tempdefaultShipId = CommonUtility
								.validateParseIntegerToString(userDetail.getShipAddress().getAddressBookId());
						shipEntityId = userDetail.getShipAddress().getEntityId();
					}
				}

				defaultShipToId = CommonUtility.validateNumber(tempdefaultShipId);
				userAddressId = UsersDAO
						.getDefaultAddressIdForBCAddressBook(CommonUtility.validateParseIntegerToString(userId));
				cardDetails = SalesDAO.getCreditCardDetails(userId);
				// defaultBillToId = userAddressId.get("Bill");
				if (userDetail.getBillAddress() != null) {
					defaultBillToId = userDetail.getBillAddress().getAddressBookId();
					billEntityId = userDetail.getBillAddress().getEntityId();
				}
				// HashMap<String, UsersModel> userAddress =
				// UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,CommonUtility.validateNumber(tempdefaultShipId));
				// billEntityId = userAddress.get("Bill").getEntityId();
				// shipEntityId = userAddress.get("Ship").getEntityId();

			} else {
				String tempdefaultShipId = (String) session.getAttribute("defaultShipToId");
				defaultShipToId = CommonUtility.validateNumber(tempdefaultShipId);
				userAddressId = UsersDAO
						.getDefaultAddressIdForBCAddressBook((String) session.getAttribute(Global.USERNAME_KEY));
				cardDetails = SalesDAO.getCreditCardDetails(userId);
				defaultBillToId = userAddressId.get("Bill");
				HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
						CommonUtility.validateNumber(tempdefaultShipId));
				billEntityId = userAddress.get("Bill").getEntityId();
				shipEntityId = userAddress.get("Ship").getEntityId();
			}

			// NewsLetter Part
			/*
			 * if(newsLetter!=null && newsLetter.equalsIgnoreCase("")&&
			 * newsLetterStatus.equalsIgnoreCase("Y")){ int update =
			 * UsersDAO.updateNewsLetterSubScripitonEmailCustomFields(sessionUserId,"N");
			 * System.out.println("STATUS=====================" +update);
			 * setIsnewsLetterupdatePI("Y"); }else{ if(newsLetter!=null &&
			 * newsLetter.equalsIgnoreCase("on")&& newsLetterStatus.equalsIgnoreCase("Y")){
			 * int update =
			 * UsersDAO.updateNewsLetterSubScripitonEmailCustomFields(sessionUserId,"N");
			 * System.out.println("STATUS=====================" +update);
			 * setIsnewsLetterupdatePI("Y"); } if(newsLetterStatus!=null &&
			 * newsLetterStatus.equalsIgnoreCase("N") && newsLetter!=null &&
			 * !newsLetter.equalsIgnoreCase("")){
			 * UsersDAO.updateNewsLetterSubScripitonEmailCustomFields(sessionUserId, "Y");
			 * setIsnewsLetterupdatePI("Y"); }else{ if(newsLetter!=null &&
			 * !newsLetter.equalsIgnoreCase("")&& newsLetterStatus.equalsIgnoreCase("")){
			 * UsersDAO.insertNewsLetterSubScripitonEmailCustomFields(sessionUserId);
			 * setIsnewsLetterupdatePI("Y"); } } if(newsLetter!=null &&
			 * newsLetter.equalsIgnoreCase("")&& newsLetterStatus.equalsIgnoreCase("N")){
			 * int update =
			 * UsersDAO.updateNewsLetterSubScripitonEmailCustomFields(sessionUserId,"N");
			 * System.out.println("STATUS=====================" +update);
			 * setIsnewsLetterupdatePI("Y"); } }
			 */
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			contentObject.put("savedGroupId", savedGroupId);

			// ---Billing
			if (CommonUtility.validateString(billEntityId).length() < 1) {
				if (session.getAttribute("billEntityId_CC") != null) {
					billEntityId = (String) session.getAttribute("billEntityId_CC");
				}
			}
			if (defaultBillToId < 1) {
				if (session.getAttribute("defaultBillToId_CC") != null) {
					defaultBillToId = CommonUtility
							.validateNumber(session.getAttribute("defaultBillToId_CC").toString());
				}
			}
			if (CommonUtility.validateString(billAddress1).length() < 1) {
				if (session.getAttribute("billAddress1_CC") != null) {
					billAddress1 = (String) session.getAttribute("billAddress1_CC");
				}
			}
			if (CommonUtility.validateString(billAddress2).length() < 1) {
				if (session.getAttribute("billAddress2_CC") != null) {
					billAddress2 = (String) session.getAttribute("billAddress2_CC");
				}
			}
			if (CommonUtility.validateString(billCity).length() < 1) {
				if (session.getAttribute("billCity_CC") != null) {
					billCity = (String) session.getAttribute("billCity_CC");
				}
			}
			if (CommonUtility.validateString(billState).length() < 1) {
				if (session.getAttribute("billState_CC") != null) {
					billState = (String) session.getAttribute("billState_CC");
				}
			}
			if (CommonUtility.validateString(billPhoneNo).length() < 1) {
				if (session.getAttribute("billPhoneNo_CC") != null) {
					billPhoneNo = (String) session.getAttribute("billPhoneNo_CC");
				}
			}
			if (CommonUtility.validateString(billEmail).length() < 1) {
				if (session.getAttribute("billEmail_CC") != null) {
					billEmail = (String) session.getAttribute("billEmail_CC");
				}
			}
			if (CommonUtility.validateString(billCountry).length() < 1) {
				if (session.getAttribute("billCountry_CC") != null) {
					billCountry = (String) session.getAttribute("billCountry_CC");
				}
			}
			if (CommonUtility.validateString(billZipcode).length() < 1) {
				if (session.getAttribute("billZipcode_CC") != null) {
					billZipcode = (String) session.getAttribute("billZipcode_CC");
				}
			}
			contentObject.put("billEntityId", billEntityId);
			contentObject.put("defaultBillToId", defaultBillToId);
			contentObject.put("billAddress1", billAddress1);
			contentObject.put("billAddress2", billAddress2);
			contentObject.put("billCity", billCity);
			contentObject.put("billState", billState);
			contentObject.put("billPhoneNo", billPhoneNo);
			contentObject.put("billEmail", billEmail);
			contentObject.put("billCountry", billCountry);
			contentObject.put("billZipcode", billZipcode);
			// ---Billing

			// ---Shipping
			if (CommonUtility.validateString(shipEntityId).length() < 1) {
				if (session.getAttribute("shipEntityId_CC") != null) {
					shipEntityId = (String) session.getAttribute("shipEntityId_CC");
				}
			}
			if (CommonUtility.validateString(overrideShip).length() < 1) {
				if (session.getAttribute("overrideShip_CC") != null) {
					overrideShip = (String) session.getAttribute("overrideShip_CC");
				}
			}
			if (defaultShipToId < 1) {
				if (session.getAttribute("defaultShipToId_CC") != null) {
					defaultShipToId = CommonUtility
							.validateNumber(session.getAttribute("defaultShipToId_CC").toString());
				}
			}
			if (CommonUtility.validateString(address1).length() < 1) {
				if (session.getAttribute("address1_CC") != null) {
					address1 = (String) session.getAttribute("address1_CC");
				}
			}
			if (CommonUtility.validateString(address2).length() < 1) {
				if (session.getAttribute("address2_CC") != null) {
					address2 = (String) session.getAttribute("address2_CC");
				}
			}
			if (CommonUtility.validateString(city).length() < 1) {
				if (session.getAttribute("city_CC") != null) {
					city = (String) session.getAttribute("city_CC");
				}
			}
			if (CommonUtility.validateString(state).length() < 1) {
				if (session.getAttribute("state_CC") != null) {
					state = (String) session.getAttribute("state_CC");
				}
			}
			if (CommonUtility.validateString(phoneNumber).length() < 1) {
				if (session.getAttribute("phoneNumber_CC") != null) {
					phoneNumber = (String) session.getAttribute("phoneNumber_CC");
				}
			}
			if (CommonUtility.validateString(email).length() < 1) {
				if (session.getAttribute("email_CC") != null) {
					email = (String) session.getAttribute("email_CC");
				}
			}
			if (CommonUtility.validateString(country).length() < 1) {
				if (session.getAttribute("country_CC") != null) {
					country = (String) session.getAttribute("country_CC");
				}
			}
			if (CommonUtility.validateString(zipCode).length() < 1) {
				if (session.getAttribute("zipCode_CC") != null) {
					zipCode = (String) session.getAttribute("zipCode_CC");
				}
			}
			contentObject.put("shipEntityId", shipEntityId);
			contentObject.put("overrideShip", overrideShip);
			contentObject.put("defaultShipToId", defaultShipToId);
			contentObject.put("address1", address1);
			contentObject.put("address2", address2);
			contentObject.put("city", city);
			contentObject.put("state", state);
			contentObject.put("phoneNumber", phoneNumber);
			contentObject.put("email", email);
			contentObject.put("country", country);
			contentObject.put("zipCode", zipCode);
			// ---Shipping

			// ---Order Details
			if (CommonUtility.validateString(orderType).length() < 1) {
				if (session.getAttribute("orderType_CC") != null) {
					orderType = (String) session.getAttribute("orderType_CC");
				}
			}
			if (CommonUtility.validateString(reqDate).length() < 1) {
				if (session.getAttribute("reqDate_CC") != null) {
					reqDate = (String) session.getAttribute("reqDate_CC");
				}
			}
			if (CommonUtility.validateString(orderedBy).length() < 1) {
				if (session.getAttribute("orderedBy_CC") != null) {
					orderedBy = (String) session.getAttribute("orderedBy_CC");
				}
			}
			if (CommonUtility.validateString(poNumber).length() < 1) {
				if (session.getAttribute("poNumber_CC") != null) {
					poNumber = (String) session.getAttribute("poNumber_CC");
				}
			}
			if (CommonUtility.validateString(shipVia).length() < 1) {
				if (session.getAttribute("shipVia_CC") != null) {
					shipVia = (String) session.getAttribute("shipVia_CC");
				}
			}
			if (CommonUtility.validateString(shipViaDescription).length() < 1) {
				if (session.getAttribute("shipViaDescription_CC") != null) {
					shipViaDescription = (String) session.getAttribute("shipViaDescription_CC");
				}
			}
			if (CommonUtility.validateString(orderStatus).length() < 1) {
				if (session.getAttribute("orderStatus_CC") != null) {
					orderStatus = (String) session.getAttribute("orderStatus_CC");
				}
			}
			if (CommonUtility.validateString(shippingInstruction).length() < 1) {
				if (session.getAttribute("shippingInstruction_CC") != null) {
					shippingInstruction = (String) session.getAttribute("shippingInstruction_CC");
				}
			}
			if (CommonUtility.validateString(orderNotes).length() < 1) {
				if (session.getAttribute("orderNotes_CC") != null) {
					orderNotes = (String) session.getAttribute("orderNotes_CC");
				}
			}
			if (CommonUtility.validateString(newsLetterSubscription).length() < 1) {
				if (session.getAttribute("newsLetterSubscription_CC") != null) {
					newsLetterSubscription = (String) session.getAttribute("newsLetterSubscription_CC");
				}
			}
			if (CommonUtility.validateString(customerReleaseNumber).length() < 1) {
				if (session.getAttribute("customerReleaseNumber_CC") != null) {
					customerReleaseNumber = (String) session.getAttribute("customerReleaseNumber_CC");
				}
			}
			if (CommonUtility.validateString(isReOrder).length() < 1) {
				if (session.getAttribute("isReOrder_CC") != null) {
					isReOrder = (String) session.getAttribute("isReOrder_CC");
				}
			}
			if (CommonUtility.validateString(upsFrieghtCharges).length() < 1) {
				if (session.getAttribute("upsFrieghtCharges_CC") != null && CommonUtility
						.validateString(session.getAttribute("upsFrieghtCharges_CC").toString()).length() > 0) {
					upsFrieghtCharges = (String) session.getAttribute("upsFrieghtCharges_CC");
				}
			}
			contentObject.put("orderType", orderType);
			contentObject.put("reqDate", reqDate);
			contentObject.put("orderedBy", orderedBy);
			contentObject.put("poNumber", poNumber);
			contentObject.put("shipVia", shipVia);
			contentObject.put("shipViaDescription", shipViaDescription);
			contentObject.put("orderStatus", orderStatus);
			contentObject.put("shippingInstruction", shippingInstruction);
			contentObject.put("orderNotes", orderNotes);
			contentObject.put("newsLetterSubscription", newsLetterSubscription);
			contentObject.put("customerReleaseNumber", customerReleaseNumber);
			contentObject.put("isReOrder", isReOrder);
			contentObject.put("upsFrieghtCharges", upsFrieghtCharges);
			// ---Order Details

			// ---payment
			contentObject.put("cardDetails", cardDetails);
			contentObject.put("erpQuoteNumber", erpQuoteNumber);
			contentObject.put("creditCardPayment", creditCardPayment);
			contentObject.put("ccTransactionId", ccTransactionId);
			contentObject.put("cardHolder", cardHolder);
			contentObject.put("ccExp", ccExp);
			contentObject.put("streetAddress", streetAddress);
			contentObject.put("postalCode", postalCode);
			contentObject.put("ccResponseCode", ccResponseCode);
			contentObject.put("ccStatus", ccStatus);

			contentObject.put("ccHostRefNumber", ccHostRefNumber);
			contentObject.put("ccTaskID", ccTaskID);
			contentObject.put("ccAmount", ccAmount);
			contentObject.put("ccDeclineResponseReason", ccDeclineResponseReason);
			contentObject.put("ccCvv2VrfyCode", ccCvv2VrfyCode);
			contentObject.put("ccTip", ccTip);

			contentObject.put("ccTransTimeStamp", ccTransTimeStamp);
			contentObject.put("ccApprovedAmount", ccApprovedAmount);
			contentObject.put("ccRequestedAmount", ccRequestedAmount);
			contentObject.put("ccHostResponseCode", ccHostResponseCode);
			contentObject.put("ccInvoice", ccInvoice);
			contentObject.put("ccApprovalCode", ccApprovalCode);
			contentObject.put("ccServerTimestamp", ccServerTimestamp);

			contentObject.put("ccType", ccType);
			contentObject.put("ccFee", ccFee);
			contentObject.put("ccExternalSessionID", ccExternalSessionID);
			contentObject.put("ccAddVrfyCode", ccAddVrfyCode);
			contentObject.put("ccTax", ccTax);
			contentObject.put("ccNewDomainKey", ccNewDomainKey);
			contentObject.put("ccNumber", ccNumber);
			contentObject.put("isFromQC", isFromQC);
			// ---payment
			contentObject.put("reqApprType", reqApprType);
			renderContent = LayoutGenerator.templateLoader("CreditCardDetail", contentObject, null, null, null);

		} catch (Exception e) {
			target = "SESSIONEXPIRED";
			e.printStackTrace();
		}
		return target;
	}

	public String TsysCancel() {
		HttpServletRequest request = ServletActionContext.getRequest();
		try {
			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);

			if (userId > 1) {
				renderContent = LayoutGenerator.templateLoader("TsysCancelPage", null, null, null, null);
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return target;
	}

	public String TsysError() {
		HttpServletRequest request = ServletActionContext.getRequest();

		try {

			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);

			if (userId > 1) {

				String responseCode = request.getParameter("responseCode");
				String status = request.getParameter("status");
				String requestedAmount = request.getParameter("requestedAmount");
				String declineReason = request.getParameter("declineReason");
				String externalSessionID = request.getParameter("externalSessionID");

				System.out.println("ResponseCode : " + responseCode);
				System.out.println("Status : " + status);
				System.out.println("RequestedAmount : " + requestedAmount);
				System.out.println("DeclineReason : " + declineReason);
				System.out.println("ExternalSessionID : " + externalSessionID);

				double reqAmt = 0.0;
				if (requestedAmount != null && requestedAmount.trim().length() > 0) {
					reqAmt = (Double.parseDouble(requestedAmount) / 100);
					requestedAmount = Double.toString(reqAmt);
				}

				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				contentObject.put("paymentGateWayResponseCode", responseCode);
				contentObject.put("paymentGateWayStatus", status);
				contentObject.put("paymentGateWayRequestedAmount", requestedAmount);
				contentObject.put("paymentGateWayDeclineReason", declineReason);
				contentObject.put("paymentGateWayExternalSessionID", externalSessionID);
				renderContent = LayoutGenerator.templateLoader("TsysErrorPage", contentObject, null, null, null);
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;

	}

	public String TsysResponse() throws ArrayIndexOutOfBoundsException, SQLException, NullPointerException {

		HttpServletRequest request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();

		try {

			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);

			if (userId > 1) {
				session.removeAttribute("orderNumber");
				String hostRefNumber = request.getParameter("hostRefNumber");
				String declineReason = request.getParameter("declineReason");
				String cvv2VrfyCode = request.getParameter("cvv2VrfyCode");
				String tip = request.getParameter("tip");
				String taskID = request.getParameter("taskID");
				String amount = request.getParameter("amount");
				String transTimeStamp = request.getParameter("transTimeStamp");
				String responseCode = request.getParameter("responseCode");
				String status = request.getParameter("status");
				String requestedAmount = request.getParameter("requestedAmount");
				String invoice = request.getParameter("invoice");
				String token = request.getParameter("token");
				String approvedAmount = request.getParameter("approvedAmount");
				String hostResponseCode = request.getParameter("hostResponseCode");
				String approvalCode = request.getParameter("approvalCode");
				String transactionID = request.getParameter("transactionID");
				String serverTimestamp = request.getParameter("serverTimestamp");
				String cardType = request.getParameter("cardType");
				String fee = request.getParameter("fee");
				String externalSessionID = request.getParameter("externalSessionID");
				String addVrfyCode = request.getParameter("addVrfyCode");
				String tax = request.getParameter("tax");
				String newDomainKey = request.getParameter("newDomainKey");
				String cardNumber = request.getParameter("cardNumber");
				String name = request.getParameter("name");
				String creditCartApprovedStatus = CommonDBQuery.getSystemParamtersList()
						.get("PAYMENT_GATEWAY_APPROVED_STATUS");
				double tot = 0;
				if (amount != null && amount.trim().length() > 0) {
					tot = Double.parseDouble(amount);
					tot = tot / 100;

					System.out.println("creditCartApprovedStatus : " + creditCartApprovedStatus);
					System.out.println("tot : " + tot);
					System.out.println("hostRefNumber : " + request.getParameter("hostRefNumber"));
					System.out.println("declineReason : " + request.getParameter("declineReason"));
					System.out.println("cvv2VrfyCode : " + request.getParameter("cvv2VrfyCode"));
					System.out.println("tip: " + request.getParameter("tip"));
					System.out.println("taskID: " + request.getParameter("taskID"));
					System.out.println("amount: " + request.getParameter("amount"));
					System.out.println("transTimeStamp : " + request.getParameter("transTimeStamp"));
					System.out.println("ResponseCode : " + request.getParameter("responseCode"));
					System.out.println("Status : " + request.getParameter("status"));
					System.out.println("RequestedAmount : " + requestedAmount);
					System.out.println("Invoice : " + invoice);
					System.out.println("Token : " + token);
					System.out.println("ApprovedAmount : " + approvedAmount);
					System.out.println("HostResponseCode : " + hostResponseCode);
					System.out.println("ApprovalCode : " + approvalCode);
					System.out.println("TransactionID : " + transactionID);
					System.out.println("ServerTimestamp : " + serverTimestamp);
					System.out.println("CardType : " + cardType);
					System.out.println("Fee : " + fee);
					System.out.println("ExternalSessionID : " + externalSessionID);
					System.out.println("AddVrfyCode : " + addVrfyCode);
					System.out.println("Tax : " + tax);
					System.out.println("NewDomainKey : " + newDomainKey);
					System.out.println("CardNumber : " + cardNumber);
					System.out.println("name : " + name);

					LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
					contentObject.put("creditCartApprovedStatus", creditCartApprovedStatus);
					contentObject.put("paymentGateWayHostRefNumber", hostRefNumber);
					contentObject.put("paymentGateWayCvv2VrfyCode", cvv2VrfyCode);
					contentObject.put("paymentGateWayDeclineResponseReason", declineReason);
					contentObject.put("paymentGateWayTip", tip);
					contentObject.put("paymentGateWayTaskID", taskID);
					contentObject.put("paymentGateWayAmount", amount);
					contentObject.put("paymentGateWayTransTimeStamp", transTimeStamp);
					contentObject.put("paymentGateWayResponseCode", responseCode);
					contentObject.put("paymentGateWayStatus", status);
					contentObject.put("paymentGateWayRequestedAmount", requestedAmount);
					contentObject.put("paymentGateWayInvoice", invoice);
					contentObject.put("paymentGateWayToken", token);
					contentObject.put("paymentGateWayapprovedAmount", approvedAmount);
					contentObject.put("paymentGateWayhostResponseCode", hostResponseCode);
					contentObject.put("paymentGateWayApprovalCode", approvalCode);
					contentObject.put("paymentGateWayTransactionID", transactionID);
					contentObject.put("paymentGateWayServerTimestamp", serverTimestamp);
					contentObject.put("paymentGateWayCardType", cardType);
					contentObject.put("paymentGateWayFee", fee);
					contentObject.put("paymentGateWayExternalSessionID", externalSessionID);
					contentObject.put("paymentGateWayAddVrfyCode", addVrfyCode);
					contentObject.put("paymentGateWayTax", tax);
					contentObject.put("paymentGateWayNewDomainKey", newDomainKey);
					contentObject.put("paymentGateWayCardNumber", cardNumber);
					contentObject.put("cardHolder", name);
					renderContent = LayoutGenerator.templateLoader("CreditCardResponse", contentObject, null, null,
							null);
					/*
					 * renderContent = LayoutGenerator.templateLoader("TsysResponsePage",
					 * contentObject , null, null, null); conn =
					 * ConnectionManager.getDBConnection(); String tempSubset = (String)
					 * session.getAttribute("userSubsetId"); int subsetId =
					 * CommonUtility.validateNumber(tempSubset); String tempGeneralSubset = (String)
					 * session.getAttribute("generalCatalog"); int generalSubset =
					 * CommonUtility.validateNumber(tempGeneralSubset); String sessionUserId =
					 * (String) session.getAttribute(Global.USERID_KEY); int userId =
					 * CommonUtility.validateNumber(sessionUserId); HashMap<String, Integer>
					 * userAddressId; userAddressId =
					 * UsersDAO.getDefaultAddressIdForBCAddressBook((String)session.getAttribute(
					 * Global.USERNAME_KEY));
					 * 
					 * defaultBillToId = userAddressId.get("Bill"); String defaultShiptoId =
					 * (String) session.getAttribute("defaultShipToId"); HashMap<String, UsersModel>
					 * userAddress =
					 * UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,CommonUtility.
					 * validateNumber(defaultShiptoId)); UsersModel userBillAddress =
					 * userAddress.get("Bill"); UsersModel userShipAddress =
					 * userAddress.get("Ship");
					 * 
					 * creditCardValue = new CreditCardModel();
					 * creditCardValue.setCardHolder(cardHolder);
					 * creditCardValue.setCreditCardNumber(ccNumber);
					 * creditCardValue.setDate(ccExp);
					 * creditCardValue.setElementPaymentAccountId(ccTransactionId);
					 * creditCardValue.setCreditCardType(ccType);
					 * creditCardValue.setAddress1(streetAddress);
					 * creditCardValue.setZipCode(postalCode); String paymentMethod = "Credit Card";
					 * 
					 * SalesOrderManagementModel salesOrderInput = new SalesOrderManagementModel();
					 * salesOrderInput.setCreditCardValue(creditCardValue);
					 * salesOrderInput.setPurchaseOrderNumber(poNumber);
					 * salesOrderInput.setShippingInstruction(shippingInstruction);
					 * salesOrderInput.setOrderNotes(orderNotes);
					 * salesOrderInput.setOrderedBy(orderedBy); salesOrderInput.setReqDate(reqDate);
					 * 
					 * String ipaddress = request.getHeader("X-Forwarded-For"); if(ipaddress ==
					 * null){ ipaddress = request.getRemoteAddr(); }
					 * 
					 * orderId = saveOrder(conn, userId, userBillAddress, userShipAddress,
					 * "webOrder",
					 * taxExempt,hostRefNumber,paymentMethod,ccNumber,ccExp,cardHolder,poNumber,
					 * ipaddress);
					 * 
					 * int res = SalesDAO.updateNewProductItem(conn, orderId, amount);
					 */
				}
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String OnlinMartResponse() throws ArrayIndexOutOfBoundsException, SQLException, NullPointerException {

		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();

		try {
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);

			if (userId > 1) {
				session.removeAttribute("orderNumber");
				String responseCode = request.getParameter("trnApproved");
				String transactionID = request.getParameter("trnId");
				String status = request.getParameter("messageText");
				String approvedAmount = request.getParameter("trnAmount");
				String transTimeStamp = request.getParameter("trnDate");
				String name = request.getParameter("trnCustomerName");
				String cardType = request.getParameter("cardType");

				String messageId = request.getParameter("messageId");
				String authCode = request.getParameter("authCode");
				String responseType = request.getParameter("responseType");
				String orderNumber = request.getParameter("trnOrderNumber");
				String trnLanguage = request.getParameter("trnLanguage");
				String trnEmailAddress = request.getParameter("trnEmailAddress");
				String trnPhoneNumber = request.getParameter("trnPhoneNumber");
				String avsProcessed = request.getParameter("avsProcessed");
				String avsId = request.getParameter("avsId");
				String avsResult = request.getParameter("avsResult");
				String avsAddrMatch = request.getParameter("avsAddrMatch");
				String avsPostalMatch = request.getParameter("avsPostalMatch");
				String avsMessage = request.getParameter("avsMessage");
				String cvdId = request.getParameter("cvdId");
				String trnType = request.getParameter("trnType");
				String paymentMethod = request.getParameter("paymentMethod");
				String ref1 = request.getParameter("ref1");
				String ref2 = request.getParameter("ref2");
				String ref3 = request.getParameter("ref3");
				String ref4 = request.getParameter("ref4");
				String ref5 = request.getParameter("ref5");

				System.out.println("creditCartApprovedStatus : " + creditCartApprovedStatus);
				System.out.println("responseCode : " + responseCode);
				System.out.println("transactionID : " + transactionID);
				System.out.println("status : " + status);
				System.out.println("approvedAmount : " + approvedAmount);
				System.out.println("transTimeStamp : " + transTimeStamp);
				System.out.println("name : " + name);
				System.out.println("cardType : " + cardType);
				System.out.println("messageId : " + messageId);
				System.out.println("authCode : " + authCode);
				System.out.println("responseType : " + responseType);
				System.out.println("orderNumber : " + orderNumber);
				System.out.println("trnLanguage : " + trnLanguage);
				System.out.println("trnEmailAddress : " + trnEmailAddress);
				System.out.println("trnPhoneNumber : " + trnPhoneNumber);
				System.out.println("avsProcessed : " + avsProcessed);
				System.out.println("avsId : " + avsId);
				System.out.println("avsResult : " + avsResult);
				System.out.println("avsAddrMatch : " + avsAddrMatch);
				System.out.println("avsPostalMatch : " + avsPostalMatch);
				System.out.println("avsMessage : " + avsMessage);
				System.out.println("cvdId : " + cvdId);
				System.out.println("trnType : " + trnType);
				System.out.println("paymentMethod : " + paymentMethod);
				System.out.println("ref1 : " + ref1);
				System.out.println("ref2 : " + ref2);
				System.out.println("ref3 : " + ref3);
				System.out.println("ref4 : " + ref4);
				System.out.println("ref5 : " + ref5);

				String creditCartApprovedStatus = CommonDBQuery.getSystemParamtersList()
						.get("PAYMENT_GATEWAY_APPROVED_STATUS");
				double tot = 0;

				if (transactionID != null && transactionID.trim().length() > 0 && approvedAmount != null
						&& approvedAmount.trim().length() > 0) {

					tot = Double.parseDouble(approvedAmount);

					LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
					contentObject.put("creditCartApprovedStatus", creditCartApprovedStatus);
					contentObject.put("paymentGateWayTransactionID", transactionID);
					contentObject.put("paymentGateWayTransTimeStamp", transTimeStamp);
					contentObject.put("paymentGateWayResponseCode", responseCode);
					contentObject.put("paymentGateWayStatus", status);
					contentObject.put("paymentGateWayCardType", cardType);
					contentObject.put("paymentGateWayapprovedAmount", approvedAmount);
					contentObject.put("cardHolder", name);

					contentObject.put("messageId", messageId);
					contentObject.put("authCode", authCode);
					contentObject.put("responseType", responseType);
					contentObject.put("orderNumber", orderNumber);
					contentObject.put("trnLanguage", trnLanguage);
					contentObject.put("trnEmailAddress", trnEmailAddress);
					contentObject.put("trnPhoneNumber", trnPhoneNumber);
					contentObject.put("avsProcessed", avsProcessed);
					contentObject.put("avsId", avsId);
					contentObject.put("avsResult", avsResult);
					contentObject.put("avsAddrMatch", avsAddrMatch);
					contentObject.put("avsPostalMatch", avsPostalMatch);
					contentObject.put("avsMessage", avsMessage);
					contentObject.put("cvdId", cvdId);
					contentObject.put("trnType", trnType);
					contentObject.put("paymentMethod", paymentMethod);
					contentObject.put("ref1", ref1);
					contentObject.put("ref2", ref2);
					contentObject.put("ref3", ref3);
					contentObject.put("ref4", ref4);
					contentObject.put("ref5", ref5);

					/*
					 * contentObject.put("paymentGateWayHostRefNumber",hostRefNumber);
					 * contentObject.put("paymentGateWayCvv2VrfyCode",cvv2VrfyCode);
					 * contentObject.put("paymentGateWayDeclineResponseReason",declineReason);
					 * contentObject.put("paymentGateWayTip",tip);
					 * contentObject.put("paymentGateWayTaskID",taskID);
					 * contentObject.put("paymentGateWayAmount",amount);
					 * contentObject.put("paymentGateWayRequestedAmount",requestedAmount);
					 * contentObject.put("paymentGateWayInvoice",invoice);
					 * contentObject.put("paymentGateWayToken",token);
					 * contentObject.put("paymentGateWayhostResponseCode",hostResponseCode);
					 * contentObject.put("paymentGateWayApprovalCode",approvalCode);
					 * contentObject.put("paymentGateWayServerTimestamp",serverTimestamp);
					 * contentObject.put("paymentGateWayFee",fee);
					 * contentObject.put("paymentGateWayExternalSessionID",externalSessionID);
					 * contentObject.put("paymentGateWayAddVrfyCode",addVrfyCode);
					 * contentObject.put("paymentGateWayTax",tax);
					 * contentObject.put("paymentGateWayNewDomainKey",newDomainKey);
					 * contentObject.put("paymentGateWayCardNumber",cardNumber);
					 */

					if (status != null) {
						if (status.trim().equalsIgnoreCase("Approved")) {
							renderContent = LayoutGenerator.templateLoader("CreditCardResponse", contentObject, null,
									null, null);
						} else { // if(status.trim().equalsIgnoreCase("DECLINE"))
							renderContent = LayoutGenerator.templateLoader("CreditCardDeclinePage", contentObject, null,
									null, null);
						}
					}

				}
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String PaymentResponse() throws ArrayIndexOutOfBoundsException, SQLException, NullPointerException {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		try {
			String authStatus = null;
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String outStandingPayment = "N";
			if (session.getAttribute("outStandingPayment") != null) {
				outStandingPayment = CommonUtility.validateString((String) session.getAttribute("outStandingPayment"));
			}
			String userTransactionType = "";
			if (session != null && session.getAttribute("auUserLogin") != null) {
				userTransactionType = CommonUtility.validateString(session.getAttribute("auUserLogin").toString());
			}
			if (userTransactionType.equalsIgnoreCase("Y")) {
				UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
				sessionUserId = CommonUtility
						.validateString(CommonUtility.validateParseIntegerToString(userDetail.getUserId()));
				userId = CommonUtility.validateNumber(sessionUserId);
			}

			if (userId > 1) {

				String sysoValue = "";
				Enumeration<String> parameterNames = request.getParameterNames();
				System.out.println("-------------------------------------------");
				while (parameterNames.hasMoreElements()) {
					String paramName = parameterNames.nextElement();
					String[] paramValues = request.getParameterValues(paramName);
					// System.out.println("Name :" +paramName);
					for (int i = 0; i < paramValues.length; i++) {
						String paramValue = paramValues[i];
						sysoValue = sysoValue + "\n" + paramName + " : " + paramValue;
					}
				}
				System.out.println(sysoValue);
				System.out.println("-------------------------------------------");
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY"))
						.equals("TRUSTCOMMERCE")) {
					String authorizationResponse = TrustCommerceService.authorizePayment(request.getParameter("token"));
					Map<String, String> authStatusAsMap = TrustCommerceService.authStatusAsMap(authorizationResponse);
					contentObject.put("authStatusAsMap", authStatusAsMap);
					authStatus = authStatusAsMap.get("status");
					contentObject.put("authStatus", authStatus);
					System.out.println("Trust Commerce Authorization Status : " + authorizationResponse);
				}
				session.removeAttribute("orderNumber");
				String paymentGateWayInvoice = null;
				String paymentAccountId = null;
				String cardExpireDate = null;
				String paymentGateWayRequestedAmount = null;
				String sessionID = null;
				String arTransactionID = null;
				String cardExpireMonth = null;
				String cardExpireYear = null;
				String status = request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.message").trim());
				String authCode = request.getParameter(LayoutLoader.getMessageProperties().get("EN")
						.getProperty("creditcard.authorizationnumber").trim());
				String cardNumber = request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.cardNumber").trim());
				System.out.println("NG cardnumber -- " + request.getParameter("cardnumber"));
				String referencenumber = request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.referencenumber").trim());
				String result = request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.result").trim());
				if (request.getParameter(LayoutLoader.getMessageProperties().get("EN")
						.getProperty("creditcard.invoicenumber")) != null) {
					paymentGateWayInvoice = request.getParameter(LayoutLoader.getMessageProperties().get("EN")
							.getProperty("creditcard.invoicenumber").trim());
				}
				String cardType = request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.cardType").trim());
				String transactionID = request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.transactionId").trim());
				String tokenId = request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.tokenID").trim());
				String approvedAmount = request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.amount").trim());
				if (request.getParameter(LayoutLoader.getMessageProperties().get("EN")
						.getProperty("creditcard.originalamount")) != null) {
					paymentGateWayRequestedAmount = request.getParameter(LayoutLoader.getMessageProperties().get("EN")
							.getProperty("creditcard.originalamount").trim());
				}
				if (request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.sessionID")) != null) {
					sessionID = request.getParameter(
							LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.sessionID").trim());
				}
				if (request.getParameter(LayoutLoader.getMessageProperties().get("EN")
						.getProperty("creditcard.expirationcardMonth")) != null) {
					cardExpireMonth = request.getParameter(LayoutLoader.getMessageProperties().get("EN")
							.getProperty("creditcard.expirationcardMonth").trim());
				}
				if (request.getParameter(LayoutLoader.getMessageProperties().get("EN")
						.getProperty("creditcard.expirationcardMonth")) != null) {
					cardExpireYear = request.getParameter(LayoutLoader.getMessageProperties().get("EN")
							.getProperty("creditcard.expirationcardYear").trim());
				}
				if (request.getParameter(LayoutLoader.getMessageProperties().get("EN")
						.getProperty("creditcard.expirationcard")) != null) {
					cardExpireDate = request.getParameter(LayoutLoader.getMessageProperties().get("EN")
							.getProperty("creditcard.expirationcard").trim());
				}
				paymentAccountId = request.getParameter("PaymentAccountID");
				System.err.println("response paymentAccountId" + paymentAccountId);
				if (CommonUtility.validateString(paymentAccountId).equalsIgnoreCase("")
						&& CommonUtility.validateString(transactionID).length() > 1
						&& !CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY"))
								.equalsIgnoreCase("chargelogic")) {
					paymentAccountId = CIMM2VelocityTool.getInstance().paymentAccountCreate(transactionID);
					arTransactionID = transactionID;
				}

				if (CommonUtility.validateString(paymentAccountId).length() > 0) {
					Items response = CIMM2VelocityTool.getInstance().paymentAccountQuery(paymentAccountId);
					if (response != null && response.getItem() != null
							&& response.getItem().getPaymentAccountID() != null) {
						cardType = response.getItem().getPaymentBrand();
						transactionID = response.getItem().getPaymentAccountID();
						status = "Approved";
						cardNumber = response.getItem().getTruncatedCardNumber();
						contentObject.put("expMonth", response.getItem().getExpirationMonth());
						contentObject.put("expYear", response.getItem().getExpirationYear());
					}

				}
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY"))
						.equalsIgnoreCase("paytrace")) {
					String parmList = request.getParameter(
							LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.paramlist").trim());
					if (CommonUtility.validateString(parmList).length() > 0) {
						String[] silentPostResponse = parmList.split("\\|");
						String respTransactionId = null, respExpMonth = null, respExpYear = null, respCardNumber = null;
						for (int i = 0; i < silentPostResponse.length; i++) {
							String[] keyValuePair = silentPostResponse[i].split("~");
							String respKey = keyValuePair[0].trim();
							String respValue = keyValuePair[1].trim();
							if (respKey.equalsIgnoreCase("TRANSACTIONID")) {
								respTransactionId = respValue;
							} else if (respKey.equalsIgnoreCase("EXPMNTH")) {
								respExpMonth = respValue;
							} else if (respKey.equalsIgnoreCase("EXPYR")) {
								respExpYear = respValue;
							} else if (respKey.equalsIgnoreCase("LAST4")) {
								respCardNumber = respValue;
							}
						}
						if (CommonUtility.validateString(respTransactionId).length() > 0) {
							transactionID = CommonUtility.validateString(respTransactionId);
							cardExpireMonth = CommonUtility.validateString(respExpMonth);
							cardExpireYear = CommonUtility.validateString(respExpYear);
							cardNumber = CommonUtility.validateString(respCardNumber);
							status = "Approved";
						}
					}
				}
				System.out.println("status------- : " + status);
				System.out.println("authCode------ : " + authCode);
				System.out.println("cardNumber----------- : " + cardNumber);
				System.out.println("referencenumber : " + referencenumber);
				System.out.println("result----- : " + result);
				System.out.println("tokenId-------- : " + tokenId);
				System.out.println("invoicenumber : " + paymentGateWayInvoice);
				System.out.println("approvedAmount : " + approvedAmount);
				System.out.println("cardType : " + cardType);
				System.out.println("transactionID : " + transactionID);
				System.out.println("approvedAmount : " + approvedAmount);
				System.out.println("originalamount/paymentGateWayRequestedAmount : " + paymentGateWayRequestedAmount);
				System.out.println("sessionID : " + sessionID);
				System.out.println("cardExpireMonth : " + cardExpireMonth);
				System.out.println("cardExpireYear : " + cardExpireYear);
				System.out.println("cardExpireDate : " + cardExpireDate);

				String creditCartApprovedStatus = CommonDBQuery.getSystemParamtersList()
						.get("PAYMENT_GATEWAY_APPROVED_STATUS");
				double tot1 = 0;
				System.out.println("transactionID-------" + transactionID);
				if ((transactionID != null && transactionID.trim().length() > 0
						&& !transactionID.trim().equalsIgnoreCase("null"))
						|| (authStatus != null && authStatus.toUpperCase().equals("APPROVED"))) {

					contentObject.put("creditCartApprovedStatus", creditCartApprovedStatus);
					contentObject.put("arTransactionID", arTransactionID);
					contentObject.put("paymentGateWayStatus", status);
					contentObject.put("paymentGateWayApprovalCode", authCode);
					contentObject.put("paymentGateWayCardNumber", cardNumber);
					contentObject.put("paymentGateWayRefrenceNumber", referencenumber);
					contentObject.put("paymentGateWayresult", result);
					contentObject.put("paymentGateWayInvoice", paymentGateWayInvoice);
					contentObject.put("paymentGateWayapprovedAmount", approvedAmount);
					contentObject.put("paymentGateWayCardType", cardType);
					contentObject.put("paymentGateWayTransactionID", transactionID);
					contentObject.put("paymentGateWayAccountTokenId", tokenId);
					contentObject.put("orderNumber", orderNumber);
					contentObject.put("paymentGateWayRequestedAmount", paymentGateWayRequestedAmount);
					contentObject.put("paymentGateWayResponseCode", referencenumber);
					contentObject.put("paymentGateWayCardExpireMonth", cardExpireMonth);
					contentObject.put("paymentGateWayCardExpireYear", cardExpireYear);
					contentObject.put("paymentGateWayCardExpireDate", cardExpireDate);

					//
					// contentObject.put("paymentGateWayTransTimeStamp",transTimeStamp);
					// contentObject.put("cardHolder",name);
					// contentObject.put("messageId",messageId);
					// contentObject.put("responseType",responseType);
					// contentObject.put("trnLanguage",trnLanguage);
					// contentObject.put("trnEmailAddress",trnEmailAddress);
					// contentObject.put("trnPhoneNumber",trnPhoneNumber);
					// contentObject.put("avsProcessed",avsProcessed);
					// contentObject.put("avsId",avsId);
					// contentObject.put("avsResult",avsResult);
					// contentObject.put("avsAddrMatch",avsAddrMatch);
					// contentObject.put("avsPostalMatch",avsPostalMatch);
					// contentObject.put("avsMessage",avsMessage);
					// contentObject.put("cvdId",cvdId);
					// contentObject.put("trnType",trnType);
					// contentObject.put("paymentMethod",paymentMethod);
					// contentObject.put("ref1",ref1);
					// contentObject.put("ref2",ref2);
					// contentObject.put("ref3",ref3);
					// contentObject.put("ref4",ref4);
					// contentObject.put("ref5",ref5);

					if (CommonUtility.validateString(status).toUpperCase().contains("APPROVED")
							|| CommonUtility.validateString(authStatus).equalsIgnoreCase("Approved")
							|| CommonUtility.validateString(status).equalsIgnoreCase("Approve")) {
						if (userTransactionType.equalsIgnoreCase("Y")) {
							renderContent = LayoutGenerator.templateLoader("CreditCardResponseWithoutLogin",
									contentObject, null, null, null);
						} else {
							ArrayList<SalesModel> orderDetailList = null;
							String erpOrderNumbers = "";
							String delimit = "";
							if (CommonUtility.validateString(outStandingPayment).equalsIgnoreCase("Y")) {
								if (session.getAttribute("OutStandingOrderPaymentList") != null) {
									orderDetailList = (ArrayList<SalesModel>) session
											.getAttribute("OutStandingOrderPaymentList");
									if (orderDetailList != null && !orderDetailList.isEmpty()) {
										for (SalesModel objectModel : orderDetailList) {
											erpOrderNumbers = erpOrderNumbers + delimit + objectModel.getOrderNum();
											delimit = ",";
										}
									}
								}
								cardNumber = cardNumber.replaceAll("XXXX-", "");
								cardNumber = cardNumber.replaceAll("\\*", "");
								cardNumber = cardNumber.replaceAll("#", "");
								cardNumber = cardNumber.replaceAll("-", "");
								// SalesDAO.outStandingPaymentDAOUpdate(transactionID, authCode,
								// referencenumber, status,Double.valueOf(approvedAmount), erpOrderNumbers,
								// cardNumber);

								contentObject.put("erpOrderNumbers", erpOrderNumbers);
								contentObject.put("orderDetailList", orderDetailList);
							}
							renderContent = LayoutGenerator.templateLoader("CreditCardResponse", contentObject, null,
									null, null);

						}
					} else { // if(status.trim().equalsIgnoreCase("DECLINE"))
						renderContent = LayoutGenerator.templateLoader("CreditCardDeclinePage", contentObject, null,
								null, null);
					}
				} else {

					contentObject.put("creditCartApprovedStatus", creditCartApprovedStatus);
					contentObject.put("paymentGateWayStatus", status);
					contentObject.put("paymentGateWayApprovalCode", authCode);
					contentObject.put("paymentGateWayCardNumber", cardNumber);
					contentObject.put("paymentGateWayRefrenceNumber", referencenumber);
					contentObject.put("paymentGateWayresult", result);
					contentObject.put("paymentGateWayInvoice", paymentGateWayInvoice);
					contentObject.put("paymentGateWayapprovedAmount", approvedAmount);
					contentObject.put("paymentGateWayCardType", cardType);
					contentObject.put("paymentGateWayTransactionID", transactionID);
					contentObject.put("paymentGateWayAccountTokenId", tokenId);
					contentObject.put("orderNumber", orderNumber);
					contentObject.put("paymentGateWayRequestedAmount", paymentGateWayRequestedAmount);
					renderContent = LayoutGenerator.templateLoader("CreditCardDeclinePage", contentObject, null, null,
							null);
				}
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String PayPalResponse() throws ArrayIndexOutOfBoundsException, SQLException, NullPointerException {

		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		session.removeAttribute("PaypalAuthorizationId");
		session.removeAttribute("payPalPayerId");
		session.removeAttribute("payPalApprovedAmt");
		System.out.println("Freight Sessions===" + session.getAttribute("fragileFreightRate") + "|"
				+ session.getAttribute("hazmatFreightRate") + "|" + session.getAttribute("oversizeFreightRate"));
		try {
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String outStandingPayment = "N";
			AddressModel overrideShipAddress = (AddressModel) session.getAttribute("overrideShipAddress");
			if (session.getAttribute("outStandingPayment") != null) {
				outStandingPayment = CommonUtility.validateString((String) session.getAttribute("outStandingPayment"));
			}
			String userTransactionType = "";
			if (session != null && session.getAttribute("auUserLogin") != null) {
				userTransactionType = CommonUtility.validateString(session.getAttribute("auUserLogin").toString());
			}
			if (userTransactionType.equalsIgnoreCase("Y")) {
				UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
				sessionUserId = CommonUtility
						.validateString(CommonUtility.validateParseIntegerToString(userDetail.getUserId()));
				userId = CommonUtility.validateNumber(sessionUserId);
				System.out.println("AU session" + sessionUserId);
			}

			if (userId > 1) {

				String sysoValue = "";
				Enumeration<String> parameterNames = request.getParameterNames();
				System.out.println("-------------------------------------------");
				while (parameterNames.hasMoreElements()) {
					String paramName = parameterNames.nextElement();
					String[] paramValues = request.getParameterValues(paramName);
					// System.out.println("Name :" +paramName);
					for (int i = 0; i < paramValues.length; i++) {
						String paramValue = paramValues[i];
						sysoValue = sysoValue + "\n" + paramName + " : " + paramValue;
					}
				}
				System.out.println(sysoValue);
				System.out.println("-------------------------------------------");
				session.removeAttribute("orderNumber");

				String token = request
						.getParameter(LayoutLoader.getMessageProperties().get("EN").getProperty("paypal.token").trim());
				String payerId = request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("paypal.payerid").trim());
				String paymentId = request.getParameter(
						LayoutLoader.getMessageProperties().get("EN").getProperty("paypal.paymentid").trim());
				String authCode = request.getParameter(CommonUtility
						.validateString(LayoutLoader.getMessageProperties().get("EN").getProperty("paypal.authCode")));
				session.setAttribute("payPalPayerId", payerId);
				System.out.println("token : " + token);
				System.out.println("payerId : " + payPalPayerId);
				boolean paypalAuthorzied = true;
				if ((CommonDBQuery.getSystemParamtersList().get("ERP") != "cimmesb")
						&& CommonUtility.validateString(token).length() > 0
						&& CommonUtility.validateString(payerId).length() > 0) {
					paypalAuthorzied = false;
					try {
						String CREATE_PAYPAL_PAYMENT = CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("AUTHORIZE_PAYPAL_PAYMENT"));
						Cimm2BCentralPaypalAuthorizeRequest cimm2BCPaypalAuthRequest = new Cimm2BCentralPaypalAuthorizeRequest();
						cimm2BCPaypalAuthRequest.setPayerId(payerId);
						cimm2BCPaypalAuthRequest.setPaymentId(paymentId);

						Cimm2BCentralResponseEntity paypalAuthorizeResponse = Cimm2BCentralClient.getInstance()
								.getDataObject(CREATE_PAYPAL_PAYMENT, "POST", cimm2BCPaypalAuthRequest,
										Cimm2BCentralPaypalAuthorizeResponse.class);

						Cimm2BCentralPaypalAuthorizeResponse paypalAuthResponse = null;

						if (paypalAuthorizeResponse != null && paypalAuthorizeResponse.getStatus().getCode() == 200
								&& paypalAuthorizeResponse.getData() != null) {
							paypalAuthResponse = (Cimm2BCentralPaypalAuthorizeResponse) paypalAuthorizeResponse
									.getData();
							if (paypalAuthResponse != null
									&& paypalAuthResponse.getState().equalsIgnoreCase("authorized")) {
								paypalAuthorzied = true;
								authorizationId = paypalAuthResponse.getAuthorizationId();
								validUntil = paypalAuthResponse.getValidUntil();
								payPalApprovedAmt = paypalAuthResponse.getAmount();
								System.out.println("authorizationId: " + authorizationId + ",validUntil:-" + validUntil
										+ ", Amount=" + payPalApprovedAmt);
								session.setAttribute("PaypalAuthorizationId", authorizationId);
								session.setAttribute("payPalApprovedAmt", payPalApprovedAmt);

							}
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				if (paypalAuthorzied && CommonUtility.validateString(token).length() > 0
						|| CommonUtility.validateString(payerId).length() > 0) {

					LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();

					if (userTransactionType.equalsIgnoreCase("Y")) {
						UsersModel userDetails = (UsersModel) session.getAttribute("auUserDetails");
						;
						poNumber = CommonUtility.validateString(userDetails.getPoNumber());
						orderedBy = CommonUtility.validateString(userDetails.getOrderedBy());
						orderNotes = CommonUtility.validateString(userDetails.getOrderNotes());
						shippingInstruction = CommonUtility.validateString(userDetails.getShippingInstruction());
						reqDate = CommonUtility.validateString(userDetails.getReqDate());
						shipVia = CommonUtility.validateString(userDetails.getShipVia());

						defaultBillToId = CommonUtility.validateNumber(CommonUtility
								.validateParseIntegerToString(userDetails.getBillAddress().getAddressBookId()));
						defaultShipToId = CommonUtility.validateNumber(CommonUtility
								.validateParseIntegerToString(userDetails.getShipAddress().getAddressBookId()));

					} else {
						if (session != null && session.getAttribute("poNumber") != null) {
							poNumber = CommonUtility.validateString(session.getAttribute("poNumber").toString());
						}
						if (session != null && session.getAttribute("orderedBy") != null) {
							orderedBy = CommonUtility.validateString((String) session.getAttribute("orderedBy"));
						}
						if (session != null && session.getAttribute("orderNotes") != null) {
							orderNotes = CommonUtility.validateString((String) session.getAttribute("orderNotes"));
						}
						if (session != null && session.getAttribute("shippingInstruction") != null) {
							shippingInstruction = CommonUtility
									.validateString((String) session.getAttribute("shippingInstruction"));
						}
						if (session != null && session.getAttribute("reqDate") != null) {
							reqDate = CommonUtility.validateString((String) session.getAttribute("reqDate"));
							System.out.println("reqDate" + reqDate);
						}
						if (session != null && session.getAttribute("selectedShipVia") != null) {
							shipVia = CommonUtility.validateString((String) session.getAttribute("selectedShipVia"));
							System.out.println("shipVia" + shipVia);
						}
						if (session != null && session.getAttribute("savedGroupId") != null) {
							savedGroupId = CommonUtility.validateNumber((String) session.getAttribute("savedGroupId"));
						}
						if (session != null && session.getAttribute("isReOrder") != null) {
							isReOrder = CommonUtility.validateString((String) session.getAttribute("isReOrder"));
						}
						if (session != null && session.getAttribute("defaultBillToId") != null) {
							defaultBillToId = CommonUtility
									.validateNumber(session.getAttribute("defaultBillToId").toString());
						}
						if (session != null && session.getAttribute("defaultShipToId") != null) {
							defaultShipToId = CommonUtility
									.validateNumber(session.getAttribute("defaultShipToId").toString());
						}
					}

					SalesModel quoteResponse = new SalesModel();
					if (session.getAttribute("quoteResponse") != null) {
						quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
					}
					quoteResponse.setPaymentRefrenceId(authorizationId);
					if (session != null && session.getAttribute("orderTax") != null) {
						quoteResponse
								.setTax(CommonUtility.validateDoubleNumber((String) session.getAttribute("orderTax")));
					}
					quoteResponse.setPaymentRefrenceId(authorizationId);

					if (session != null && session.getAttribute("orderFreight") != null) {
						quoteResponse.setFreight(
								CommonUtility.validateDoubleNumber((String) session.getAttribute("orderFreight")));
					}

					HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
							defaultShipToId);
					billEntityId = userAddress.get("Bill").getEntityId();
					shipEntityId = userAddress.get("Ship").getEntityId();
					billAddress = userAddress.get("Bill");
					shipAddress = userAddress.get("Ship");

					// if user edit the ship address in checkout page,carrying edited details from
					// session
					if (overrideShipAddress != null) {
						shipAddress.setCompanyName(CommonUtility.validateString(overrideShipAddress.getCompanyName()));
						shipAddress.setAddress1(CommonUtility.validateString(overrideShipAddress.getAddress1()));
						shipAddress.setAddress2(CommonUtility.validateString(overrideShipAddress.getAddress2()));
						shipAddress.setCity(CommonUtility.validateString(overrideShipAddress.getCity()));
						shipAddress.setState(CommonUtility.validateString(overrideShipAddress.getState()));
						shipAddress.setCountry(CommonUtility.validateString(overrideShipAddress.getCountry()));
						shipAddress.setZipCode(CommonUtility.validateString(overrideShipAddress.getZipCode()));
						shipAddress
								.setZipCodeStringFormat(CommonUtility.validateString(overrideShipAddress.getZipCode()));
						shipAddress.setPhoneNo(CommonUtility.validateString(overrideShipAddress.getPhoneNo()));
						shipAddress
								.setEmailAddress(CommonUtility.validateString(overrideShipAddress.getEmailAddress()));
					}

					contentObject.put("token", token);
					contentObject.put("payerId", payerId);
					contentObject.put("defaultBillToId", billEntityId);
					contentObject.put("defaultShipToId", shipEntityId);
					contentObject.put("billAddress", billAddress);
					contentObject.put("shipAddress", shipAddress);
					if (billAddress != null) {
						contentObject.put("billAddress1", CommonUtility.validateString(billAddress.getAddress1()));
						contentObject.put("billAddress2", CommonUtility.validateString(billAddress.getAddress2()));
						contentObject.put("billState", CommonUtility.validateString(billAddress.getState()));
						if (CommonUtility.validateString(billAddress.getCountry()).length() > 0
								&& CommonUtility.validateString(billAddress.getCountry()).equalsIgnoreCase("US")) {
							contentObject.put("billCountry", "USA");
						} else if (CommonUtility.validateString(billAddress.getCountry()).length() > 0
								&& CommonUtility.validateString(billAddress.getCountry()).equalsIgnoreCase("CA")) {
							contentObject.put("billCountry", "CAN");
						} else {
							contentObject.put("billCountry", CommonUtility.validateString(billAddress.getCountry()));
						}
						contentObject.put("billCity", CommonUtility.validateString(billAddress.getCity()));
						contentObject.put("billZipCode", CommonUtility.validateString(billAddress.getZipCode()));
						contentObject.put("billZipCodeString",
								CommonUtility.validateString(billAddress.getZipCodeStringFormat()));
					}
					contentObject.put("poNumber", poNumber);
					contentObject.put("orderSubTotal", orderSubTotal);
					contentObject.put("orderTax", orderTax);
					contentObject.put("orderFreight", orderFreight);
					contentObject.put("orderHanling", orderHanling);
					contentObject.put("orderedBy", orderedBy);
					contentObject.put("reqDate", reqDate);
					contentObject.put("savedGroupId", savedGroupId);
					contentObject.put("shipVia", shipVia);
					contentObject.put("shippingInstruction", shippingInstruction);
					contentObject.put("orderNotes", orderNotes);
					contentObject.put("isReOrder", isReOrder);
					contentObject.put("quoteResponse", quoteResponse);
					contentObject.put("authorizationId", authorizationId);
					contentObject.put("validUntil", validUntil);
					contentObject.put("paymentId", paymentId);
					contentObject.put("collectNumber", session.getAttribute("collectNumber"));
					contentObject.put("oversizeFreightRate", session.getAttribute("oversizeFreightRate"));
					contentObject.put("hazmatFreightRate", session.getAttribute("hazmatFreightRate"));
					contentObject.put("fragileFreightRate", session.getAttribute("fragileFreightRate"));
					contentObject.put("authCode", authCode);

					if (userTransactionType.equalsIgnoreCase("Y")) {
						renderContent = LayoutGenerator.templateLoader("PayPalResponseWithoutLogin", contentObject,
								null, null, null);
					} else {
						renderContent = LayoutGenerator.templateLoader("PayPalResponse", contentObject, null, null,
								null);
					}

				} else {

					LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
					renderContent = LayoutGenerator.templateLoader("PayPalDeclinePage", contentObject, null, null,
							null);
				}
				target = SUCCESS;

			} else {
				if (CommonUtility.validateString(LayoutLoader.getMessageProperties()
						.get(session.getAttribute("localeCode").toString().toUpperCase())
						.getProperty("orderFailure.flagValue")).equalsIgnoreCase("Y")) {
					LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
					contentObject.put("noGuestUsersession", "Y");
					renderContent = LayoutGenerator.templateLoader("PayPalResponseWithoutLogin", contentObject, null,
							null, null);
					target = SUCCESS;
				} else {
					target = "SESSIONEXPIRED";
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String PaymentCancel() {
		HttpServletRequest request = ServletActionContext.getRequest();
		try {
			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);

			if (userId > 1) {

				Enumeration<String> parameterNames = request.getParameterNames();

				while (parameterNames.hasMoreElements()) {
					String paramName = parameterNames.nextElement();

					String[] paramValues = request.getParameterValues(paramName);
					System.out.println("Name :" + paramName);
					for (int i = 0; i < paramValues.length; i++) {
						String paramValue = paramValues[i];
						System.out.println("Value :" + paramValue);
					}

				}

				renderContent = LayoutGenerator.templateLoader("CreditCardCancelPage", null, null, null, null);
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return target;
	}

	public String PaymentCardInfo() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		// session.setAttribute("creditCardFlag", "true");
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		System.out.println(address1);
		int userId = CommonUtility.validateNumber(sessionUserId);
		try {

			if (userId > 1) {
				String tempdefaultShipId = request.getParameter("defaultShipToId");
				String tempEntityId = request.getParameter("entityId");
				String defaultShiptoId = "0";
				if (defaultShipToId > 0) {
					session.removeAttribute("defaultShipToIdatCheckout");
					session.setAttribute("defaultShipToIdatCheckout", "" + defaultShipToId);
				} else {
					if (session.getAttribute("defaultShipToIdatCheckout") != null
							&& session.getAttribute("defaultShipToIdatCheckout").toString().length() > 0) {
						defaultShipToId = CommonUtility
								.validateNumber((String) session.getAttribute("defaultShipToIdatCheckout"));
					} else {
						defaultShiptoId = (String) session.getAttribute("defaultShipToId");
						if (defaultShiptoId != null && tempdefaultShipId != null
								&& !defaultShiptoId.equalsIgnoreCase(tempdefaultShipId)) {
							session.setAttribute("defaultShipToId", tempdefaultShipId);
							session.setAttribute("entityId", tempEntityId);
						}
					}
				}

				if (defaultBillToId == 0) {
					HashMap<String, Integer> userAddressId = UsersDAO
							.getDefaultAddressIdForBCAddressBook((String) session.getAttribute(Global.USERNAME_KEY));
					defaultBillToId = userAddressId.get("Bill");
				}

				HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
						defaultShipToId);
				billEntityId = userAddress.get("Bill").getEntityId();
				shipEntityId = userAddress.get("Ship").getEntityId();
				billAddress = userAddress.get("Bill");
				shipAddress = userAddress.get("Ship");

				cardDetails = new ArrayList<CreditCardModel>();
				cardDetails = SalesDAO.getCreditCardDetails(userId);

				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				contentObject.put("billEntityId", billEntityId);
				contentObject.put("shipEntityId", shipEntityId);
				contentObject.put("defaultBillToId", defaultBillToId);
				contentObject.put("defaultShipToId", defaultShipToId);
				contentObject.put("billAddress", billAddress);
				contentObject.put("shipAddress", shipAddress);
				contentObject.put("cardDetails", cardDetails);
				contentObject.put("address1", address1);
				contentObject.put("address2", address2);
				contentObject.put("city", city);
				contentObject.put("state", state);
				contentObject.put("phoneNumber", phoneNumber);
				contentObject.put("email", email);
				contentObject.put("orderStatus", orderStatus);
				contentObject.put("country", country);
				contentObject.put("shipVia", shipVia);
				contentObject.put("zipCode", zipCode);
				contentObject.put("newsLetterSubscription", newsLetterSubscription);
				contentObject.put("shippingInstruction", shippingInstruction);
				contentObject.put("orderNotes", orderNotes);
				contentObject.put("poNumber", poNumber);
				contentObject.put("reqDate", reqDate);
				contentObject.put("orderedBy", orderedBy);
				contentObject.put("orderSubTotal", orderSubTotal);
				contentObject.put("orderTax", orderTax);
				contentObject.put("orderFreight", orderFreight);
				contentObject.put("orderHanling", orderHanling);
				contentObject.put("orderGrandTotal", orderGrandTotal);
				contentObject.put("savedGroupId", savedGroupId);
				renderContent = LayoutGenerator.templateLoader("PayWithCreditCardPage", contentObject, null, null,
						null);
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String deletePaymentCardInfo() {

		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		try {

			int userId = CommonUtility.validateNumber(sessionUserId);
			fromPage = request.getParameter("fromPage");
			session.setAttribute("fromPage", fromPage);

			if (userId > 1) {

				final int ccId = CommonUtility.validateNumber(userPcard);
				if (rdCard != null && rdCard.trim().equalsIgnoreCase("Yes")) {
					// int count = SalesDAO.deleteCreditCardInfo(ccId, userId);
					// if(count>0){
					ArrayList<CreditCardModel> creditCardList = new ArrayList<CreditCardModel>();
					creditCardList = SalesDAO.getCreditCardDetails(userId);
					/*
					 * for(CreditCardModel ccModel:creditCardList) { if(ccModel.getPcardId()==ccId)
					 * { creditCardList.remove(ccModel); } }
					 */
					creditCardList = creditCardList.stream().filter(c -> !c.equals(ccId))
							.collect(Collectors.toCollection(ArrayList::new));
					UsersModel addressList = UsersDAO.getEntityDetailsByUserId(userId);
					UsersModel userInfo = new UsersModel();
					UsersModel customerInfoInput = new UsersModel();
					customerInfoInput.setSession(session);
					UserManagement usersObj = new UserManagementImpl();
					userInfo.setUserName(addressList.getUserName());
					userInfo.setPassword(addressList.getPassword());
					userInfo.setIsCreditCard("Yes");
					userInfo.setCreditCardList(creditCardList);
					result = usersObj.contactUpdate(userInfo, session);
					if (CommonUtility.validateString(result).toLowerCase().contains("successful")) {
						SalesDAO.deleteCreditCardInfo(ccId, userId);
					}
					System.out.println("CC Update Response : " + result);
					// }
				}
				if (defaultBillToId == 0 || defaultShipToId == 0) {
					String tempdefaultShipId = (String) session.getAttribute("defaultShipToId");
					String tempdefaultBillToId = (String) session.getAttribute("defaultBillToId");
					if (defaultBillToId == 0 && tempdefaultBillToId != null
							&& tempdefaultBillToId.trim().length() > 0) {
						defaultBillToId = (CommonUtility.validateNumber(tempdefaultBillToId));
					}
					if (defaultShipToId == 0 && tempdefaultShipId != null && tempdefaultShipId.trim().length() > 0) {
						defaultShipToId = CommonUtility.validateNumber(tempdefaultShipId);
					}
					if (defaultBillToId == 0 || defaultShipToId == 0) {
						HashMap<String, Integer> userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(
								(String) session.getAttribute(Global.USERNAME_KEY));

						if (defaultBillToId == 0) {
							defaultBillToId = userAddressId.get("Bill");
						}

						if (defaultShipToId == 0) {
							defaultShipToId = userAddressId.get("Ship");
						}
					}
				}
				HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
						defaultShipToId);
				billEntityId = userAddress.get("Bill").getEntityId();
				shipEntityId = userAddress.get("Ship").getEntityId();
				cardDetails = new ArrayList<CreditCardModel>();
				cardDetails = SalesDAO.getCreditCardDetails(userId);

				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				contentObject.put("billEntityId", billEntityId);
				contentObject.put("shipEntityId", shipEntityId);
				contentObject.put("defaultShipToId", shipEntityId);
				contentObject.put("billAddress", billAddress);
				contentObject.put("shipAddress", shipAddress);
				contentObject.put("cardDetails", cardDetails);
				contentObject.put("address1", address1);
				contentObject.put("address2", address2);
				contentObject.put("city", city);
				contentObject.put("state", state);
				contentObject.put("phoneNumber", phoneNumber);
				contentObject.put("email", email);
				contentObject.put("orderStatus", orderStatus);
				contentObject.put("country", country);
				contentObject.put("shipVia", shipVia);
				contentObject.put("zipCode", zipCode);
				contentObject.put("newsLetterSubscription", newsLetterSubscription);
				contentObject.put("shippingInstruction", shippingInstruction);
				contentObject.put("orderNotes", orderNotes);
				contentObject.put("poNumber", poNumber);
				contentObject.put("reqDate", reqDate);
				contentObject.put("orderedBy", orderedBy);
				contentObject.put("orderSubTotal", orderSubTotal);
				contentObject.put("orderTax", orderTax);
				contentObject.put("orderFreight", orderFreight);
				contentObject.put("orderHanling", orderHanling);
				contentObject.put("orderGrandTotal", orderGrandTotal);

				// ---Billing
				contentObject.put("billEntityId", billEntityId);
				contentObject.put("defaultBillToId", defaultBillToId);
				contentObject.put("billAddress1", billAddress1);
				contentObject.put("billAddress2", billAddress2);
				contentObject.put("billCity", billCity);
				contentObject.put("billState", billState);
				contentObject.put("billPhoneNo", billPhoneNo);
				contentObject.put("billEmail", billEmail);
				contentObject.put("billCountry", billCountry);
				contentObject.put("billZipcode", billZipcode);
				// ---Billing

				// ---Shipping
				contentObject.put("shipEntityId", shipEntityId);
				contentObject.put("overrideShip", overrideShip);
				contentObject.put("defaultShipToId", defaultShipToId);
				contentObject.put("address1", address1);
				contentObject.put("address2", address2);
				contentObject.put("city", city);
				contentObject.put("state", state);
				contentObject.put("phoneNumber", phoneNumber);
				contentObject.put("email", email);
				contentObject.put("country", country);
				contentObject.put("zipCode", zipCode);
				// ---Shipping

				// ---Order Details
				contentObject.put("orderType", orderType);
				contentObject.put("reqDate", reqDate);
				contentObject.put("orderedBy", orderedBy);
				contentObject.put("poNumber", poNumber);
				contentObject.put("shipVia", shipVia);
				contentObject.put("shipViaDescription", shipViaDescription);
				contentObject.put("orderStatus", orderStatus);
				contentObject.put("shippingInstruction", shippingInstruction);
				contentObject.put("orderNotes", orderNotes);
				contentObject.put("newsLetterSubscription", newsLetterSubscription);
				contentObject.put("customerReleaseNumber", customerReleaseNumber);
				contentObject.put("isReOrder", isReOrder);
				contentObject.put("upsFrieghtCharges", upsFrieghtCharges);
				// ---Order Details

				// ---payment
				contentObject.put("cardDetails", cardDetails);
				contentObject.put("erpQuoteNumber", erpQuoteNumber);
				contentObject.put("creditCardPayment", creditCardPayment);
				contentObject.put("ccTransactionId", ccTransactionId);
				contentObject.put("cardHolder", cardHolder);
				contentObject.put("ccExp", ccExp);
				contentObject.put("streetAddress", streetAddress);
				contentObject.put("postalCode", postalCode);
				contentObject.put("ccResponseCode", ccResponseCode);
				contentObject.put("ccStatus", ccStatus);

				contentObject.put("ccHostRefNumber", ccHostRefNumber);
				contentObject.put("ccTaskID", ccTaskID);
				contentObject.put("ccAmount", ccAmount);
				contentObject.put("ccDeclineResponseReason", ccDeclineResponseReason);
				contentObject.put("ccCvv2VrfyCode", ccCvv2VrfyCode);
				contentObject.put("ccTip", ccTip);

				contentObject.put("ccTransTimeStamp", ccTransTimeStamp);
				contentObject.put("ccApprovedAmount", ccApprovedAmount);
				contentObject.put("ccRequestedAmount", ccRequestedAmount);
				contentObject.put("ccHostResponseCode", ccHostResponseCode);
				contentObject.put("ccInvoice", ccInvoice);
				contentObject.put("ccApprovalCode", ccApprovalCode);
				contentObject.put("ccServerTimestamp", ccServerTimestamp);

				contentObject.put("ccType", ccType);
				contentObject.put("ccFee", ccFee);
				contentObject.put("ccExternalSessionID", ccExternalSessionID);
				contentObject.put("ccAddVrfyCode", ccAddVrfyCode);
				contentObject.put("ccTax", ccTax);
				contentObject.put("ccNewDomainKey", ccNewDomainKey);
				contentObject.put("ccNumber", ccNumber);
				contentObject.put("isFromQC", isFromQC);
				// ---payment
				if (CommonUtility.validateString(rdCard).length() > 0) {
					renderContent = result;
				} else {
					renderContent = LayoutGenerator.templateLoader("AddNewCreditCard", contentObject, null, null, null);
				}
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String PaymentInfo() {

		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			// session.setAttribute("creditCardFlag", "true");
			session.removeAttribute("OutStandingOrderPaymentList");
			String reqType = (String) request.getParameter("reqType");
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			double freight = 0;
			String discountTypeCheck = "";
			String freightMessage = "";
			if (userId > 1) {
				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY"))
						.equals("TRUSTCOMMERCE")) {
					TrustCommerceService.setCheckoutDetailsToSession(session, request);
					contentObject.put("trustCommerceToken", TrustCommerceService.generateToken());
					contentObject.put("isAjaxPayment", request.getParameter("isAjaxPayment"));
				}

				session.removeAttribute("orderFreight");
				session.removeAttribute("orderTax");
				AddressModel overrideShipAddress = (AddressModel) session.getAttribute("overrideShipAddress");
				String wareHousecode = (String) session.getAttribute("wareHouseCode");
				String customerNumber = (String) session.getAttribute("customerId"); // 7932
				String customerCountry = (String) session.getAttribute("customerCountry");
				String tempSubset = (String) session.getAttribute("userSubsetId");
				int subsetId = CommonUtility.validateNumber(tempSubset);
				String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
				int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);

				int orderId = 0;
				String paymentGateway = "";
				String encryptedManifest = "";
				String amount = "";
				String invoice = "";
				String externalRefNumber = "";
				String sessionID = session.getId();

				String merchantId = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_ACCEPTOR_ID");
				String sessionData = CommonDBQuery.getSystemParamtersList().get("CENPOS_SESSION_DATA");
				String sessionDataPOST = CommonDBQuery.getSystemParamtersList().get("CENPOS_SESSION_POST_DATA");
				String aesEncryptKey = CommonDBQuery.getSystemParamtersList().get("CENPOS_AES_ENCRYPT_KEY");

				if (merchantId != null && aesEncryptKey != null) {
					CenposEncryptor cenposEncryptor = new CenposEncryptor(merchantId, aesEncryptKey);
					sessionData = cenposEncryptor.getSessionData();
					sessionDataPOST = cenposEncryptor.getSessionPostData();
				}
				if (CommonUtility.validateString(
						CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY_MERCHANT_ID_FROM_WAREHOUSE"))
						.equalsIgnoreCase("Y")) {
					int warehouseCodeID = 0;
					if (CommonUtility.validateNumber(selectedWillCallBranchCode) > 0) {
						warehouseCodeID = UsersDAO
								.getCustomerWareHouseID(CommonUtility.validateString(selectedWillCallBranchCode));
					} else {
						warehouseCodeID = UsersDAO.getCustomerWareHouseID(CommonUtility.validateString(wareHousecode));
					}
					List<CustomTable> customTableResult = CIMM2VelocityTool.getInstance().getCusomTableData("WAREHOUSE",
							warehouseCodeID, "CENPOS_DATA");
					if (customTableResult != null && customTableResult.size() > 0) {
						for (CustomTable customTableValue : customTableResult) {
							if (CommonUtility.validateNumber(customTableValue.getEntityId()) == warehouseCodeID) {
								merchantId = customTableValue.getTableDetails().get(0)
										.get("PAYMENT_ACCOUNT_MERCHANT_ID");
								sessionData = customTableValue.getTableDetails().get(0).get("SESSION_DATA");
								sessionDataPOST = customTableValue.getTableDetails().get(0).get("SESSION_POST_DATA");
							}

						}
					}
				}

				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY"))
						.length() > 0) {
					paymentGateway = CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY").trim();
				}
				if (reqType != null && reqType.length() > 0 && reqType.equalsIgnoreCase("paypal")) {
					paymentGateway = "paypal";
				}
				String creditCartApprovedStatus = CommonDBQuery.getSystemParamtersList()
						.get("PAYMENT_GATEWAY_APPROVED_STATUS");
				String transactionUrl = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_TRANSACTION_URL");
				String hostPassword = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_HOST_PASSWORD");
				String hostKey = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_HOST_KEY");
				String paymentGateWayResponsePage = CommonDBQuery.getSystemParamtersList().get("WEB_ADDRESS")
						+ CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_RESPONSE_PAGE");
				String paymentGateWayErrorPage = CommonDBQuery.getSystemParamtersList().get("WEB_ADDRESS")
						+ CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_ERROR_PAGE");
				String paymentGateWayCancelPage = CommonDBQuery.getSystemParamtersList().get("WEB_ADDRESS")
						+ CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_CANCEL_PAGE");
				String paymentGateWayDeviceId = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_DEVICE_ID");
				String paymentGateWayHostID = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_HOST_ID");
				String paymentGateWayUniqueID = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_UNIQUE_ID");
				String paymentGateWayResponseType = CommonDBQuery.getSystemParamtersList()
						.get("PAYMENT_ACCOUNT_RESPONSE_TYPE");
				String paymentGateWayTransactionType = CommonDBQuery.getSystemParamtersList()
						.get("PAYMENT_ACCOUNT_TRANSACTION_TYPE");
				String paymentGateWayTip = "";
				String paymentGateWayTax = "";
				String paymentGateWayFee = "";
				String userEmailAddress = "";
				String externalCustomerNumber = "";
				double total = 0;
				SalesModel quoteResponse = null;
				session.removeAttribute("outStandingPayment");
				if (CommonUtility.validateString(outStandingPayment).equalsIgnoreCase("Y")) {
					String selectedinvoiceNo = request.getParameter("selectedinvoiceNo");
					session.setAttribute("selectedinvoiceNo", selectedinvoiceNo);
					session.setAttribute("outStandingPayment", outStandingPayment);
					session.setAttribute("outStandingPaymentTotal", outStandingPaymentTotal);

					if (CommonUtility.validateNumber(outStandingPaymentTotal) > 0) {
						total = Double.valueOf(outStandingPaymentTotal);
					} else {
						if (session.getAttribute("outStandingPaymentTotal") != null) {
							total = Double.valueOf(CommonUtility
									.validateString((String) session.getAttribute("outStandingPaymentTotal")));
						}
					}
					if (session.getAttribute("OutStandingOrderPaymentList") != null) {
						ArrayList<SalesModel> orderDetailList = (ArrayList<SalesModel>) session
								.getAttribute("OutStandingOrderPaymentList");
						if (orderDetailList != null && !orderDetailList.isEmpty()) {
							for (SalesModel objectModel : orderDetailList) {
								int insertCount = SalesDAO.outStandingPaymentDAO(objectModel);
							}
						}
					} else {
						// P21
						session.removeAttribute("OutStandingOrderPaymentList");
						ArrayList<SalesModel> orderDetailList = null;
						String outStandingPaymentOrderID[] = request.getParameterValues("outStandingPaymentOrderID");
						if (outStandingPaymentOrderID != null && outStandingPaymentOrderID.length > 0) {
							orderDetailList = new ArrayList<SalesModel>();
							for (String ordernum : outStandingPaymentOrderID) {
								if (CommonUtility.validateString(ordernum).length() > 0) {
									SalesModel smodel = new SalesModel();
									smodel.setOrderNum(CommonUtility.validateString(ordernum));
									smodel.setTotal(CommonUtility
											.validateDoubleNumber(request.getParameter("outStandingPaymentOrderAmount_"
													+ CommonUtility.validateString(ordernum))));
									smodel.setCustomerNumber(session.getAttribute("customerId") != null
											? (String) session.getAttribute("customerId")
											: "0");
									smodel.setAmountPayed(CommonUtility.validateDoubleNumber(request.getParameter(
											"outStandingPayedAmount_" + CommonUtility.validateString(ordernum))));
									smodel.setInvoiceDate(CommonUtility.validateString(request.getParameter(
											"outStandingInvoiceDate_" + CommonUtility.validateString(ordernum))));
									smodel.setDueDate(CommonUtility.validateString(request.getParameter(
											"outStandingDueDate_" + CommonUtility.validateString(ordernum))));
									orderDetailList.add(smodel);
								}
							}
							if (orderDetailList != null && !orderDetailList.isEmpty()) {
								for (SalesModel objectModel : orderDetailList) {
									int insertCount = SalesDAO.outStandingPaymentDAO(objectModel);
								}
								session.setAttribute("OutStandingOrderPaymentList", orderDetailList);
							}
						}
					}

				} else {
					HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
							defaultShipToId);
					session.setAttribute("defaultBillToId",
							CommonUtility.validateParseIntegerToString(defaultBillToId));
					session.setAttribute("defaultShipToId",
							CommonUtility.validateParseIntegerToString(defaultShipToId));
					billEntityId = userAddress.get("Bill").getEntityId();
					shipEntityId = userAddress.get("Ship").getEntityId();
					billAddress = userAddress.get("Bill");
					shipAddress = userAddress.get("Ship");

					// if user edit the ship address in checkout page,carrying edited details from
					// session
					if (overrideShipAddress != null) {
						shipAddress.setCompanyName(CommonUtility.validateString(overrideShipAddress.getCompanyName()));
						shipAddress.setAddress1(CommonUtility.validateString(overrideShipAddress.getAddress1()));
						shipAddress.setAddress2(CommonUtility.validateString(overrideShipAddress.getAddress2()));
						shipAddress.setCity(CommonUtility.validateString(overrideShipAddress.getCity()));
						shipAddress.setState(CommonUtility.validateString(overrideShipAddress.getState()));
						shipAddress.setCountry(CommonUtility.validateString(overrideShipAddress.getCountry()));
						shipAddress.setZipCode(CommonUtility.validateString(overrideShipAddress.getZipCode()));
						shipAddress
								.setZipCodeStringFormat(CommonUtility.validateString(overrideShipAddress.getZipCode()));
						shipAddress.setPhoneNo(CommonUtility.validateString(overrideShipAddress.getPhoneNo()));
						shipAddress
								.setEmailAddress(CommonUtility.validateString(overrideShipAddress.getEmailAddress()));
					}

					cartListData = new ArrayList<ProductsModel>();
					if (isReOrder != null && isReOrder.trim().equalsIgnoreCase("Y")) {
						cartListData = SalesDAO.getOrderDetailsQuote(session);
					} else {
						cartListData = SalesDAO.getOrderDetails(savedGroupId, userId, subsetId, generalSubset, session,
								"PaymentInfo");
						session.setAttribute("savedGroupId", "" + savedGroupId);
					}
					if (cartListData != null && cartListData.size() > 0) {
						total = cartListData.get(0).getCartTotal();
					}
					LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
					if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
							.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
						ArrayList<Integer> itemList = new ArrayList<Integer>();
						if (cartListData != null && cartListData.size() > 0) {
							for (ProductsModel pModel : cartListData) {
								itemList.add(pModel.getItemId());
							}
						}
						customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(subsetId, generalSubset,
								StringUtils.join(itemList, " OR "), "itemid");
					}
					double tax = 0;
					double subTotal = 0;

					if (session.getAttribute("quoteNumber") != null) {
						quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
						tax = quoteResponse.getTax();

						freight = quoteResponse.getFreight();
						if (freight < 0) {
							if (total > 0) {
								FreightCalculatorModel freightInput = new FreightCalculatorModel();
								freightInput.setCartTotal(total);
								freightInput.setCountry(customerCountry);
								freightInput.setCustomerNumber(customerNumber);
								freightInput.setLocale(CommonUtility
										.validateString(session.getAttribute("localeCode").toString().toUpperCase()));
								freightInput.setShipVia((String) session.getAttribute("selectedShipVia"));
								freightInput.setWareHouseCode(wareHousecode);
								UsersModel shipAddress = null;
								if (session != null && session.getAttribute("defaultShipAddress") != null) {
									shipAddress = (UsersModel) session.getAttribute("defaultShipAddress");
									if (shipAddress != null && shipAddress.getState() != null
											&& shipAddress.getState().trim().length() > 0) {
										freightInput.setState(shipAddress.getState().trim());
									}
								}
								FreightCalculatorModel freightValue = FreightCalculator.getFreightByTotal(freightInput);
								if (freightValue != null) {
									freightMessage = freightValue.getMessage();
									orderFreight = Double.toString(freight);
								}
							}
						}

						subTotal = quoteResponse.getTotal() - tax - freight;
						orderTax = Double.toString(tax);
						orderFreight = Double.toString(freight);
						orderSubTotal = Double.toString(subTotal);
						total = quoteResponse.getTotal();
						invoice = CommonUtility.validateString(quoteResponse.getInvoiceNumber());
						if (CommonUtility.validateString(quoteResponse.getInvoiceNumber()).length() < 1) {
							invoice = CommonUtility.validateString(quoteResponse.getOrderID());
						}
					} else {
						if (orderTax != null && orderTax.trim().length() > 0)
							// tax = Double.parseDouble(orderTax.trim());
							tax = CommonUtility.roundHalfUp(orderTax.trim());
						System.out.println("Order tax in payment=" + orderTax);
						if (orderFreight != null && orderFreight.trim().length() > 0) {
							// freight = Double.parseDouble(orderFreight.trim());
							freight = CommonUtility.roundHalfUp(orderFreight.trim());
							System.out.println("Order freight in payment=" + orderFreight);
						} else {

							if (total > 0) {

								if (CommonUtility
										.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
										.equalsIgnoreCase("SHIPVIA_COST_TABLE")
										&& session.getAttribute("customerShipViaListJson") != null) {
									String shipCostTableJasonString = CommonUtility
											.validateString((String) session.getAttribute("customerShipViaListJson"));
									Gson gson = new Gson();
									// LinkedList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
									// new TypeToken<List<ShipVia>>(){}.getType());
									ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
											new TypeToken<List<ShipVia>>() {
											}.getType());
									if (shipCostTable != null && !shipCostTable.isEmpty()) {
										if (shipCostTable != null && !shipCostTable.isEmpty()) {
											for (ShipVia shipViaObj : shipCostTable) {
												// if(shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)){
												if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
													if (shipViaObj.getShipCode()
															.equalsIgnoreCase(selectedShipCodeOption)) {
														session.setAttribute("selectedShipCodeOption",
																selectedShipCodeOption);
														freight = shipViaObj.getShipCost();
														break;
													}
												} else {
													if (shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)) {
														freight = shipViaObj.getShipCost();
														break;
													}
												}
											}
										}
									}
								} else {
									FreightCalculatorModel freightInput = new FreightCalculatorModel();
									freightInput.setCartTotal(total);
									freightInput.setCountry(customerCountry);
									freightInput.setCustomerNumber(customerNumber);
									freightInput.setLocale(CommonUtility.validateString(
											session.getAttribute("localeCode").toString().toUpperCase()));
									freightInput.setShipVia((String) session.getAttribute("selectedShipVia"));
									freightInput.setWareHouseCode(wareHousecode);
									UsersModel shipAddress = null;
									if (session != null && session.getAttribute("defaultShipAddress") != null) {
										shipAddress = (UsersModel) session.getAttribute("defaultShipAddress");
										if (shipAddress != null && shipAddress.getState() != null
												&& shipAddress.getState().trim().length() > 0) {
											freightInput.setState(shipAddress.getState().trim());
										}
									}
									FreightCalculatorModel freightValue = FreightCalculator
											.getFreightByTotal(freightInput);
									if (freightValue != null) {
										freightMessage = freightValue.getMessage();
										freight = freightValue.getFreightValue();
										orderFreight = Double.toString(freight);
									}
								}
							}
						}
						if (orderSubTotal != null && orderSubTotal.trim().length() > 0)
							subTotal = Double.parseDouble(orderSubTotal.trim());

						total = total + tax + freight;
					}

				}
				// total = total+tax+freight; //Removed coz of SX and Cenpos integration

				if (session.getAttribute("availedDiscounts") != null) {
					Cart cart = (Cart) session.getAttribute("availedDiscounts");
					total = total - cart.getDiscount();
				}

				Discount orderShippingDiscount = getOrderShippingDiscount(session);
				if (orderShippingDiscount != null) {
					discountTypeCheck = orderShippingDiscount.getDiscountType().name();
					if (CommonUtility.validateString(discountTypeCheck).length() > 0
							&& discountTypeCheck.equals("FREE_SHIPPING")) {
						total = total - freight;
					}
				}
				CreditCardManagement creditCardObj = new CreditCardManagementImpl();
				if (paymentGateway != null) {
					if (paymentGateway.trim().equalsIgnoreCase("TSYS")) {

						CreditCardManagementModel creditCartInput = new CreditCardManagementModel();
						creditCartInput.setRequest(request);
						creditCartInput.setMerchantId(merchantId);
						creditCartInput.setHostPassword(hostPassword);
						creditCartInput.setTotal(total);
						creditCartInput.setHostKey(hostKey);
						CreditCardModel creditCardOutput = creditCardObj.creditCardTransactionSetup(creditCartInput);

						encryptedManifest = creditCardOutput.getEncryptedManifest();
						amount = creditCardOutput.getAmount();
						invoice = creditCardOutput.getInvoiceNumber();
						externalRefNumber = creditCardOutput.getExternalRefNumber();

					} else if (paymentGateway.trim().equalsIgnoreCase("onlinemart")) {

						if (session.getAttribute("orderNumber") != null
								&& session.getAttribute("orderNumber").toString().length() > 0) {
							orderId = CommonUtility.validateNumber((String) session.getAttribute("orderNumber"));
						} else {
							orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
							session.setAttribute("orderNumber", orderId);
						}
						contentObject.put("orderNumber", orderId);
					} else if (CommonUtility.validateString(paymentGateway).equalsIgnoreCase("element")) {
						HashMap<String, UsersModel> userAddress = UsersDAO
								.getUserAddressFromBCAddressBook(defaultBillToId, defaultShipToId);
						session.setAttribute("defaultBillToId",
								CommonUtility.validateParseIntegerToString(defaultBillToId));
						session.setAttribute("defaultShipToId",
								CommonUtility.validateParseIntegerToString(defaultShipToId));
						billEntityId = userAddress.get("Bill").getEntityId();
						shipEntityId = userAddress.get("Ship").getEntityId();
						billAddress = userAddress.get("Bill");
						if (!CommonUtility.validateString(outStandingPayment).equalsIgnoreCase("Y")) {
							shipAddress = userAddress.get("Ship");
						}
						UsersModel userDetailList = getTransctionSetupId(billAddress, shipAddress,
								CommonUtility.validateParseDoubleToString(total));
						if (CommonUtility.validateString(userDetailList.getElementSetupUrl()).length() > 0) {
							transactionUrl = CommonUtility.validateString(userDetailList.getElementSetupUrl());
							setupId = CommonUtility.validateString(userDetailList.getElementSetupId());
							transactionUrl += setupId;
						}
					} else if (paymentGateway.trim().equalsIgnoreCase("paypal")) {
						SalesModel salesInputParameter = new SalesModel();
						salesInputParameter.setFreight(freight);
						salesInputParameter.setTax(CommonUtility.validateDoubleNumber(orderTax));
						salesInputParameter.setTotal(total);
						salesInputParameter.setCartData(cartListData);
						salesInputParameter.setDiscount(discountAmount);
						if (CommonUtility.customServiceUtility() != null) {
							salesInputParameter = CommonUtility.customServiceUtility()
									.substractingDiscountToCartItem(salesInputParameter);
						}
						SalesOrderManagement salesObj = new SalesOrderManagementImpl();
						quoteResponse = salesObj.createPaypalPayment(salesInputParameter);
						ccPayPal = "Y";
					} else if (CommonUtility.validateString(paymentGateway).equalsIgnoreCase("cardconnect")) {
						if (session.getAttribute("orderNumber") != null
								&& session.getAttribute("orderNumber").toString().length() > 0) {
							orderId = (int) session.getAttribute("orderNumber");
						} else {
							orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
							session.setAttribute("orderNumber", orderId);
						}
						contentObject.put("orderNumber", orderId);

					} else if (CommonUtility.validateString(paymentGateway).equalsIgnoreCase("paytrace")) {
						CreditCardManagementModel creditCartInput = new CreditCardManagementModel();
						creditCartInput.setTotal(total);
						CreditCardModel creditCardOutput = creditCardObj.creditCardTransactionSetup(creditCartInput);
						if (creditCardOutput != null) {
							session.setAttribute("orderNumber", creditCardOutput.getPcardId());
							contentObject.put("orderNumber", creditCardOutput.getPcardId());
							contentObject.put("authKey", creditCardOutput.getCreditCardToken());
							contentObject.put("responseMessage", creditCardOutput.getCreditCardStatus());
						}
					} else if (CommonUtility.validateString(paymentGateway).equalsIgnoreCase("chargelogic")) {
						SalesOrderManagement salesObj = new SalesOrderManagementImpl();
						billCompanyName = request.getParameter("billCompanyName");
						shipCompanyName = request.getParameter("shipCompanyName");
						orderTax = request.getParameter("orderTax");
						if (CommonUtility.validateString(billAddress1).length() < 1) {
							if (session.getAttribute("billAddress1_CC") != null) {
								billAddress1 = (String) session.getAttribute("billAddress1_CC");
							}
						}
						if (CommonUtility.validateString(billAddress2).length() < 1) {
							if (session.getAttribute("billAddress2_CC") != null) {
								billAddress2 = (String) session.getAttribute("billAddress2_CC");
							}
						}
						if (CommonUtility.validateString(billCity).length() < 1) {
							if (session.getAttribute("billCity_CC") != null) {
								billCity = (String) session.getAttribute("billCity_CC");
							}
						}
						if (CommonUtility.validateString(billState).length() < 1) {
							if (session.getAttribute("billState_CC") != null) {
								billState = (String) session.getAttribute("billState_CC");
							}
						}
						if (CommonUtility.validateString(billPhoneNo).length() < 1) {
							if (session.getAttribute("billPhoneNo_CC") != null) {
								billPhoneNo = (String) session.getAttribute("billPhoneNo_CC");
							}
						}
						if (CommonUtility.validateString(billEmail).length() < 1) {
							if (session.getAttribute("billEmail_CC") != null) {
								billEmail = (String) session.getAttribute("billEmail_CC");
							}
						}
						if (CommonUtility.validateString(billCountry).length() < 1) {
							if (session.getAttribute("billCountry_CC") != null) {
								billCountry = (String) session.getAttribute("billCountry_CC");
							}
						}
						if (CommonUtility.validateString(billZipcode).length() < 1) {
							if (session.getAttribute("billZipcode_CC") != null) {
								billZipcode = (String) session.getAttribute("billZipcode_CC");
							}
						}

						if (CommonUtility.validateString(address1).length() < 1) {
							if (session.getAttribute("address1_CC") != null) {
								address1 = (String) session.getAttribute("address1_CC");
							}
						}
						if (CommonUtility.validateString(address2).length() < 1) {
							if (session.getAttribute("address2_CC") != null) {
								address2 = (String) session.getAttribute("address2_CC");
							}
						}
						if (CommonUtility.validateString(city).length() < 1) {
							if (session.getAttribute("city_CC") != null) {
								city = (String) session.getAttribute("city_CC");
							}
						}
						if (CommonUtility.validateString(state).length() < 1) {
							if (session.getAttribute("state_CC") != null) {
								state = (String) session.getAttribute("state_CC");
							}
						}
						if (CommonUtility.validateString(phoneNumber).length() < 1) {
							if (session.getAttribute("phoneNumber_CC") != null) {
								phoneNumber = (String) session.getAttribute("phoneNumber_CC");
							}
						}
						if (CommonUtility.validateString(email).length() < 1) {
							if (session.getAttribute("email_CC") != null) {
								email = (String) session.getAttribute("email_CC");
							}
						}
						if (CommonUtility.validateString(country).length() < 1) {
							if (session.getAttribute("country_CC") != null) {
								country = (String) session.getAttribute("country_CC");
							}
						}
						if (CommonUtility.validateString(zipCode).length() < 1) {
							if (session.getAttribute("zipCode_CC") != null) {
								zipCode = (String) session.getAttribute("zipCode_CC");
							}
						}

						if (CommonUtility.validateString(reqDate).length() < 1) {
							if (session.getAttribute("reqDate_CC") != null) {
								reqDate = (String) session.getAttribute("reqDate_CC");
							}
						}

						if (CommonUtility.validateString(upsFrieghtCharges).length() < 1) {
							if (session.getAttribute("upsFrieghtCharges_CC") != null && CommonUtility
									.validateString(session.getAttribute("upsFrieghtCharges_CC").toString())
									.length() > 0) {
								upsFrieghtCharges = (String) session.getAttribute("upsFrieghtCharges_CC");
							}
						}

						Calendar cal = Calendar.getInstance();
						SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
						String orderDate = sdf.format(cal.getTime());
						session.setAttribute("orderDate", orderDate);
						orderTotal = cartListData.get(0).getCartTotal()
								+ CommonUtility.validateDoubleNumber(upsFrieghtCharges)
								+ CommonUtility.validateDoubleNumber(orderTax);
						session.setAttribute("upsFrieghtCharges", upsFrieghtCharges);
						session.setAttribute("orderTotal", CommonUtility.validateParseDoubleToString(orderTotal));
						session.setAttribute("shipViaDescription", request.getParameter("shipViaDescription"));
						session.setAttribute("poNumber", poNumber);
						session.setAttribute("subTotal",
								CommonUtility.validateParseDoubleToString(cartListData.get(0).getCartTotal()));

						SalesModel salesInputParameter = new SalesModel();
						salesInputParameter.setBillToName(billCompanyName);
						salesInputParameter.setBillAddress1(billAddress1);
						salesInputParameter.setBillAddress2(billAddress2);
						salesInputParameter.setBillCity(billCity);
						salesInputParameter.setBillState(billState);
						salesInputParameter.setBillPhone(billPhoneNo);
						salesInputParameter.setBillEmailAddress(billEmail);
						salesInputParameter.setBillCountry(billCountry);
						salesInputParameter.setBillZipCode(billZipcode);
						salesInputParameter.setShipToName(shipCompanyName);
						salesInputParameter.setShipAddress1(address1);
						salesInputParameter.setShipAddress2(address2);
						salesInputParameter.setShipCity(city);
						salesInputParameter.setShipState(state);
						salesInputParameter.setShipPhone(phoneNumber);
						salesInputParameter.setShipEmailAddress(email);
						salesInputParameter.setShipCountry(country);
						salesInputParameter.setShipZipCode(zipCode);
						salesInputParameter.setCartData(cartListData);
						salesInputParameter.setReqDate(reqDate);
						salesInputParameter.setFreight(CommonUtility.validateDoubleNumber(upsFrieghtCharges));
						salesInputParameter.setTotal(orderTotal);
						salesInputParameter.setTax(CommonUtility.validateDoubleNumber(orderTax));
						salesInputParameter.setPoNumber(poNumber);
						salesInputParameter.setSession(session);

						quoteResponse = salesObj.createChargeLogicPayment(salesInputParameter);
						contentObject.put("secureToken", quoteResponse.getSecureToken());
						contentObject.put("secureTokenId", quoteResponse.getSecureTokenId());
					}
				}
				if (CommonUtility.validateString(email).length() > 0) {
					String[] splitEmailForInvoiceField = email.split("@");
					if (splitEmailForInvoiceField != null && splitEmailForInvoiceField.length > 0) {
						contentObject.put("invoiceCustomParameter",
								CommonUtility.validateString(splitEmailForInvoiceField[0]));
					}
				}
				if (CommonUtility.validateString(request.getParameter("shipViaDescription")).length() > 0) {
					shipViaDescription = CommonUtility.validateString(request.getParameter("shipViaDescription"));
				}
				contentObject.put("shipViaDescription", CommonUtility.validateString(shipViaDescription));
				contentObject.put("isReOrder", CommonUtility.validateString(isReOrder));
				contentObject.put("orderingType", CommonUtility.validateString(orderingType));
				contentObject.put("quoteResponse", quoteResponse);
				contentObject.put("creditCartApprovedStatus", creditCartApprovedStatus);
				contentObject.put("defaultBillToId", defaultBillToId);
				contentObject.put("defaultShipToId", defaultShipToId);
				contentObject.put("billAddress", billAddress);
				contentObject.put("shipAddress", shipAddress);
				contentObject.put("totalAmount", total);
				contentObject.put("transactionUrl", transactionUrl);
				contentObject.put("encryptedManifest", encryptedManifest);
				contentObject.put("externalRefNumber", externalRefNumber);
				contentObject.put("merchantId", merchantId);
				contentObject.put("sessionData", sessionData);
				contentObject.put("sessionDataPOST", sessionDataPOST);
				contentObject.put("hostPassword", hostPassword);
				contentObject.put("hostKey", hostKey);
				contentObject.put("invoice", invoice);
				contentObject.put("amount", amount);
				contentObject.put("sessionID", sessionID);
				contentObject.put("paymentGateWayDeviceId", paymentGateWayDeviceId);
				contentObject.put("paymentGateWayHostID", paymentGateWayHostID);
				contentObject.put("paymentGateWayUniqueID", paymentGateWayUniqueID);
				contentObject.put("paymentGateWayResponseType", paymentGateWayResponseType);
				contentObject.put("paymentGateWayTransactionType", paymentGateWayTransactionType);
				contentObject.put("paymentGateWayTip", paymentGateWayTip);
				contentObject.put("paymentGateWayTax", paymentGateWayTax);
				contentObject.put("paymentGateWayFee", paymentGateWayFee);
				contentObject.put("paymentGateWayErrorPage", paymentGateWayErrorPage);
				contentObject.put("paymentGateWayResponsePage", paymentGateWayResponsePage);
				contentObject.put("paymentGateWayCancelPage", paymentGateWayCancelPage);
				contentObject.put("userEmailAddress", email);
				contentObject.put("externalCustomerNumber", externalCustomerNumber);
				contentObject.put("cardHolder", cardHolder);
				contentObject.put("firstName", cardHolder);// billAddress.getFirstName()
				contentObject.put("LastName", "");// billAddress.getLastName()
				contentObject.put("streetAddress", streetAddress);
				contentObject.put("postalCode", postalCode);
				contentObject.put("billAddress", billAddress);
				if (billAddress != null) {
					contentObject.put("billAddress1", CommonUtility.validateString(billAddress.getAddress1()));
					contentObject.put("billAddress2", CommonUtility.validateString(billAddress.getAddress2()));
					contentObject.put("billState", CommonUtility.validateString(billAddress.getState()));
					if (CommonUtility.validateString(billAddress.getCountry()).length() > 0
							&& CommonUtility.validateString(billAddress.getCountry()).equalsIgnoreCase("US")) {
						contentObject.put("billCountry", "USA");
					} else if (CommonUtility.validateString(billAddress.getCountry()).length() > 0
							&& CommonUtility.validateString(billAddress.getCountry()).equalsIgnoreCase("CA")) {
						contentObject.put("billCountry", "CAN");
					} else {
						contentObject.put("billCountry", CommonUtility
								.validateString(billAddress.getCountry() != null ? billAddress.getCountry() : "USA"));
					}
					contentObject.put("billCity", CommonUtility.validateString(billAddress.getCity()));
					contentObject.put("billEmail", CommonUtility.validateString(billAddress.getEmailAddress()));
					contentObject.put("billPhoneNo", CommonUtility.validateString(billAddress.getPhoneNo()));
					contentObject.put("billZipCode", CommonUtility.validateString(billAddress.getZipCode()));
					contentObject.put("billZipCodeString",
							CommonUtility.validateString(billAddress.getZipCodeStringFormat()));
				}
				contentObject.put("poNumber", poNumber);
				contentObject.put("orderSubTotal", orderSubTotal);
				contentObject.put("orderTax", orderTax);
				contentObject.put("totalCartFrieghtCharges", orderFreight);
				contentObject.put("orderFreight", orderFreight);
				contentObject.put("orderHanling", orderHanling);
				contentObject.put("orderGrandTotal", total);
				contentObject.put("orderGrandTotalDecimalFmt", decimal2Fmt.format(total));
				if (CommonUtility.validateDoubleNumber(
						CommonDBQuery.getSystemParamtersList().get("ADD_ON_AMOUNT_TO_ORDER_TOTAL")) > 0) {
					double addonpercentage = CommonUtility.validateDoubleNumber(
							CommonDBQuery.getSystemParamtersList().get("ADD_ON_AMOUNT_TO_ORDER_TOTAL"));
					double addonAmount = total / addonpercentage;
					double finalAmountAfterAddon = total + addonAmount;
					contentObject.put("orderGrandTotalAfterAddon", finalAmountAfterAddon);
					contentObject.put("orderGrandTotalDecimalFmtAfterAddon", decimal2Fmt.format(finalAmountAfterAddon));
				}

				contentObject.put("orderedBy", orderedBy);
				contentObject.put("freightMessage", freightMessage);
				contentObject.put("reqDate", reqDate);
				contentObject.put("savedGroupId", savedGroupId);
				contentObject.put("shipVia",
						CommonUtility.validateString((String) session.getAttribute("selectedShipVia")));
				contentObject.put("shippingInstruction", shippingInstruction);
				contentObject.put("orderNotes", orderNotes);
				contentObject.put("customerId", CommonUtility.validateString(customerNumber));
				contentObject.put("outStandingPayment", outStandingPayment);
				contentObject.put("overrideShipAddress", overrideShipAddress);
				session.setAttribute("orderFreight", orderFreight);
				session.setAttribute("orderTax", orderTax);
				if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
					contentObject.put("selectedShipCodeOption", CommonUtility.validateString(selectedShipCodeOption));
				} else {
					if (session.getAttribute("selectedShipCodeOption") != null)
						contentObject.put("selectedShipCodeOption",
								CommonUtility.validateString((String) session.getAttribute("selectedShipCodeOption")));
				}
				if (CommonUtility.validateString(outStandingPayment).equalsIgnoreCase("Y")) {
					renderContent = LayoutGenerator.templateLoader("PaymentAuthenticationOutStandingOrder",
							contentObject, null, null, null);
				} else if (CommonUtility.validateString(ccPayPal).equalsIgnoreCase("Y")) {
					renderContent = LayoutGenerator.templateLoader("PaymentAuthenticationPayPal", contentObject, null,
							null, null);
				} else if (CommonUtility.validateString(paymentGateway).equalsIgnoreCase("cardconnect")) {
					renderContent = LayoutGenerator.templateLoader("PaymentAuthenticationCardConnect", contentObject,
							null, null, null);
				} else {
					if (CommonUtility.validateString(request.getParameter("isAjaxPayment")).equals("Y")) {
						renderContent = LayoutGenerator.templateLoader("ResultLoaderPage", contentObject, null, null,
								null);
					} else {
						renderContent = LayoutGenerator.templateLoader("PaymentAuthentication", contentObject, null,
								null, null);
					}
				}
				target = SUCCESS;
			} else {
				target = "SESSIONEXPIRED";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String auPaymentInfo() {

		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			// session.setAttribute("creditCardFlag", "true");

			UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
			String userToken = userDetail.getUserToken();
			String auUser = (String) session.getAttribute("auUserLogin");
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			String reqApprType = (String) request.getParameter("reqTypeCode");
			String selectedShipViaWL = CommonUtility.validateString(userDetail.getShipVia());

			String sessionUserId = CommonUtility
					.validateString(CommonUtility.validateParseIntegerToString(userDetail.getUserId()));
			int userId = CommonUtility.validateNumber(sessionUserId);
			UsersModel billAddress = new UsersModel();
			billAddress.setFirstName(userDetail.getBillAddress().getFirstName());
			billAddress.setLastName(userDetail.getBillAddress().getLastName());
			billAddress.setAddress1(userDetail.getBillAddress().getAddress1());
			billAddress.setAddress2(userDetail.getBillAddress().getAddress2());
			billAddress.setCity(userDetail.getBillAddress().getCity());
			billAddress.setState(userDetail.getBillAddress().getState());
			billAddress.setZipCodeStringFormat(userDetail.getBillAddress().getZipCode());
			billAddress.setZipCode(userDetail.getBillAddress().getZipCode());
			billAddress.setCountry(userDetail.getBillAddress().getCountry());
			billAddress.setPhoneNo(userDetail.getBillAddress().getPhoneNo());
			billAddress.setCompanyName(userDetail.getBillAddress().getCompanyName());
			billAddress.setCustomerName(userDetail.getBillAddress().getCompanyName());
			billAddress.setEmailAddress(userDetail.getUserName());
			billAddress.setEntityId(CommonUtility.validateString(userDetail.getBillAddress().getEntityId()));
			billAddress.setEntityName(userDetail.getBillAddress().getCompanyName());
			billAddress.setUserToken(userDetail.getUserToken());
			billAddress.setUserId(userDetail.getUserId());
			billAddress.setSession(session);
			billAddress.setAddressBookId(userDetail.getBillAddress().getAddressBookId());

			UsersModel shipAddress = new UsersModel();
			shipAddress.setShipToId(userDetail.getShipAddress().getShipToId());
			shipAddress.setFirstName(userDetail.getShipAddress().getFirstName());
			shipAddress.setLastName(userDetail.getShipAddress().getLastName());
			shipAddress.setCompanyName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setCustomerName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setAddress1(userDetail.getShipAddress().getAddress1());
			shipAddress.setAddress2(userDetail.getShipAddress().getAddress2());
			shipAddress.setCity(userDetail.getShipAddress().getCity());
			shipAddress.setState(userDetail.getShipAddress().getState());
			shipAddress.setZipCodeStringFormat(userDetail.getShipAddress().getZipCode());
			shipAddress.setZipCode(userDetail.getShipAddress().getZipCode());
			shipAddress.setCountry(userDetail.getShipAddress().getCountry());
			shipAddress.setPhoneNo(userDetail.getShipAddress().getPhoneNo());
			shipAddress.setOrderNotes(userDetail.getOrderNotes());
			shipAddress.setShippingInstruction(userDetail.getShippingInstruction());
			shipAddress.setEntityId(CommonUtility.validateString(userDetail.getShipAddress().getEntityId()));
			shipAddress.setEntityName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setUserToken(userDetail.getUserToken());
			shipAddress.setEmailAddress(userDetail.getUserName());
			shipAddress.setUserId(userDetail.getUserId());
			shipAddress.setSession(session);
			shipAddress.setAddressBookId(userDetail.getShipAddress().getAddressBookId());

			UserManagement userUpdate = new UserManagementImpl();
			userUpdate.editShippingAddress(shipAddress);
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("UPDATE_CUSTOMER_API"))
					.length() > 0) {
				userUpdate.editBillingAddress(billAddress);
			}
			String freightMessage = "";
			double freight = 0;
			String discountTypeCheck = "";
			if (userId > 1) {
				String wareHousecode = CommonUtility.validateString(userDetail.getWareHouseCodeStr());
				String customerNumber = CommonUtility.validateString(userDetail.getUserToken()); // 7932
				String customerCountry = CommonUtility.validateString(userDetail.getCountry());
				String tempSubset = CommonUtility
						.validateString(CommonUtility.validateParseIntegerToString(userDetail.getSubsetId()));
				int subsetId = CommonUtility.validateNumber(tempSubset);

				int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);

				if (ProductsDAO.getSubsetIdFromName(
						CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
					generalSubset = ProductsDAO
							.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
				}

				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				int orderId = 0;
				String paymentGateway = "";
				String encryptedManifest = "";
				String amount = "";
				String invoice = "";
				String externalRefNumber = "";

				String sessionID = session.getId();
				if (CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY") != null
						&& CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY").trim().length() > 0) {
					paymentGateway = CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY").trim();
				}

				String merchantId = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_ACCEPTOR_ID");
				String sessionData = CommonDBQuery.getSystemParamtersList().get("CENPOS_SESSION_DATA");
				String sessionDataPOST = CommonDBQuery.getSystemParamtersList().get("CENPOS_SESSION_POST_DATA");

				String aesEncryptKey = CommonDBQuery.getSystemParamtersList().get("CENPOS_AES_ENCRYPT_KEY");
				if (merchantId != null && aesEncryptKey != null) {
					CenposEncryptor cenposEncryptor = new CenposEncryptor(merchantId, aesEncryptKey);
					sessionData = cenposEncryptor.getSessionData();
					sessionDataPOST = cenposEncryptor.getSessionPostData();
				}

				if (CommonUtility.validateString(
						CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY_MERCHANT_ID_FROM_WAREHOUSE"))
						.equalsIgnoreCase("Y")) {
					int warehouseCodeID = 0;
					if (CommonUtility.validateNumber(selectedWillCallBranchCode) > 0) {
						warehouseCodeID = UsersDAO
								.getCustomerWareHouseID(CommonUtility.validateString(selectedWillCallBranchCode));
					} else {
						warehouseCodeID = UsersDAO.getCustomerWareHouseID(CommonUtility.validateString(wareHousecode));
					}
					List<CustomTable> customTableResult = CIMM2VelocityTool.getInstance().getCusomTableData("WAREHOUSE",
							warehouseCodeID, "CENPOS_DATA");
					if (customTableResult != null && customTableResult.size() > 0) {
						for (CustomTable customTableValue : customTableResult) {
							if (CommonUtility.validateNumber(customTableValue.getEntityId()) == warehouseCodeID) {
								merchantId = customTableValue.getTableDetails().get(0)
										.get("PAYMENT_ACCOUNT_ACCEPTOR_ID");
								sessionData = customTableValue.getTableDetails().get(0).get("SESSION_DATA");
								sessionDataPOST = customTableValue.getTableDetails().get(0).get("SESSION_POST_DATA");
							}
						}
					}
				}

				String creditCartApprovedStatus = CommonDBQuery.getSystemParamtersList()
						.get("PAYMENT_GATEWAY_APPROVED_STATUS");
				String transactionUrl = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_TRANSACTION_URL");
				String hostPassword = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_HOST_PASSWORD");
				String hostKey = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_HOST_KEY");
				String paymentGateWayResponsePage = CommonDBQuery.getSystemParamtersList().get("WEB_ADDRESS")
						+ CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_RESPONSE_PAGE");
				String paymentGateWayErrorPage = CommonDBQuery.getSystemParamtersList().get("WEB_ADDRESS")
						+ CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_ERROR_PAGE");
				String paymentGateWayCancelPage = CommonDBQuery.getSystemParamtersList().get("WEB_ADDRESS")
						+ CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_CANCEL_PAGE");
				String paymentGateWayDeviceId = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_DEVICE_ID");
				String paymentGateWayHostID = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_HOST_ID");
				String paymentGateWayUniqueID = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_UNIQUE_ID");
				String paymentGateWayResponseType = CommonDBQuery.getSystemParamtersList()
						.get("PAYMENT_ACCOUNT_RESPONSE_TYPE");
				String paymentGateWayTransactionType = CommonDBQuery.getSystemParamtersList()
						.get("PAYMENT_ACCOUNT_TRANSACTION_TYPE");
				String paymentGateWayTip = "";
				String paymentGateWayTax = "";
				String paymentGateWayFee = "";
				String userEmailAddress = "";
				String externalCustomerNumber = "";

				defaultBillToId = CommonUtility.validateNumber(
						CommonUtility.validateParseIntegerToString(userDetail.getBillAddress().getAddressBookId()));
				defaultShipToId = CommonUtility.validateNumber(
						CommonUtility.validateParseIntegerToString(userDetail.getShipAddress().getAddressBookId()));

				HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
						defaultShipToId);
				billEntityId = userAddress.get("Bill").getEntityId();
				shipEntityId = userAddress.get("Ship").getEntityId();
				billAddress = userAddress.get("Bill");
				shipAddress = userAddress.get("Ship");

				if (CommonUtility.customServiceUtility() != null) {
					CommonUtility.customServiceUtility().addCustomerName(billAddress, userDetail);
				}

				double total = 0;

				cartListData = new ArrayList<ProductsModel>();
				if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
					cartListData = SalesDAO.getOrderDetails(1, 1, userDetail.getSubsetId(), generalSubset, session,
							"auPaymentInfo");
					LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
					if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
							.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
						ArrayList<Integer> itemList = new ArrayList<Integer>();
						if (cartListData != null && cartListData.size() > 0) {
							for (ProductsModel pModel : cartListData) {
								itemList.add(pModel.getItemId());
							}
						}
						customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(userDetail.getSubsetId(),
								generalSubset, StringUtils.join(itemList, " OR "), "itemid");
					}

					for (ProductsModel itemPrice : cartListData) {
						total = itemPrice.getCartTotal();
						break;
					}
				}

				double tax = 0;
				double subTotal = 0;
				SalesModel quoteResponse = null;
				if (session.getAttribute("quoteNumber") != null) {
					quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
					tax = quoteResponse.getTax();
					freight = quoteResponse.getFreight();
					if (freight < 0) {
						if (total > 0) {
							FreightCalculatorModel freightInput = new FreightCalculatorModel();
							freightInput.setCartTotal(total);
							freightInput.setCountry(customerCountry);
							freightInput.setCustomerNumber(customerNumber);
							freightInput.setLocale(CommonUtility
									.validateString(session.getAttribute("localeCode").toString().toUpperCase()));
							freightInput.setShipVia(selectedShipViaWL);
							freightInput.setWareHouseCode(wareHousecode);
							if (session != null && session.getAttribute("defaultShipAddress") != null) {
								shipAddress = (UsersModel) session.getAttribute("defaultShipAddress");
								if (shipAddress != null && shipAddress.getState() != null
										&& shipAddress.getState().trim().length() > 0) {
									freightInput.setState(shipAddress.getState().trim());
								}
							}
							FreightCalculatorModel freightValue = FreightCalculator.getFreightByTotal(freightInput);
							if (freightValue != null) {
								freightMessage = freightValue.getMessage();
								orderFreight = Double.toString(freight);
							}
						}
					}
					subTotal = quoteResponse.getTotal() - tax - freight;
					orderTax = Double.toString(tax);
					orderFreight = Double.toString(freight);
					orderSubTotal = Double.toString(subTotal);
					total = quoteResponse.getTotal();
					invoice = CommonUtility.validateString(quoteResponse.getInvoiceNumber());
					if (CommonUtility.validateString(quoteResponse.getInvoiceNumber()).length() < 1) {
						invoice = CommonUtility.validateString(quoteResponse.getOrderID());
					}
				} else {
					if (orderTax != null && orderTax.trim().length() > 0)
						// tax = Double.parseDouble(orderTax.trim());
						tax = CommonUtility.roundHalfUp(orderTax.trim());
					if (orderFreight != null && orderFreight.trim().length() > 0) {
						// freight = Double.parseDouble(orderFreight.trim());
						freight = CommonUtility.roundHalfUp(orderFreight.trim());
					} else {
						if (total > 0) {
							if (CommonUtility
									.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
									.equalsIgnoreCase("SHIPVIA_COST_TABLE")
									&& session.getAttribute("customerShipViaListJson") != null) {
								String shipCostTableJasonString = CommonUtility
										.validateString((String) session.getAttribute("customerShipViaListJson"));
								Gson gson = new Gson();
								// LinkedList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
								// new TypeToken<List<ShipVia>>(){}.getType());
								ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
										new TypeToken<List<ShipVia>>() {
										}.getType());
								if (shipCostTable != null && !shipCostTable.isEmpty()) {

									if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
										session.removeAttribute("selectedShipCodeOption");
									} else {
										if (session.getAttribute("selectedShipCodeOption") != null)
											selectedShipCodeOption = CommonUtility.validateString(
													session.getAttribute("selectedShipCodeOption").toString());
									}
									if (shipCostTable != null && !shipCostTable.isEmpty()) {
										for (ShipVia shipViaObj : shipCostTable) {
											if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
												if (shipViaObj.getShipCode().equalsIgnoreCase(selectedShipCodeOption)) {
													freight = shipViaObj.getShipCost();
													session.setAttribute("selectedShipCodeOption",
															selectedShipCodeOption);
													break;
												}
											} else {
												if (shipViaObj.getShipViaID().equalsIgnoreCase(selectedShipViaWL)) {
													freight = shipViaObj.getShipCost();
													break;
												}
											}
										}
									}

									/*
									 * if(shipCostTable!=null && !shipCostTable.isEmpty()){ for (ShipVia shipViaObj
									 * : shipCostTable) { if(shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)){
									 * freight = shipViaObj.getShipCost(); } } }
									 */
								}
							} else {
								FreightCalculatorModel freightInput = new FreightCalculatorModel();
								freightInput.setCartTotal(total);
								freightInput.setCountry(customerCountry);
								freightInput.setCustomerNumber(customerNumber);
								freightInput.setLocale(CommonUtility
										.validateString(session.getAttribute("localeCode").toString().toUpperCase()));
								freightInput.setShipVia(selectedShipViaWL);
								freightInput.setWareHouseCode(wareHousecode);
								if (session != null && session.getAttribute("defaultShipAddress") != null) {
									shipAddress = (UsersModel) session.getAttribute("defaultShipAddress");
									if (shipAddress != null && shipAddress.getState() != null
											&& shipAddress.getState().trim().length() > 0) {
										freightInput.setState(shipAddress.getState().trim());
									}
								}
								FreightCalculatorModel freightValue = FreightCalculator.getFreightByTotal(freightInput);
								if (freightValue != null) {
									freightMessage = freightValue.getMessage();
									freight = freightValue.getFreightValue();
									orderFreight = Double.toString(freight);
								}
							}
						}
					}

					/*
					 * if(orderSubTotal!=null && orderSubTotal.trim().length()>0) subTotal =
					 * Double.parseDouble(orderSubTotal.trim());
					 */

					// total = total+tax+freight;
				}
				double orderDiscountVal = 0.0;

				if (session.getAttribute("availedDiscounts") != null) {
					Cart cart = (Cart) session.getAttribute("availedDiscounts");
					total = total - cart.getDiscount();
				}

				Discount orderShippingDiscount = getOrderShippingDiscount(session);
				if (orderShippingDiscount != null) {
					discountTypeCheck = orderShippingDiscount.getDiscountType().name();
					if (CommonUtility.validateString(discountTypeCheck).length() > 0
							&& discountTypeCheck.equals("FREE_SHIPPING")) {
						total = total - freight;
					}
				}

				double taxFromErp = 0;
				if (!CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
						.equalsIgnoreCase("SO")) {
					/*
					 * SalesOrderManagement salesObj = new SalesOrderManagementImpl(); quoteResponse
					 * = salesObj.createQuote(createQuoteInput);
					 */
				} else {
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("TAXABLE_STATE"))
							.equalsIgnoreCase(CommonUtility.validateString(userDetail.getShipAddress().getState()))) {
						UsersModel shipAddresstoERP = new UsersModel();
						shipAddresstoERP
								.setShipToId(CommonUtility.validateString(userDetail.getShipAddress().getShipToId()));
						shipAddresstoERP
								.setAddress1(CommonUtility.validateString(userDetail.getShipAddress().getAddress1()));
						shipAddresstoERP
								.setAddress2(CommonUtility.validateString(userDetail.getShipAddress().getAddress2()));
						shipAddresstoERP.setCity(CommonUtility.validateString(userDetail.getShipAddress().getCity()));
						shipAddresstoERP.setZipCodeStringFormat(
								CommonUtility.validateString(userDetail.getShipAddress().getZipCode()));
						shipAddresstoERP.setState(CommonUtility.validateString(userDetail.getShipAddress().getState()));
						shipAddresstoERP
								.setCountry(CommonUtility.validateString(userDetail.getShipAddress().getCountry()));
						LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();
						createQuoteInput.put("customerId", userDetail.getUserToken());
						createQuoteInput.put("wareHousecode", userDetail.getWareHouseCodeStr());
						createQuoteInput.put("itemList", cartListData);
						createQuoteInput.put("shipAddress", shipAddresstoERP);
						createQuoteInput.put("orderDiscountVal", orderDiscountVal);
						SalesOrderManagement salesObj = new SalesOrderManagementImpl();
						LinkedHashMap<String, Object> taxOutPutFromERP = salesObj.getTaxFromERP(createQuoteInput);
						if (taxOutPutFromERP != null && !taxOutPutFromERP.isEmpty()) {
							ProductsModel itemTaxOutPut = (ProductsModel) taxOutPutFromERP.get("TaxInfo");
							taxFromErp = itemTaxOutPut.getSalesTax();
						}
					}
				}
				// total = total+taxFromErp;
				total = total + tax + freight;

				CreditCardManagement creditCardObj = new CreditCardManagementImpl();

				if (paymentGateway != null) {
					if (paymentGateway.trim().equalsIgnoreCase("TSYS")) {

						CreditCardManagementModel creditCartInput = new CreditCardManagementModel();
						creditCartInput.setRequest(request);
						creditCartInput.setMerchantId(merchantId);
						creditCartInput.setHostPassword(hostPassword);
						creditCartInput.setTotal(total);
						creditCartInput.setHostKey(hostKey);
						CreditCardModel creditCardOutput = creditCardObj.creditCardTransactionSetup(creditCartInput);

						encryptedManifest = creditCardOutput.getEncryptedManifest();
						amount = creditCardOutput.getAmount();
						invoice = creditCardOutput.getInvoiceNumber();
						externalRefNumber = creditCardOutput.getExternalRefNumber();

					} else if (paymentGateway.trim().equalsIgnoreCase("onlinemart")) {

						if (session.getAttribute("orderNumber") != null
								&& session.getAttribute("orderNumber").toString().length() > 0) {
							orderId = CommonUtility.validateNumber((String) session.getAttribute("orderNumber"));
						} else {
							orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
							session.setAttribute("orderNumber", orderId);
						}
						contentObject.put("orderNumber", orderId);
					} else if (CommonUtility.validateString(paymentGateway).equalsIgnoreCase("element")) {
						UsersModel userDetailList = getTransctionSetupId(billAddress, shipAddress,
								CommonUtility.validateParseDoubleToString(total));
						if (CommonUtility.validateString(userDetailList.getElementSetupUrl()).length() > 0) {
							transactionUrl = CommonUtility.validateString(userDetailList.getElementSetupUrl());
							setupId = CommonUtility.validateString(userDetailList.getElementSetupId());
							transactionUrl += setupId;
						}
					} else if (CommonUtility.validateString(paymentGateway).equalsIgnoreCase("paytrace")) {
						CreditCardManagementModel creditCartInput = new CreditCardManagementModel();
						creditCartInput.setTotal(total);
						CreditCardModel creditCardOutput = creditCardObj.creditCardTransactionSetup(creditCartInput);
						if (creditCardOutput != null) {
							session.setAttribute("orderNumber", creditCardOutput.getPcardId());
							contentObject.put("orderNumber", creditCardOutput.getPcardId());
							contentObject.put("authKey", creditCardOutput.getCreditCardToken());
							contentObject.put("responseMessage", creditCardOutput.getCreditCardStatus());
						}
					}
				}
				if (CommonUtility.validateString(email).length() > 0) {
					String[] splitEmailForInvoiceField = email.split("@");
					if (splitEmailForInvoiceField != null && splitEmailForInvoiceField.length > 0) {
						contentObject.put("invoiceCustomParameter",
								CommonUtility.validateString(splitEmailForInvoiceField[0]));
					}
				}

				contentObject.put("shipVia", selectedShipViaWL);
				contentObject.put("shipViaDescription", shipViaDescription);
				contentObject.put("quoteResponse", quoteResponse);
				contentObject.put("creditCartApprovedStatus", creditCartApprovedStatus);
				contentObject.put("defaultBillToId", billEntityId);
				contentObject.put("defaultShipToId", shipEntityId);
				contentObject.put("billAddress", billAddress);
				contentObject.put("shipAddress", shipAddress);
				contentObject.put("totalAmount", total);
				contentObject.put("transactionUrl", transactionUrl);
				contentObject.put("encryptedManifest", encryptedManifest);
				contentObject.put("externalRefNumber", externalRefNumber);
				contentObject.put("sessionData", sessionData);
				contentObject.put("sessionDataPOST", sessionDataPOST);
				contentObject.put("merchantId", merchantId);
				contentObject.put("hostPassword", hostPassword);
				contentObject.put("hostKey", hostKey);
				contentObject.put("invoice", invoice);
				contentObject.put("amount", amount);
				contentObject.put("sessionID", sessionID);
				contentObject.put("paymentGateWayDeviceId", paymentGateWayDeviceId);
				contentObject.put("paymentGateWayHostID", paymentGateWayHostID);
				contentObject.put("paymentGateWayUniqueID", paymentGateWayUniqueID);
				contentObject.put("paymentGateWayResponseType", paymentGateWayResponseType);
				contentObject.put("paymentGateWayTransactionType", paymentGateWayTransactionType);
				contentObject.put("paymentGateWayTip", paymentGateWayTip);
				contentObject.put("paymentGateWayTax", paymentGateWayTax);
				contentObject.put("paymentGateWayFee", paymentGateWayFee);
				contentObject.put("paymentGateWayErrorPage", paymentGateWayErrorPage);
				contentObject.put("paymentGateWayResponsePage", paymentGateWayResponsePage);
				contentObject.put("paymentGateWayCancelPage", paymentGateWayCancelPage);
				contentObject.put("userEmailAddress", email);
				contentObject.put("externalCustomerNumber", externalCustomerNumber);
				contentObject.put("cardHolder", cardHolder);
				contentObject.put("firstName", cardHolder);// billAddress.getFirstName()
				contentObject.put("LastName", "");// billAddress.getLastName()
				contentObject.put("streetAddress", streetAddress);
				contentObject.put("postalCode", postalCode);
				contentObject.put("billAddress", billAddress);
				contentObject.put("billAddress1", billAddress.getAddress1());
				contentObject.put("billAddress2", billAddress.getAddress2());
				contentObject.put("billState", billAddress.getState());
				if (billAddress.getCountry() != null && billAddress.getCountry().trim().equalsIgnoreCase("US")) {
					contentObject.put("billCountry", "USA");
				} else if (billAddress.getCountry() != null && billAddress.getCountry().trim().equalsIgnoreCase("CA")) {
					contentObject.put("billCountry", "CAN");
				} else {
					contentObject.put("billCountry", billAddress.getCountry().trim());
				}
				contentObject.put("billCity", billAddress.getCity());
				contentObject.put("billZipCode", billAddress.getZipCode());
				contentObject.put("billZipCodeString", billAddress.getZipCodeStringFormat());
				contentObject.put("poNumber", poNumber);
				contentObject.put("orderSubTotal", orderSubTotal);
				contentObject.put("orderTax", orderTax);
				contentObject.put("orderFreight", orderFreight);
				contentObject.put("totalCartFrieghtCharges", orderFreight);
				contentObject.put("orderHanling", orderHanling);
				contentObject.put("orderGrandTotal", total);
				contentObject.put("orderGrandTotalDecimalFmt", decimal2Fmt.format(total));
				contentObject.put("orderedBy", orderedBy);
				contentObject.put("freightMessage", freightMessage);
				contentObject.put("reqDate", reqDate);
				contentObject.put("shippingInstruction", shippingInstruction);
				contentObject.put("orderNotes", orderNotes);
				contentObject.put("customerId", userDetail.getCustomerId());
				contentObject.put("selectedShipCodeOption", selectedShipCodeOption);

				if (CommonUtility.validateString(ccPayPal).equalsIgnoreCase("Y")) {
					renderContent = LayoutGenerator.templateLoader("PaymentAuthenticationPayPal", contentObject, null,
							null, null);
				} else {
					renderContent = LayoutGenerator.templateLoader("PaymentAuthenticationWithoutLogin", contentObject,
							null, null, null);
				}

				target = SUCCESS;
			} else {
				target = "SESSIONEXPIRED";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String addCreditCard() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
			String auUser = (String) session.getAttribute("auUserLogin");
			if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
				cardDetails = SalesDAO.getCreditCardDetails(userDetail.getUserId());
				for (CreditCardModel CCDetail : cardDetails) {
					int count = SalesDAO.deleteCreditCardInfo(CCDetail.getPcardId(), userDetail.getUserId());
				}
			}
			String responseUrl = CommonDBQuery.getSystemParamtersList().get("CHECKOUTRESPONSEURL");// CommonDBQuery.getSystemParamtersList().get("CHECKOUTRESPONSEURL");
			UsersModel userDetailList = SalesOrderManagementAction.elementSetup(
					(String) session.getAttribute(Global.USERNAME_KEY), (String) session.getAttribute("userToken"),
					cardHolder, address1, zipCode, responseUrl);
			transactionUrl = userDetailList.getElementSetupUrl();
			setupId = userDetailList.getElementSetupId();
			session.setAttribute("userNickName", nickName);
			System.out.println("element setup url :  " + userDetailList.getElementSetupUrl());
			System.out.println("element setup ID :  " + userDetailList.getElementSetupId());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;

	}

	public ArrayList<ProductsModel> getDetailsFromPartNumbers(ArrayList<String> partNumberArrayInput) {

		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		ArrayList<ProductsModel> itemDetailsData = new ArrayList<ProductsModel>();
		ProductsModel itemDetailModel = null;

		String tempSubset = (String) session.getAttribute("userSubsetId");
		int subsetId = CommonUtility.validateNumber(tempSubset);
		String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
		int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);

		try {
			conn = ConnectionManager.getDBConnection();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		try {
			String sql = "";
			String sql1 = "";
			String sqlAppend = "";

			for (String partNumberString : partNumberArrayInput) {
				String getQtySql = "SELECT  CASE WHEN NVL(IP.MIN_ORDER_QTY,1) < 2 THEN   NVL(IM.MIN_ORDER_QTY,1) WHEN NVL(IP.MIN_ORDER_QTY,1) > 1 THEN  NVL(IP.MIN_ORDER_QTY,1) END MIN_ORDER_QTY, CASE WHEN NVL(IP.ORDER_QTY_INTERVAL,1) < 2 THEN   NVL(IM.ORDER_QTY_INTERVAL,1) WHEN NVL(IP.ORDER_QTY_INTERVAL,1) > 1 THEN   NVL(IP.ORDER_QTY_INTERVAL,1) END ORDER_QTY_INTERVAL FROM ITEM_MASTER IM, ITEM_PRICES IP WHERE ";

				if (partNumberString != null && partNumberString.trim().length() > 0) {

					sql = PropertyAction.SqlContainer.get("quickOrderQuery");
					sql1 = PropertyAction.SqlContainer.get("quickOrderQuery1");
					sqlAppend = PropertyAction.SqlContainer.get("quickOrderQueryAppend");

					sql = sql + " UPPER(MANUFACTURER_PART_NUMBER)=?";
					sql1 = sql1 + " UPPER(MANUFACTURER_PART_NUMBER)=?";
					sqlAppend = sqlAppend + " UPPER(MANUFACTURER_PART_NUMBER)=?)";
					getQtySql = getQtySql + "MANUFACTURER_PART_NUMBER=?";

					getQtySql = getQtySql + " AND IP.ITEM_ID=IM.ITEM_ID";

					ConnectionManager.closeDBPreparedStatement(pstmt);
					pstmt = conn.prepareStatement(getQtySql);
					pstmt.setString(1, partNumberString.trim().toUpperCase());
					rs = pstmt.executeQuery();

					while (rs.next()) {

						ResultSet rsNew = null;

						if (generalSubset > 0) {
							sql = sql + " union " + sql1 + " " + sqlAppend;
							ConnectionManager.closeDBPreparedStatement(pstmt);
							pstmt = conn.prepareStatement(sql);
							pstmt.setInt(1, subsetId);
							pstmt.setString(2, partNumberString.trim().toUpperCase());
							pstmt.setInt(3, generalSubset);
							pstmt.setString(4, partNumberString.trim().toUpperCase());
							pstmt.setInt(5, subsetId);
							pstmt.setString(6, partNumberString.trim().toUpperCase());
							rsNew = pstmt.executeQuery();
						} else {
							ConnectionManager.closeDBPreparedStatement(pstmt);
							pstmt = conn.prepareStatement(sql);
							pstmt.setInt(1, subsetId);
							pstmt.setString(2, partNumberString.trim().toUpperCase());
							rsNew = pstmt.executeQuery();
						}

						if (rsNew.next()) {
							itemDetailModel = new ProductsModel();
							itemDetailModel.setItemId(rsNew.getInt("ITEM_ID"));
							itemDetailModel.setSubsetId(rsNew.getInt("SUBSET_ID"));
							itemDetailModel.setPartNumber(rsNew.getString("PART_NUMBER"));
							itemDetailModel
									.setShortDesc(rsNew.getString("SHORT_DESC") != null ? rsNew.getString("SHORT_DESC")
											: rsNew.getString("INVOICE_DESC"));
							itemDetailModel.setPackDesc(rsNew.getString("PACK_DESC"));
							itemDetailModel.setUom(rsNew.getString("SALES_UOM"));
							itemDetailModel.setImageName(rsNew.getString("IMAGE_NAME"));
							itemDetailModel.setImageType(rsNew.getString("IMAGE_TYPE"));
							itemDetailModel.setPrice(rsNew.getDouble("NET_PRICE"));
							itemDetailModel.setMinOrderQty(rsNew.getInt("MIN_ORDER_QTY"));
							itemDetailModel.setOrderInterval(rsNew.getInt("ORDER_QTY_INTERVAL"));
						}

						if (itemDetailModel != null) {
							itemDetailsData.add(itemDetailModel);
							itemDetailModel = null;
						}

						ConnectionManager.closeDBResultSet(rsNew);
					}
					ConnectionManager.closeDBResultSet(rs);
					ConnectionManager.closeDBPreparedStatement(pstmt);

				}

			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBConnection(conn);
		}
		return itemDetailsData;
	}

	public String addNewPCard() {

		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		int userId = CommonUtility.validateNumber(sessionUserId);

		if (userId > 1) {
			try {

				String contactId = CommonUtility.validateString((String) session.getAttribute("contactId"));
				String fromPage = request.getParameter("fromPage");
				session.setAttribute("fromPage", fromPage);
				ArrayList<CreditCardModel> eclipseCreditDetail = new ArrayList<CreditCardModel>();

				cardDetails = new ArrayList<CreditCardModel>();
				cardDetails = SalesDAO.getCreditCardDetails(userId);
				if (cardDetails.size() == 0 && eclipseCreditDetail.size() > 0) {
					// insert to eclipseCreditDetail to DB
					for (CreditCardModel tempEclipse : eclipseCreditDetail) {
						SalesDAO.insertCreditCardDetail(userId, tempEclipse, "");
					}
				} else {
					if (eclipseCreditDetail.size() > 0) {
						if (cardDetails.size() > 0) {

							for (CreditCardModel tempEclipse : eclipseCreditDetail) {
								boolean cardExist = false;
								for (CreditCardModel tempDb : cardDetails) {
									if (tempDb.getElementPaymentAccountId()
											.equalsIgnoreCase(tempEclipse.getElementPaymentAccountId())) {
										cardExist = true;
										break;
									}
								}
								if (!cardExist) {
									SalesDAO.insertCreditCardDetail(userId, tempEclipse, "");// insert
								}

							}

						}
					}
				}
				cardDetails = SalesDAO.getCreditCardDetails(userId);
				try {
					LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
					contentObject.put("cardDetails", cardDetails);
					renderContent = LayoutGenerator.templateLoader("AddNewCreditCard", contentObject, null, null, null);

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			catch (Exception e) {
				e.printStackTrace();
			}
			return SUCCESS;
		} else {
			return "SESSIONEXPIRED";
		}

	}

	public String submitNewCreditCard() {
		String target = SUCCESS;
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			System.out.println(address1);
			String erpLogin = CommonDBQuery.getSystemParamtersList().get("ERPLOGIN");
			UserManagement userObj = new UserManagementImpl();
			UsersModel customerInfoInput = new UsersModel();
			customerInfoInput.setSession(session);
			// userObj.checkERPConnection(customerInfoInput);
			SecureData secureData = new SecureData();
			fromPage = request.getParameter("fromPage");
			session.setAttribute("fromPage", fromPage);
			String selectedShipViaWL = (String) request.getParameter("selectedShipViaWL");
			UsersModel userDetail = new UsersModel();
			if (fromPage != null && fromPage.trim().length() > 0) {
				session.setAttribute("orderedBy", orderedBy);
				session.setAttribute("poNumber", poNumber);
				session.setAttribute("reqDate", reqDate);
				session.setAttribute("shippingInstruction", shippingInstruction);
				session.setAttribute("orderNotes", orderNotes);
				session.setAttribute("shipVia", shipVia);
			}
			String responseUrl = CommonDBQuery.getSystemParamtersList().get("NEWPCARDRESPONSEURL");
			UsersModel userDetailList = new UsersModel();
			if (session.getAttribute("auUserDetails") != null) {
				userDetail = (UsersModel) session.getAttribute("auUserDetails");
			}
			String auUser = (String) session.getAttribute("auUserLogin");
			if (CommonUtility.validateString(erpLogin).equalsIgnoreCase("Y")) {
				if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
					session.setAttribute("fromPage", "AU");
					ArrayList<CreditCardModel> creditCardList = SalesDAO.getCreditCardDetails(userDetail.getUserId());
					if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
						for (CreditCardModel CCDetail : creditCardList) {
							int count = SalesDAO.deleteCreditCardInfo(CCDetail.getPcardId(), userDetail.getUserId());
						}
					}
					ArrayList<ShipVia> customerShipViaListArray = (ArrayList<ShipVia>) session
							.getAttribute("customerShipViaList");
					LinkedHashMap<String, String> shipViaMap = new LinkedHashMap<String, String>();
					if (customerShipViaListArray != null && customerShipViaListArray.size() > 0) {
						for (ShipVia shipVia : customerShipViaListArray) {
							shipViaMap.put(shipVia.getShipViaID().trim().toUpperCase(), shipVia.getDescription());
						}
					}
					if (CommonUtility.validateString(selectedShipViaWL).length() > 0) {
						userDetail.setShipViaDescription(shipViaMap.get(selectedShipViaWL.toUpperCase()));
						userDetail.setShipVia(selectedShipViaWL);
					} else {
						userDetail.setShipViaDescription(shipViaMap.get(shipVia));
						userDetail.setShipVia(shipVia);
					}
					// userDetail.setShipViaDescription(shipViaMap.get(shipVia));
					// userDetail.setShipVia(shipVia);
					userDetail.setReqDate(reqDate);
					userDetail.setPobox(poNumber);// Pobox is user for PO Number
					userDetail.setShippingInstruction(shippingInstruction);
					userDetail.setOrderNotes(orderNotes);
					userDetail.setOrderedBy(orderedBy);
					userDetail.setOrderStatus(orderStatus);
					userDetail.setOrderStatusCode(orderStatusCode);
					if (CommonUtility.validateString(branchID).length() > 0) {
						userDetail.setBranchID(branchID);
					}
					session.setAttribute("auUserDetails", userDetail);
					userDetailList = SalesOrderManagementAction.elementSetup(userDetail.getUserName(),
							userDetail.getPassword(), cardHolder, streetAddress, postalCode, responseUrl);
				} else {
					SecureData userPassword = new SecureData();
					String securePassword = "";
					securePassword = CommonUtility.validateString(
							userPassword.validatePassword((String) session.getAttribute("securedPassword")));
					userDetailList = com.erp.service.cimm2bcentral.action.SalesOrderManagementAction.elementSetup(
							(String) session.getAttribute(Global.USERNAME_KEY), securePassword, cardHolder,
							streetAddress, postalCode, responseUrl);
				}
			} else {
				ArrayList<ShipVia> customerShipViaListArray = (ArrayList<ShipVia>) session
						.getAttribute("customerShipViaList");
				LinkedHashMap<String, String> shipViaMap = new LinkedHashMap<String, String>();
				if (customerShipViaListArray != null && customerShipViaListArray.size() > 0) {
					for (ShipVia shipVia : customerShipViaListArray) {
						shipViaMap.put(shipVia.getShipViaID().trim().toUpperCase(), shipVia.getDescription());
					}
				}
				// userDetail.setShipViaDescription(shipViaMap.get(shipVia));
				userDetail.setShipVia(shipVia);
				userDetail.setReqDate(reqDate);
				userDetail.setPobox(poNumber);// Pobox is user for PO Number
				userDetail.setShippingInstruction(shippingInstruction);
				userDetail.setOrderNotes(orderNotes);
				userDetail.setOrderedBy(orderedBy);
				userDetail.setOrderStatus(orderStatus);
				userDetail.setOrderStatusCode(orderStatusCode);
				session.setAttribute("auUserDetails", userDetail);
			}
			if (CommonUtility.validateString(userDetailList.getElementSetupUrl()).length() > 0) {
				transactionUrl = userDetailList.getElementSetupUrl();
				setupId = userDetailList.getElementSetupId();
			} else {
				transactionUrl = "";
			}
			session.setAttribute("userNickName", nickName);
			System.out.println("element setup url :  " + userDetailList.getElementSetupUrl());
			System.out.println("element setup ID :  " + userDetailList.getElementSetupId());
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			contentObject.put("transactionUrl", transactionUrl);
			// ---Billing
			contentObject.put("billEntityId", billEntityId);
			contentObject.put("defaultBillToId", defaultBillToId);
			contentObject.put("billAddress1", billAddress1);
			contentObject.put("billAddress2", billAddress2);
			contentObject.put("billCity", billCity);
			contentObject.put("billState", billState);
			contentObject.put("billPhoneNo", billPhoneNo);
			contentObject.put("billEmail", billEmail);
			contentObject.put("billCountry", billCountry);
			contentObject.put("billZipcode", billZipcode);
			session.setAttribute("billEntityId_CC", billEntityId);
			session.setAttribute("defaultBillToId_CC", defaultBillToId);
			session.setAttribute("billAddress1_CC", billAddress1);
			session.setAttribute("billAddress2_CC", billAddress2);
			session.setAttribute("billCity_CC", billCity);
			session.setAttribute("billState_CC", billState);
			session.setAttribute("billPhoneNo_CC", billPhoneNo);
			session.setAttribute("billEmail_CC", billEmail);
			session.setAttribute("billCountry_CC", billCountry);
			session.setAttribute("billZipcode_CC", billZipcode);
			// ---Billing

			// ---Shipping
			contentObject.put("shipEntityId", shipEntityId);
			contentObject.put("overrideShip", overrideShip);
			contentObject.put("defaultShipToId", defaultShipToId);
			contentObject.put("address1", address1);
			contentObject.put("address2", address2);
			contentObject.put("city", city);
			contentObject.put("state", state);
			contentObject.put("phoneNumber", phoneNumber);
			contentObject.put("email", email);
			contentObject.put("country", country);
			contentObject.put("zipCode", zipCode);
			session.setAttribute("shipEntityId_CC", shipEntityId);
			session.setAttribute("overrideShip_CC", overrideShip);
			session.setAttribute("defaultShipToId_CC", defaultShipToId);
			session.setAttribute("address1_CC", address1);
			session.setAttribute("address2_CC", address2);
			session.setAttribute("city_CC", city);
			session.setAttribute("state_CC", state);
			session.setAttribute("phoneNumber_CC", phoneNumber);
			session.setAttribute("email_CC", email);
			session.setAttribute("country_CC", country);
			session.setAttribute("zipCode_CC", zipCode);
			// ---Shipping

			// ---Order Details

			contentObject.put("orderType", orderType);
			contentObject.put("reqDate", reqDate);
			contentObject.put("orderedBy", orderedBy);
			contentObject.put("poNumber", poNumber);
			contentObject.put("shipVia", shipVia);
			contentObject.put("shipViaDescription", shipViaDescription);
			contentObject.put("orderStatus", orderStatus);
			contentObject.put("shippingInstruction", shippingInstruction);
			contentObject.put("orderNotes", orderNotes);
			contentObject.put("newsLetterSubscription", newsLetterSubscription);
			contentObject.put("customerReleaseNumber", customerReleaseNumber);
			contentObject.put("isReOrder", isReOrder);
			contentObject.put("upsFrieghtCharges", upsFrieghtCharges);
			session.setAttribute("orderType_CC", orderType);
			session.setAttribute("reqDate_CC", reqDate);
			session.setAttribute("orderedBy_CC", orderedBy);
			session.setAttribute("poNumber_CC", poNumber);
			session.setAttribute("shipVia_CC", shipVia);
			session.setAttribute("shipViaDescription_CC", shipViaDescription);
			session.setAttribute("orderStatus_CC", orderStatus);
			session.setAttribute("shippingInstruction_CC", shippingInstruction);
			session.setAttribute("orderNotes_CC", orderNotes);
			session.setAttribute("newsLetterSubscription_CC", newsLetterSubscription);
			session.setAttribute("customerReleaseNumber_CC", customerReleaseNumber);
			session.setAttribute("isReOrder_CC", isReOrder);
			session.setAttribute("upsFrieghtCharges_CC", upsFrieghtCharges);
			contentObject.put("setupId", setupId);
			contentObject.put("reqType", "popUp");
			contentObject.put("fromPage", "payWithNewCC");

			// ---Order Details

			if (fromPage != null && fromPage.trim().length() > 0
					&& CommonUtility.validateString(fromPage).equalsIgnoreCase("AU")) {
				renderContent = LayoutGenerator.templateLoader("WLNewCardAuthentication", contentObject, null, null,
						null);
			} else {
				renderContent = LayoutGenerator.templateLoader("NewCardAuthentication", contentObject, null, null,
						null);
			}
		} catch (Exception e) {
			e.printStackTrace();
			target = "SESSIONEXPIRED"; // added due to case EBT-9 not tested in template as payment gateway is not
										// available
		}
		return target;
	}

	public String saveCreditCardInfo() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			fromPage = (String) request.getParameter("fromPage");
			ArrayList<CreditCardModel> creditCardList = new ArrayList<CreditCardModel>();
			boolean insertCard = true;
			String target = SUCCESS;
			UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
			String auUser = (String) session.getAttribute("auUserLogin");
			int userId = 0;
			if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
				userId = userDetail.getUserId();
			} else {
				userId = CommonUtility.validateNumber(sessionUserId);
			}

			String paymentAccountID = (String) request.getAttribute("paymentAccountID");
			String transactionSetupId = (String) request.getAttribute("transactionSetupID");
			String expressResponseCode = (String) request.getAttribute("expressResponseCode");
			String hostedPaymentStatus = (String) request.getAttribute("hostedPaymentStatus");
			String requestType = CommonUtility.validateString(request.getParameter("requestType"));
			if (hostedPaymentStatus != null && hostedPaymentStatus.trim().equalsIgnoreCase("Cancelled")) {
				creditCardValue = new CreditCardModel();
				creditCardValue.setStatusDescription("Transaction Has been Cancelled.");
			} else if (expressResponseCode.equalsIgnoreCase("0")) {
				String nName = "";
				if (session.getAttribute("userNickName") != null)
					nName = (String) session.getAttribute("userNickName");

				creditCardList = SalesDAO.getCreditCardDetails(userId);
				UserManagement userObj = new UserManagementImpl();
				UsersModel customerInfoInput = new UsersModel();
				customerInfoInput.setSession(session);
				// userObj.checkERPConnection(customerInfoInput);

				UsersModel tet = new UsersModel();
				SecureData userPassword = new SecureData();
				if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
					tet.setUserName(userDetail.getUserName());
					tet.setElementSetupId(transactionSetupId);
					tet.setUserToken(userDetail.getUserToken());
					tet.setPassword(userDetail.getPassword());
				} else {
					tet.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
					tet.setElementSetupId(transactionSetupId);
					tet.setUserToken((String) session.getAttribute("userToken"));
					SecureData secureData = new SecureData();
					tet.setPassword(CommonUtility.validateString(
							userPassword.validatePassword((String) session.getAttribute("securedPassword"))));
				}
				ArrayList<UsersModel> CreditCardResp = UserManagementAction.ElementSetupRequest(tet);
				creditCardValue = new CreditCardModel();
				for (UsersModel creditCardResp : CreditCardResp) {
					creditCardValue.setElementSetupUrl(creditCardResp.getElementSetupUrl());
					creditCardValue.setElementSetupId(creditCardResp.getElementSetupId());
					creditCardValue.setElementPaymentAccountId(creditCardResp.getElementPaymentAccountId());
					creditCardValue.setZipCode(creditCardResp.getZipCode());
					creditCardValue.setAddress1(creditCardResp.getAddress1());
					creditCardValue.setCardHolder(creditCardResp.getCardHolder());
					creditCardValue.setDate(creditCardResp.getDate());
					creditCardValue.setCreditCardNumber(creditCardResp.getCreditCardNumber());
					creditCardValue.setCreditCardType(creditCardResp.getCreditCardType());
					creditCardValue.setStatusDescription("Success");
					creditCardValue.setNickName(CommonUtility.validateString(nName));
				}
				session.removeAttribute("userNickName");

				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CREDITCARD_SAVE"))
						.equalsIgnoreCase("Y")) {
					SalesDAO.deleteAllCreditCardInfo(userId);
				} else {

					for (CreditCardModel cCList : creditCardList) {
						System.out.println("Credit Card Check1: " + cCList.getCreditCardType());
						System.out
								.println("Credit Card Check2: " + cCList.getDate() + " - " + creditCardValue.getDate());
						System.out.println("Credit Card Check3: " + cCList.getCreditCardType() + " - "
								+ creditCardValue.getCreditCardType());
						System.out.println("Credit Card Check4: " + cCList.getCreditCardNumber() + " - "
								+ creditCardValue.getCreditCardNumber());

						if (cCList.getCreditCardType() != null
								&& cCList.getCreditCardType().trim()
										.equalsIgnoreCase(creditCardValue.getCreditCardType().trim())
								&& cCList.getCreditCardNumber().trim().equalsIgnoreCase(
										"XXXX-XXXX-XXXX-" + creditCardValue.getCreditCardNumber().trim())
								&& cCList.getDate().trim().equalsIgnoreCase(creditCardValue.getDate().trim())) {
							System.out.println(cCList.getCreditCardType());
							System.out.println(cCList.getElementPaymentAccountId());
							System.out.println(creditCardValue.getElementPaymentAccountId());
							creditCardValue.setCardHolder(cCList.getCardHolder());
							creditCardValue.setElementPaymentAccountId(cCList.getElementPaymentAccountId());
							creditCardValue.setAddress1(cCList.getAddress1());
							creditCardValue.setZipCode(cCList.getZipCode());
							System.out.println(creditCardValue.getElementPaymentAccountId());
							insertCard = false;
							break;
						}
					}
				}
				if (insertCard) {
					String responseVal = "";
					creditCardList.add(creditCardValue);
					UsersModel addressList = UsersDAO.getEntityDetailsByUserId(userId);
					if (addressList != null && !CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CREDITCARD_SAVE"))
							.equalsIgnoreCase("Y")) {
						System.out.println(addressList.getUserName());
						if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
							responseVal = "successfully";// ContactUpdateSubmit.creditCardUpdate(userDetail.getUserToken(),
															// userDetail.getUserName(),creditCardList);
						} else {
							responseVal = com.erp.service.cimm2bcentral.action.UserManagementAction.creditCardUpdate(
									(String) session.getAttribute("userToken"), addressList.getUserName(),
									creditCardList);
						}

						System.out.println("CC Update Response : " + responseVal);
					}
					if (CommonUtility.validateString(responseVal).toLowerCase().contains("successfully")
							|| CommonUtility
									.validateString(
											CommonDBQuery.getSystemParamtersList().get("DISABLE_CREDITCARD_SAVE"))
									.equalsIgnoreCase("Y")) {
						SalesDAO.insertCreditCardDetail(userId, creditCardValue, transactionSetupId);
					} else {
						creditCardValue.setStatusDescription("Invalid Credit Card Number");
					}
				}
			} else {
				creditCardValue = new CreditCardModel();
				creditCardValue.setStatusDescription("Transaction Failed.");
			}
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			contentObject.put("transactionUrl", transactionUrl);
			contentObject.put("creditCardValue", creditCardValue);
			contentObject.put("creditCardListDetails", creditCardList);
			if (session != null && session.getAttribute("fromPage") != null) {
				contentObject.put("fromPage",
						CommonUtility.validateString(session.getAttribute("fromPage").toString()));
			}
			if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
				userDetail.setCreditCardList(creditCardList);
				session.setAttribute("auUserDetails", userDetail);
				renderContent = LayoutGenerator.templateLoader("NewCardResponse", contentObject, null, null, null);
			} else {
				for (CreditCardModel cCList : creditCardList) {
					System.out.println("Credit Card Check1: " + cCList.getCreditCardType());
					System.out.println("Credit Card Check2: " + cCList.getDate() + " - " + creditCardValue.getDate());
					System.out.println("Credit Card Check3: " + cCList.getCreditCardType() + " - "
							+ creditCardValue.getCreditCardType());
					System.out.println("Credit Card Check4: " + cCList.getCreditCardNumber() + " - "
							+ creditCardValue.getCreditCardNumber());

					if (cCList.getCreditCardType() != null
							&& cCList.getCreditCardType().trim()
									.equalsIgnoreCase(creditCardValue.getCreditCardType().trim())
							&& cCList.getCreditCardNumber().trim()
									.equalsIgnoreCase("XXXX-XXXX-XXXX-" + creditCardValue.getCreditCardNumber().trim())
							&& cCList.getDate().trim().equalsIgnoreCase(creditCardValue.getDate().trim())) {
						System.out.println(cCList.getCreditCardType());
						System.out.println(cCList.getElementPaymentAccountId());
						System.out.println(creditCardValue.getElementPaymentAccountId());
						creditCardValue.setCardHolder(cCList.getCardHolder());
						creditCardValue.setElementPaymentAccountId(cCList.getElementPaymentAccountId());
						creditCardValue.setAddress1(cCList.getAddress1());
						creditCardValue.setZipCode(cCList.getZipCode());
						System.out.println(creditCardValue.getElementPaymentAccountId());
						insertCard = false;
						break;
					}
				}
				renderContent = LayoutGenerator.templateLoader("NewCardResponse", contentObject, null, null, null);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String getCreditCardDetailsList() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			ArrayList<CreditCardModel> creditCardList = new ArrayList<CreditCardModel>();
			String requestType = CommonUtility.validateString(request.getParameter("requestType"));

			creditCardList = SalesDAO.getCreditCardDetails(userId);

			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			contentObject.put("responseType", requestType);
			contentObject.put("creditCardList", creditCardList);
			renderContent = LayoutGenerator.templateLoader("ResultLoaderPage", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String[] getMPN() {
		return MPN;
	}

	public void setMPN(String[] mPN) {
		MPN = mPN;
	}

	public String RFQStandard() {
		boolean flag = false;
		result = "";
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			ArrayList<ProductsModel> itemList = new ArrayList<ProductsModel>();
			for (int i = 0; i < MPN.length; i++) {
				if (MPN[i].trim().length() > 0 || BRANDNAMEARR[i].trim().length() > 0 || DESCARR[i].trim().length() > 0
						|| PARTNUMARR[i].trim().length() > 0) {// || CPN[i].trim().length() > 0
					ProductsModel productsModel = new ProductsModel();
					productsModel.setManufacturerPartNumber(MPN[i]);
					productsModel.setBrandName(BRANDNAMEARR[i]);
					if (ITEMQTYARR[i].trim().length() > 0 && CommonUtility.validateNumber(ITEMQTYARR[i]) > 0)
						productsModel.setQty(CommonUtility.validateNumber(ITEMQTYARR[i]));
					else
						productsModel.setQty(CommonUtility.validateNumber("1"));
					productsModel.setShortDesc(DESCARR[i]);
					productsModel.setPartNumber(PARTNUMARR[i]);
					// productsModel.setCustomerPartNumber(CPN[i]);
					if (ITEMURL != null && ITEMURL.length > i) {
						productsModel.setItemUrl(ITEMURL[i]);
					}
					if (IMAGE != null && IMAGE.length > i) {
						productsModel.setImageURL(IMAGE[i]);
					}
					itemList.add(productsModel);
				}

			}

			SendMailModel sendMailModel = new SendMailModel();
			if (CommonUtility.validateString(request.getParameter("sendmailToSalesRepOnly")).equalsIgnoreCase("Y")) {
				sendMailModel.setDefaultFalg(true);
				sendMailModel.setAdditionalName(request.getParameter("additionalName"));// Sales rep name
			}
			String uploadedFileNames = request.getParameter("uploadedFileNames");
			if (uploadedFileNames != null && uploadedFileNames.length() > 0) {
				String filePath = CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("TEMPUPLOADDIRECTORYPATH"));
				String[] uploadedFiles = uploadedFileNames.split(";");
				if (uploadedFiles.length > 0) {
					Map<String, String> attachmentDetails = new HashMap<>();
					for (String fullPath : uploadedFiles) {
						String serverPrefix = filePath + "/" + session.getId() + "_";
						attachmentDetails.put(fullPath.replace(serverPrefix, " "), fullPath);
					}
					sendMailModel.setAttachmentDetails(attachmentDetails);
				}
			}

			sendMailModel.setCustomerID(session.getAttribute("contactId").toString());
			sendMailModel.setFirstName(request.getParameter("firstName"));
			sendMailModel.setLastName(request.getParameter("lastName"));
			sendMailModel.setAddress1(request.getParameter("address1"));
			sendMailModel.setAddress2(request.getParameter("address2"));
			sendMailModel.setJobTitle(request.getParameter("jobTitle"));
			sendMailModel.setMobileNo(request.getParameter("cellPhoneNumber"));
			sendMailModel.setUserName(orderedBy);
			sendMailModel.setMailSubject(
					LayoutLoader.getMessageProperties().get(session.getAttribute("localeCode").toString().toUpperCase())
							.getProperty("sentmailconfig.requestforquote.subject").trim());
			sendMailModel.setToEmailId(email);
			sendMailModel.setPhone(phoneNumber);
			sendMailModel.setUserId(CommonUtility.validateNumber((String) session.getAttribute(Global.USERID_KEY)));
			if (session != null && session.getAttribute("loginCustomerName") != null) {
				sendMailModel.setCustomerName(
						CommonUtility.validateString((String) session.getAttribute("loginCustomerName")));
			}
			sendMailModel.setSubsetId(subsetId);
			sendMailModel.setGeneralSubsetId(generalSubset);
			String bccFromNotification = "";
			
			if(session.getAttribute("customerCustomFieldValue") != null){
				LinkedHashMap<String, String> salesRepEmailList = (LinkedHashMap<String, String>)session.getAttribute("customerCustomFieldValue");
				if(salesRepEmailList.size() >0){
					bccFromNotification = salesRepEmailList.get("IN_SIDE_SALES_REP_CUST") !=null ?salesRepEmailList.get("IN_SIDE_SALES_REP_CUST")+";":"";
				}
				sendMailModel.setBccEmailId(bccFromNotification);

			}
			SendMailUtility sendMailUtility = new SendMailUtility();
			flag = sendMailUtility.sendRFQMailStandard(sendMailModel, itemList, reqDate, comments);

			if (flag) {
				if (CommonDBQuery.getSystemParamtersList().get("GET_RFQ_ITEM_LIST") != null && CommonDBQuery
						.getSystemParamtersList().get("GET_RFQ_ITEM_LIST").trim().equalsIgnoreCase("Y")) {
					SalesDAO.clearRfqCart(userId);
				}
				result = "0|Request has been sent successfully.";
			} else {
				result = "1|Sorry, request failed. Please try again.";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		renderContent = result;

		return SUCCESS;
	}

	// Without Login Checkout Process Start
	public String WLCheckout() {

		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			UsersAction LoadShipvia = new UsersAction();
			LoadShipvia.loadShipDetailsForUser();
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			String tempSubset = (String) session.getAttribute("userSubsetId");
			contentObject.put("subsetId", tempSubset);
			contentObject.put("generalsubsetId", tempGeneralSubset);
			if (CommonDBQuery.getSystemParamtersList().get("ENABLE_GUIDED_CHECKOUT") != null && CommonDBQuery
					.getSystemParamtersList().get("ENABLE_GUIDED_CHECKOUT").trim().equalsIgnoreCase("Y")) {
				contentObject = ProductsDAO.getShoppingCartDao(session, contentObject);
				contentObject.put("itemLevelShipSelected", contentObject.get("productListData"));
			}
			contentObject.put("itemAvailabilityStatus", itemAvailabilityStatus);
			renderContent = LayoutGenerator.templateLoader("WLCheckout", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;

	}

	public String auConfirmOrder() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			double totalCartFrieghtCharges = 0;
			UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
			String auUser = (String) session.getAttribute("auUserLogin");
			String wareHousecode = (String) session.getAttribute("wareHouseCode");
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			String discountValue = (String) session.getAttribute("discountValueToERP");
			String discountType = (String) session.getAttribute("discountType");
			String reqApprType = (String) request.getParameter("reqTypeCode");
			List<Discount> appliedlDiscounts = new ArrayList<Discount>();
			double orderItemsDiscountVal = 0.0D;
			double orderDiscountVal = 0.0D;
			double totalSavingOnOrder = 0.0D;
			String discountAvailed = "no";
			String freeShipping = "no";
			String userToken = userDetail.getUserToken();
			session.setAttribute("userToken", userToken);
			ArrayList<String> invalidCoupons = new ArrayList<String>();
			String selectedShipViaWL = (String) request.getParameter("selectedShipViaWL");
			int shipViaServiceCode = 0;
			if (CommonUtility.validateString(selectedShipViaWL).length() < 1) {
				selectedShipViaWL = (String) request.getParameter("selectedShipViaAnonymousUser");
			}

			if (CommonUtility.validateString(reqApprType).equalsIgnoreCase("cod")) {
				userDetail.setOrderedBy(orderedBy);
				userDetail.setPobox(poNumber);
				userDetail.setPoNumber(poNumber);
				userDetail.setReqDate(reqDate);
				userDetail.setShipVia(selectedShipViaWL);
				userDetail.setEmailAddress(email);

				userDetail.setShippingInstruction(shippingInstruction);
				userDetail.setOrderNotes(orderNotes);
				userDetail.setShipVia(selectedShipViaWL);
				ArrayList<ShipVia> customerShipViaListArray = (ArrayList<ShipVia>) session
						.getAttribute("customerShipViaList");
				LinkedHashMap<String, String> shipViaMap = new LinkedHashMap<String, String>();
				if (customerShipViaListArray != null && customerShipViaListArray.size() > 0) {
					for (ShipVia shipVia : customerShipViaListArray) {
						shipViaMap.put(shipVia.getShipViaID().trim().toUpperCase(), shipVia.getDescription());
						if (shipVia != null) {
							if (CommonUtility.validateString(shipVia.getShipCode())
									.equalsIgnoreCase(selectedShipViaWL)) {
								shipViaServiceCode = shipVia.getServiceCode();
							} else if (CommonUtility.validateString(shipVia.getShipViaID())
									.equalsIgnoreCase(selectedShipViaWL)) {
								shipViaServiceCode = shipVia.getServiceCode();
							}
						}
					}
				}
				userDetail.setShipViaDescription(shipViaMap.get(selectedShipViaWL));
			}
			double total = 0;
			double subTotal = 0;
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);

			if (ProductsDAO
					.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
				generalSubset = ProductsDAO
						.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
			}

			LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
			cartListData = new ArrayList<ProductsModel>();
			if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
				cartListData = SalesDAO.getOrderDetails(1, 1, userDetail.getSubsetId(), generalSubset, session,
						"auConfirmOrder");
				if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
						.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
					ArrayList<Integer> itemList = new ArrayList<Integer>();
					if (cartListData != null && cartListData.size() > 0) {
						for (ProductsModel pModel : cartListData) {
							itemList.add(pModel.getItemId());
						}
					}
					customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(userDetail.getSubsetId(),
							generalSubset, StringUtils.join(itemList, " OR "), "itemid");
				}

				for (ProductsModel itemPrice : cartListData) {
					total = itemPrice.getCartTotal();
					subTotal = itemPrice.getCartTotal();
				}
			}
			String shipViaServiceName = "UPS";
			if (CommonUtility.validateString(LayoutLoader.getMessageProperties()
					.get(session.getAttribute("localeCode").toString().toUpperCase()).getProperty("ups.service.name"))
					.length() > 0) {
				shipViaServiceName = CommonUtility.validateString(LayoutLoader.getMessageProperties()
						.get(session.getAttribute("localeCode").toString().toUpperCase())
						.getProperty("ups.service.name"));
			} else if (CommonUtility.validateString(
					LayoutLoader.getMessageProperties().get(session.getAttribute("localeCode").toString().toUpperCase())
							.getProperty("ups.service.addon.name"))
					.length() > 0) {
				shipViaServiceName = CommonUtility.validateString(LayoutLoader.getMessageProperties()
						.get(session.getAttribute("localeCode").toString().toUpperCase())
						.getProperty("ups.service.addon.name"));
			}
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("GET_UPS_FRIEGHT_CHARGES"))
					.equalsIgnoreCase("Y")
					&& CommonUtility.validateString(selectedShipViaWL).toUpperCase(Locale.US)
							.contains(shipViaServiceName)) {
				UsersModel shippingAdress = new UsersModel();
				shippingAdress.setShipToName(userDetail.getShipAddress().getShipToName());
				shippingAdress.setPhoneNo(userDetail.getShipAddress().getPhoneNo());
				shippingAdress.setAddress1(userDetail.getShipAddress().getAddress1());
				shippingAdress.setCity(userDetail.getShipAddress().getCity());
				shippingAdress.setState(userDetail.getShipAddress().getState());
				shippingAdress.setZipCodeStringFormat(userDetail.getShipAddress().getZipCode());
				shippingAdress.setCountry(userDetail.getShipAddress().getCountry());
				double totalCartFrieght = SalesDAO.getTotalCartWeight(cartListData);
				WarehouseModel wareHouseDetail = new WarehouseModel();
				if (CommonUtility.validateString(userDetail.getBranchID()).length() > 0) {
					wareHouseDetail = UsersDAO
							.getWareHouseDetailsByCode(CommonUtility.validateString(userDetail.getBranchID()));
					totalCartFrieghtCharges = UpsCarrier.getUPSFreightCharges(totalCartFrieght, wareHouseDetail,
							shippingAdress, shipViaServiceCode);
				} else {
					wareHouseDetail = UsersDAO.getWareHouseDetailsByCode(wareHousecode);
					totalCartFrieghtCharges = UpsCarrier.getUPSFreightCharges(totalCartFrieght, wareHouseDetail,
							shippingAdress, shipViaServiceCode);
				}
				total = total + totalCartFrieghtCharges;
			}
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("GET_FEDEX_FRIEGHT_CHARGES"))
					.equalsIgnoreCase("Y")
					&& CommonUtility.validateString(selectedShipViaWL).toUpperCase(Locale.US).contains("FED")) {
				UsersModel shippingAdress = new UsersModel();
				shippingAdress.setShipToName(userDetail.getShipAddress().getShipToName());
				shippingAdress.setPhoneNo(userDetail.getShipAddress().getPhoneNo());
				shippingAdress.setAddress1(userDetail.getShipAddress().getAddress1());
				shippingAdress.setCity(userDetail.getShipAddress().getCity());
				shippingAdress.setState(userDetail.getShipAddress().getState());
				shippingAdress.setZipCodeStringFormat(userDetail.getShipAddress().getZipCode());
				shippingAdress.setCountry(userDetail.getShipAddress().getCountry());
				ProductsModel totalCartDimensions = new ProductsModel();
				totalCartDimensions = SalesDAO.getTotalDimensions(cartListData);
				double totalCartWeight = SalesDAO.getTotalCartWeight(cartListData);
				int totalCartLength = (int) totalCartDimensions.getLength();
				int totalCartHeight = (int) totalCartDimensions.getHeight();
				int totalCartWidth = (int) totalCartDimensions.getWidth();
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ERP"))
						.equalsIgnoreCase("eclipse")) {
					wareHousecode = (String) session.getAttribute("homeBranchId");
				}
				WarehouseModel wareHouseDetail = new WarehouseModel();
				wareHouseDetail = UsersDAO.getWareHouseDetailsByCode(wareHousecode);
				totalCartFrieghtCharges = RateWebServiceClient.getFedExFreightCharges(totalCartWeight, totalCartLength,
						totalCartHeight, totalCartWidth, wareHouseDetail, shippingAdress,
						CommonUtility.validateString(selectedShipViaWL));
				total = total + totalCartFrieghtCharges;

			}
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("IS_DISCOUNT_COUPONS_ENABLED"))
					.equalsIgnoreCase("Y")) {
				Cart cart = null;
				if (cartListData != null && cartListData.size() > 0) {
					// removing old discount calculation if any from session
					clearSavedDiscounts(session);
					cart = new Cart();
					cart.setCustomerName(userDetail.getCustomerName());
					cart.setUserId(userDetail.getUserId());
					cart.setBuyingCompanyId(userDetail.getBuyingCompanyId());
					cart.setUserName(userDetail.getUserName());
					cart.setWebsite(userDetail.getWebsite());
					LinkedHashMap<String, String> userCustomFieldValue = (LinkedHashMap<String, String>) session
							.getAttribute("userCustomFieldValue");
					if (userCustomFieldValue != null && CommonUtility
							.validateString(userCustomFieldValue.get("USER_LEVEL_COUPON_GROUPS")).length() > 0) {
						cart.setUserGroupName(userCustomFieldValue.get("USER_LEVEL_COUPON_GROUPS"));
					}
					LinkedHashMap<String, String> customerCustomFieldValue = (LinkedHashMap<String, String>) session
							.getAttribute("customerCustomFieldValue");
					if (customerCustomFieldValue != null && CommonUtility
							.validateString(userCustomFieldValue.get("CUSTOMER_COUPON_GROUP")).length() > 0) {
						cart.setCustomerGroupName(customerCustomFieldValue.get("CUSTOMER_COUPON_GROUP"));
					}
					if (session.getAttribute("wareHouseName") != null) {
						cart.setWareHouseName((String) session.getAttribute("wareHouseName"));
					}
					for (ProductsModel cartItem : cartListData) {
						LineItem lineItem = new LineItem();
						lineItem.setLineItemId(cartItem.getProductListId());
						lineItem.setPartNumber(cartItem.getPartNumber());
						lineItem.setOrderQuantity(cartItem.getQty());
						lineItem.setPrice((float) cartItem.getPrice());
						lineItem.setExtendedPrice((float) cartItem.getTotal());
						if (cartItem.getItemId() != CommonUtility.validateNumber(
								CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
							if (CommonUtility.validateString(
									(String) cartItem.getCustomFieldVal().get("custom_ITEM_LEVEL_COUPON_GROUPS"))
									.length() > 0) {
								lineItem.setItemGroupName(
										(String) cartItem.getCustomFieldVal().get("custom_ITEM_LEVEL_COUPON_GROUPS"));
							}
						}
						if (CommonUtility.validateString(userDetail.getWareHouseCodeStr()).length() > 0) {
							lineItem.setWareHouseName(userDetail.getWareHouseName());
						}
						cart.getLineItems().add(lineItem);
					}
					try {
						SalesPromotionService promotionService = SalesPromotionService.getInstance();

						List<Coupon> couponsList = new ArrayList<Coupon>();

						if (discountCoupons == null) {
							Coupon coupon = new Coupon();
							coupon.setCopounCode("zzzzzzzz");
							couponsList.add(coupon);
						} else {
							for (String couponCode : discountCoupons.split(",")) {
								Coupon coupon = new Coupon();
								coupon.setCopounCode(couponCode);
								couponsList.add(coupon);
							}
						}
						cart.setSelectedShipMethod(selectedShipViaWL);
						promotionService.checkDiscount(cart, couponsList);
						for (LineItem discountedLineItem : cart.getLineItems()) {
							for (ProductsModel cartItem : cartListData) {
								if (cartItem.getProductListId() == discountedLineItem.getLineItemId()) {
									cartItem.setdDiscountValue(discountedLineItem.getDiscount());
									cartItem.setTotal(discountedLineItem.getExtendedPrice());
									cartItem.setNetPrice(discountedLineItem.getNetPrice());
									if (discountedLineItem.getAvailedDiscount() != null) {
										cartItem.setPromoCode(discountedLineItem.getAvailedDiscount()
												.getDiscountCoupon().getCopounCode());
										appliedlDiscounts.add(discountedLineItem.getAvailedDiscount());
									}
									orderItemsDiscountVal += discountedLineItem.getDiscount();
								}
							}

						}
						if (cart.isItemDiscountAvailed()) {
							discountAvailed = "yes";
						}
						if (cart.getDiscount() > 0.0) {
							orderDiscountVal = cart.getDiscount();
							appliedlDiscounts.addAll(cart.getAvailedDiscounts());
							discountAvailed = "yes";
						}
						if (cart.isFreeShipping()) {
							freeShipping = "yes";
							appliedlDiscounts.add(cart.getAvailedShippingDiscount());
						}
						total = cart.getTotal();
						subTotal = cart.getTotal();
						totalSavingOnOrder = orderItemsDiscountVal + orderDiscountVal;
						// setting in session to use in save sales order
						Collection<String> appliedCouponsArray = new ArrayList<String>();
						for (Discount test : appliedlDiscounts) {
							appliedCouponsArray.add(test.getDiscountCoupon().getCopounCode());
						}
						for (Coupon enteredCoupon : couponsList) {
							if (CommonUtility.validateString(enteredCoupon.getCopounCode()).length() > 0) {
								if (appliedlDiscounts.size() > 0 && !CommonUtility
										.validateString(enteredCoupon.getCopounCode()).equals("zzzzzzzz")) {
									if (!appliedCouponsArray.contains(enteredCoupon.getCopounCode())) {
										invalidCoupons.add(enteredCoupon.getCopounCode());
									}
								} else {
									if (!CommonUtility.validateString(enteredCoupon.getCopounCode())
											.equals("zzzzzzzz")) {
										invalidCoupons.add(enteredCoupon.getCopounCode());
									}
								}
							}
						}
						session.setAttribute("availedDiscounts", cart);
						session.setAttribute("appliedDiscountCoupons", appliedlDiscounts);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			}
			FreightCalculatorModel freightValue = null;
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
					.equalsIgnoreCase("SHIPVIA_COST_TABLE")
					&& session.getAttribute("customerShipViaListJson") != null) {
				String shipCostTableJasonString = CommonUtility
						.validateString((String) session.getAttribute("customerShipViaListJson"));
				Gson gson = new Gson();
				// LinkedList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
				// new TypeToken<List<ShipVia>>(){}.getType());
				ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
						new TypeToken<List<ShipVia>>() {
						}.getType());
				if (shipCostTable != null && !shipCostTable.isEmpty()) {

					if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
						session.removeAttribute("selectedShipCodeOption");
					} else {
						if (session.getAttribute("selectedShipCodeOption") != null)
							selectedShipCodeOption = CommonUtility
									.validateString(session.getAttribute("selectedShipCodeOption").toString());
					}
					if (shipCostTable != null && !shipCostTable.isEmpty()) {
						if (freeShipping.equalsIgnoreCase("no")) {
							for (ShipVia shipViaObj : shipCostTable) {
								if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
									if (shipViaObj.getShipCode().equalsIgnoreCase(selectedShipCodeOption)) {
										freightValue = new FreightCalculatorModel();
										freightValue.setFreightValue(shipViaObj.getShipCost());
										session.setAttribute("selectedShipCodeOption", selectedShipCodeOption);
										break;
									}
								} else {
									if (shipViaObj.getShipViaID().equalsIgnoreCase(selectedShipViaWL)) {
										freightValue = new FreightCalculatorModel();
										freightValue.setFreightValue(shipViaObj.getShipCost());
										break;
									}
								}
							}
						}
					}

					/*
					 * if(shipCostTable!=null && !shipCostTable.isEmpty()){ for (ShipVia shipViaObj
					 * : shipCostTable) {
					 * if(shipViaObj.getShipViaID().equalsIgnoreCase(selectedShipViaWL)){
					 * freightValue = new FreightCalculatorModel();
					 * freightValue.setFreightValue(shipViaObj.getShipCost()); break; } } }
					 */
				}
				if (freightValue != null) {
					total = total + freightValue.getFreightValue();
				}
			}
			double taxFromErp = 0;

			SalesModel quoteResponse = null;
			if (!CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
					.equalsIgnoreCase("SO")) {
				SalesOrderManagement salesObj = new SalesOrderManagementImpl();

				LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();

				defaultBillToId = CommonUtility.validateNumber(
						CommonUtility.validateParseIntegerToString(userDetail.getBillAddress().getAddressBookId()));
				defaultShipToId = CommonUtility.validateNumber(
						CommonUtility.validateParseIntegerToString(userDetail.getShipAddress().getAddressBookId()));

				HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
						defaultShipToId);
				billEntityId = userAddress.get("Bill").getEntityId();
				shipEntityId = userAddress.get("Ship").getEntityId();
				billAddress = userAddress.get("Bill");
				shipAddress = userAddress.get("Ship");

				session.setAttribute("reqDate", userDetail.getReqDate());
				createQuoteInput.put("orderedBy", userDetail.getOrderedBy());
				createQuoteInput.put("itemList", cartListData);
				createQuoteInput.put("userToken", userDetail.getUserToken());
				createQuoteInput.put("shipToEntity", userDetail.getContactId());
				createQuoteInput.put("orderNotes", userDetail.getOrderNotes());
				createQuoteInput.put("shippingInstruction", userDetail.getShippingInstruction());
				createQuoteInput.put("poNumber", userDetail.getPoNumber());
				createQuoteInput.put("reqDate", reqDate);
				createQuoteInput.put("shipVia", userDetail.getShipVia());
				createQuoteInput.put("selectedShipCodeOption", selectedShipCodeOption);
				createQuoteInput.put("billAddress", billAddress);
				createQuoteInput.put("shipAddress", shipAddress);
				createQuoteInput.put("defaultBillToId", defaultBillToId);
				createQuoteInput.put("defaultShipToId", defaultShipToId);
				createQuoteInput.put("customerId", userDetail.getUserToken());
				createQuoteInput.put("wareHousecode", CommonUtility.validateString(userDetail.getWareHouseCodeStr()));
				createQuoteInput.put("customerCountry", CommonUtility.validateString(userDetail.getCountry()));
				createQuoteInput.put("customerName", CommonUtility.validateString(shipAddress.getCustomerName()));
				createQuoteInput.put("customerReleaseNumber", customerReleaseNumber);
				createQuoteInput.put("discountValue", discountValue);
				createQuoteInput.put("discountType", discountType);
				createQuoteInput.put("buyingCompanyId", userDetail.getBuyingCompanyId());
				createQuoteInput.put("selectedBranch", selectedBranch);
				createQuoteInput.put("selectedWillCallBranchCode",
						CommonUtility.validateString(selectedWillCallBranchCode));
				createQuoteInput.put("orderDiscountVal", orderDiscountVal);
				if (userDetail.getEmailAddress() != null && userDetail.getEmailAddress().trim().length() > 0) {
					createQuoteInput.put("userEmailAddress", userDetail.getEmailAddress());
				}
				if (userDetail.getOfficePhone() != null && userDetail.getOfficePhone().trim().length() > 0) {
					createQuoteInput.put("userOfficePhone", userDetail.getOfficePhone());
				}
				if (customFieldVal != null) {
					createQuoteInput.put("customFieldVal", customFieldVal);
				}
				if (freightValue != null) {
					createQuoteInput.put("freight", freightValue.getFreightValue());
				}
				createQuoteInput.put("creditCardValue", creditCardValue);
				if (!(CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CREATE_QUOTE_CART"))
						.equalsIgnoreCase("Y"))) {
					quoteResponse = salesObj.createQuote(createQuoteInput);
					taxFromErp = quoteResponse.getTax();
				}
			} else {
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("TAXABLE_STATE"))
						.equalsIgnoreCase(CommonUtility.validateString(userDetail.getShipAddress().getState()))) {
					UsersModel shipAddresstoERP = new UsersModel();
					shipAddresstoERP
							.setShipToId(CommonUtility.validateString(userDetail.getShipAddress().getShipToId()));
					shipAddresstoERP
							.setAddress1(CommonUtility.validateString(userDetail.getShipAddress().getAddress1()));
					shipAddresstoERP
							.setAddress2(CommonUtility.validateString(userDetail.getShipAddress().getAddress2()));
					shipAddresstoERP.setCity(CommonUtility.validateString(userDetail.getShipAddress().getCity()));
					shipAddresstoERP.setZipCodeStringFormat(
							CommonUtility.validateString(userDetail.getShipAddress().getZipCode()));
					shipAddresstoERP.setState(CommonUtility.validateString(userDetail.getShipAddress().getState()));
					shipAddresstoERP.setCountry(CommonUtility.validateString(userDetail.getShipAddress().getCountry()));
					LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();
					createQuoteInput.put("customerId", userDetail.getUserToken());
					createQuoteInput.put("wareHousecode", userDetail.getWareHouseCodeStr());
					createQuoteInput.put("itemList", cartListData);
					createQuoteInput.put("shipAddress", shipAddresstoERP);
					createQuoteInput.put("orderDiscountVal", orderDiscountVal);
					SalesOrderManagement salesObj = new SalesOrderManagementImpl();
					LinkedHashMap<String, Object> taxOutPutFromERP = salesObj.getTaxFromERP(createQuoteInput);
					if (taxOutPutFromERP != null && !taxOutPutFromERP.isEmpty()) {
						ProductsModel itemTaxOutPut = (ProductsModel) taxOutPutFromERP.get("TaxInfo");
						taxFromErp = itemTaxOutPut.getSalesTax();
					}
				}
			}
			orderTotal = total + totalCartFrieghtCharges + taxFromErp - orderDiscountVal;
			String quoteNumber = "";
			if (quoteResponse != null) {
				quoteNumber = CommonUtility.validateString(quoteResponse.getQuoteNumber());
				if (quoteNumber != null && !quoteNumber.trim().equalsIgnoreCase("")) {
					session.setAttribute("quoteNumber", quoteNumber);
				}
				session.setAttribute("quoteResponse", quoteResponse);
			}
			System.out.println("Req Date : " + reqDate);
			orderTotal = total + totalCartFrieghtCharges + taxFromErp - orderDiscountVal;
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			contentObject.put("quoteNumber", quoteNumber);
			contentObject.put("reqDate", reqDate);
			session.setAttribute("auUserDetails", userDetail);// ------ New
			contentObject.put("userDetails", userDetail);
			contentObject.put("billAddress", userDetail.getBillAddress());
			contentObject.put("shipAddress", userDetail.getShipAddress());
			contentObject.put("freightValue", freightValue);
			contentObject.put("cartListData", cartListData);
			contentObject.put("reqApprType", reqApprType);
			contentObject.put("customFieldVal", customFieldVal);
			contentObject.put("subTotal", subTotal);
			contentObject.put("orderTotal", orderTotal);
			contentObject.put("selectedShipCodeOption", selectedShipCodeOption);
			contentObject.put("totalCartFrieghtCharges", totalCartFrieghtCharges);
			contentObject.put("discountType", discountType);
			contentObject.put("discountAvailed", discountAvailed);
			contentObject.put("appliedDiscountCoupons", appliedlDiscounts);
			contentObject.put("orderItemsDiscount", orderItemsDiscountVal);
			contentObject.put("orderDiscount", orderDiscountVal);
			contentObject.put("totalSavings", totalSavingOnOrder);
			contentObject.put("orderTax", taxFromErp);
			contentObject.put("invalidCoupons", StringUtils.join(invalidCoupons, ","));
			contentObject.put("quoteResponse", quoteResponse);
			if (CommonUtility.customServiceUtility() != null) {
				CommonUtility.customServiceUtility().setOrderValuesFromQuoteResponse(quoteResponse, contentObject);
			}
			renderContent = LayoutGenerator.templateLoader("WLConfirmOrderPage", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String auSubmitOrder() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String orderTax = (String) request.getParameter("orderTax");
		String paymentTermsCode = (String) request.getParameter("reqTypeCode");
		String ipAddress = request.getHeader("X-Forwarded-For");
		String upsFrieghtCharges = (String) request.getParameter("orderFreight");
		String orderFreight = (String) request.getParameter("orderFreight");
		if (ipAddress == null) {
			ipAddress = request.getRemoteAddr();
		}
		int orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
		UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
		String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
		String tempSubset = (String) session.getAttribute("userSubsetId");
		double total = 0;
		int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
		int subsetId = CommonUtility.validateNumber(tempSubset);
		Connection conn = null;
		ResultSet rs = null;
		CallableStatement stmt = null;
		PreparedStatement pstmt = null;
		String discountCouponCode = null;
		double discountAmount = 0.0D;
		double orderTotalDiscountAmount = 0.0D;
		float discountInPercent = 0.00F;
		String discountCouponType = null;
		String freeShipping = "no";
		String anonymous = "Y";
		String discountTypeCheck = "";
		try {
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("GUSTE_CHECKOUT_USER_NAME"))
					.length() > 0) {
				auEmail = CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("GUSTE_CHECKOUT_USER_NAME"));
				HashMap<String, String> userDetailsFromDB = UsersDAO.getUserPasswordAndUserId(auEmail, "Y");
				int userId = CommonUtility.validateNumber(userDetailsFromDB.get("userId"));
				userDetail.setUserId(userId);
			}

			if (ProductsDAO
					.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
				generalSubset = ProductsDAO
						.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
			}

			conn = ConnectionManager.getDBConnection();
			UsersModel billAddress = new UsersModel();
			billAddress.setFirstName(userDetail.getBillAddress().getFirstName());
			billAddress.setLastName(userDetail.getBillAddress().getLastName());
			billAddress.setAddress1(userDetail.getBillAddress().getAddress1());
			billAddress.setAddress2(userDetail.getBillAddress().getAddress2());
			billAddress.setCity(userDetail.getBillAddress().getCity());
			billAddress.setState(userDetail.getBillAddress().getState());
			billAddress.setZipCodeStringFormat(userDetail.getBillAddress().getZipCode());
			billAddress.setZipCode(userDetail.getBillAddress().getZipCode());
			billAddress.setCountry(userDetail.getBillAddress().getCountry());
			billAddress.setPhoneNo(userDetail.getBillAddress().getPhoneNo());
			billAddress.setCompanyName(userDetail.getBillAddress().getCompanyName());
			billAddress.setCustomerName(userDetail.getBillAddress().getCompanyName());
			billAddress.setEmailAddress(userDetail.getUserName());
			billAddress.setEntityId(CommonUtility.validateString(userDetail.getBillAddress().getEntityId()));
			billAddress.setEntityName(userDetail.getBillAddress().getCompanyName());
			billAddress.setUserToken(userDetail.getUserToken());
			billAddress.setUserId(userDetail.getUserId());
			billAddress.setSession(session);
			billAddress.setAddressBookId(userDetail.getBillAddress().getAddressBookId());

			UsersModel shipAddress = new UsersModel();
			shipAddress.setShipToId(userDetail.getShipAddress().getShipToId());
			shipAddress.setFirstName(userDetail.getShipAddress().getFirstName());
			shipAddress.setLastName(userDetail.getShipAddress().getLastName());
			shipAddress.setCompanyName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setCustomerName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setAddress1(userDetail.getShipAddress().getAddress1());
			shipAddress.setAddress2(userDetail.getShipAddress().getAddress2());
			shipAddress.setCity(userDetail.getShipAddress().getCity());
			shipAddress.setState(userDetail.getShipAddress().getState());
			shipAddress.setZipCodeStringFormat(userDetail.getShipAddress().getZipCode());
			shipAddress.setZipCode(userDetail.getShipAddress().getZipCode());
			shipAddress.setCountry(userDetail.getShipAddress().getCountry());
			shipAddress.setPhoneNo(userDetail.getShipAddress().getPhoneNo());
			shipAddress.setOrderNotes(userDetail.getOrderNotes());
			shipAddress.setShippingInstruction(userDetail.getShippingInstruction());
			shipAddress.setEntityId(CommonUtility.validateString(userDetail.getShipAddress().getEntityId()));
			shipAddress.setEntityName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setUserToken(userDetail.getUserToken());
			shipAddress.setEmailAddress(userDetail.getUserName());
			shipAddress.setUserId(userDetail.getUserId());
			shipAddress.setSession(session);
			shipAddress.setAddressBookId(userDetail.getShipAddress().getAddressBookId());

			UserManagement userUpdate = new UserManagementImpl();
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("UPDATE_CUSTOMER_API"))
					.length() > 0) {
				userUpdate.editBillingAddress(billAddress);
			}
			userUpdate.editShippingAddress(shipAddress);

			String paymentMethod = "Purchase Order";

			ArrayList<CreditCardModel> creditCardList = SalesDAO.getCreditCardDetails(userDetail.getUserId());
			CreditCardModel CCard = new CreditCardModel();
			if (creditCardList != null && creditCardList.size() > 0) {

				for (CreditCardModel CcardDetail : creditCardList) {
					ccNumber = CcardDetail.getCreditCardNumber();
					ccNumber = ccNumber.replaceAll("XXXX-", "");
					ccNumber = ccNumber.replaceAll("\\*", "");
					ccNumber = ccNumber.replaceAll("#", "");
					ccNumber = ccNumber.replaceAll("-", "");
					CcardDetail.setCreditCardNumber(ccNumber);
					CcardDetail.setCreditCardAuthType(CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("CreditCardAuthType")));
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("CreditCardTypeCode"))
							.equalsIgnoreCase("Y") && CommonDBQuery.getCreditCardErpCode() != null) {
						LinkedHashMap<String, String> creditCardErpCode = CommonDBQuery.getCreditCardErpCode();
						for (Map.Entry<String, String> entry : creditCardErpCode.entrySet()) {
							String key = entry.getKey();
							String value = entry.getValue();
							if (CommonUtility.validateString(key).replaceAll(" ", "").equalsIgnoreCase(CommonUtility
									.validateString(CcardDetail.getCreditCardType()).replaceAll(" ", ""))) {
								CcardDetail.setCreditCardType(CommonUtility.validateString(value));
								break;
							}
						}
					}
					CCard = CcardDetail;
				}
			} else {

				// -------- Sx
				// if(creditCardPayment!=null && creditCardPayment.trim().equalsIgnoreCase("Y")
				// && ccTransactionId!=null && ccTransactionId.trim().length()>0){
				if ((CommonUtility.validateString(payPalToken).length() > 0
						&& CommonUtility.validateString(payPalPayerId).length() > 0)
						|| (CommonUtility.validateString(creditCardPayment).equalsIgnoreCase("Y")
								&& CommonUtility.validateString(ccTransactionId).length() > 0)) {
					String paymentGatewayType = "";
					if (session.getAttribute("PAYMENT_GATEWAY") != null
							&& session.getAttribute("PAYMENT_GATEWAY").toString().length() > 0) {
						paymentGatewayType = (String) session.getAttribute("PAYMENT_GATEWAY");
					} else {
						paymentGatewayType = CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY");
					}

					if (CommonUtility.validateString(payPalToken).length() > 0
							&& CommonUtility.validateString(payPalPayerId).length() > 0) {
						CCard = new CreditCardModel();
						CCard.setPayPalPayerId(CommonUtility.validateString(payPalPayerId));
						CCard.setPayPalToken(CommonUtility.validateString(payPalToken));
						paymentMethod = "PayPal";
					} else {
						ccNumber = ccNumber.replaceAll("XXXX-", "");
						ccNumber = ccNumber.replaceAll("\\*", "");
						ccNumber = ccNumber.replaceAll("#", "");
						ccNumber = ccNumber.replaceAll("-", "");

						CCard = new CreditCardModel();
						CCard.setCreditCardAuthType(CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("CreditCardAuthType")));
						CCard.setCardHolder(cardHolder);
						CCard.setDate(ccExp);
						CCard.setExpDate(ccExp);
						CCard.setElementPaymentAccountId(ccTransactionId);
						CCard.setAddress1(streetAddress);
						CCard.setZipCode(postalCode);
						CCard.setPaymentGatewayType(paymentGatewayType);
						CCard.setCreditCardResponseCode(ccResponseCode);
						CCard.setCreditCardStatus(ccStatus);
						CCard.setCreditCardHostRefNumber(ccHostRefNumber);
						CCard.setCreditCardTaskID(ccTaskID);
						CCard.setCreditCardAmount(ccAmount);
						CCard.setCreditCardDeclineResponseReason(ccDeclineResponseReason);
						CCard.setCreditCardCvv2VrfyCode(ccCvv2VrfyCode);
						CCard.setCreditCardTip(ccTip);
						CCard.setCreditCardTransTimeStamp(ccTransTimeStamp);
						CCard.setCreditCardToken(ccToken);
						CCard.setCreditCardApprovedAmount(ccApprovedAmount);
						CCard.setCreditCardRequestedAmount(ccRequestedAmount);
						CCard.setCreditCardHostResponseCode(ccHostResponseCode);
						CCard.setCreditCardInvoice(ccInvoice);
						CCard.setCreditCardApprovalCode(ccApprovalCode);
						CCard.setCreditCardTransactionID(ccTransactionId);
						CCard.setCreditCardServerTimestamp(ccServerTimestamp);
						if (CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("CreditCardTypeCode"))
								.equalsIgnoreCase("Y") && CommonDBQuery.getCreditCardErpCode() != null) {
							LinkedHashMap<String, String> creditCardErpCode = CommonDBQuery.getCreditCardErpCode();
							for (Map.Entry<String, String> entry : creditCardErpCode.entrySet()) {
								String key = entry.getKey();
								String value = entry.getValue();
								if (CommonUtility.validateString(key).replaceAll(" ", "")
										.equalsIgnoreCase(CommonUtility.validateString(ccType).replaceAll(" ", ""))) {
									ccType = CommonUtility.validateString(value);
								}
							}
						}
						CCard.setCreditCardType(ccType);
						if (CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("P21_CREDIT_CARD_TYPES"))
								.equalsIgnoreCase("Y")) {

							if (!CommonUtility.validateString(ccType).equalsIgnoreCase("")) {
								List<CustomTable> creditCardType = CIMM2VelocityTool.getInstance()
										.getCusomTableData("Website", "CREDIT_CARD_TYPE");
								String credictCardCode = CIMM2VelocityTool.getInstance()
										.getCreditCardCode(creditCardType, ccType);
								if (credictCardCode != null) {
									CCard.setCreditCardType(credictCardCode);
								} else {
									CCard.setCreditCardType(ccType);
								}
							}
						} else {
							CCard.setCreditCardType(ccType);
						}
						CCard.setCreditCardFee(ccFee);
						CCard.setCreditCardExternalSessionID(ccExternalSessionID);
						CCard.setCreditCardAddVrfyCode(ccAddVrfyCode);
						CCard.setCreditCardTax(ccTax);
						CCard.setCreditCardNewDomainKey(ccNewDomainKey);
						CCard.setCreditCardNumber(ccNumber);
						CCard.setCreditCardRefNumber(ccRefrenceCode);
						CCard.setCreditCardMerchantId(ccMerchantId);
						paymentMethod = "Credit Card";
					}
					if (ccOrderNumber != null && ccOrderNumber.trim().length() > 0) {
						orderId = CommonUtility.validateNumber(ccOrderNumber);
					}

				}
				// -------- Sx
			}
			String homeBranchId = (String) session.getAttribute("homeBranchId");
			String homeBranchName = (String) session.getAttribute("homeBranchName");
			String shipBranchId = (String) session.getAttribute("shipBranchId");
			String shipBranchName = (String) session.getAttribute("shipBranchName");

			LinkedHashMap<String, Object> orderDetail = new LinkedHashMap<String, Object>();
			orderDetail.put("homeBranchId", homeBranchId);
			orderDetail.put("homeBranchName", homeBranchName);
			orderDetail.put("shipBranchId", shipBranchId);
			orderDetail.put("shipBranchName", shipBranchName);
			billAddress.setSession(session);
			String discountValue = (String) session.getAttribute("discountValue");
			String discountType = (String) session.getAttribute("discountType");
			Discount orderShippingDiscount = getOrderShippingDiscount(session);
			if (orderShippingDiscount != null) {
				try {
					String website = userDetail.getWebsite();
					if (orderId <= 0) {
						orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
					}
					orderDetail.put(SalesActionContantVariables.ORDER_ID, orderId);
					orderDetail.put(SalesActionContantVariables.USER_ID, userDetail.getUserId());
					// save Order Level Discount
					SalesPromotionService salesPromo = SalesPromotionService.getInstance();
					if (orderShippingDiscount != null) {
						discountTypeCheck = orderShippingDiscount.getDiscountType().name();
						if (salesPromo.storeCouponUsed(orderShippingDiscount, String.valueOf(orderId),
								userDetail.getUserId(), userDetail.getBuyingCompanyId(), website)
								&& CommonUtility.validateString(discountTypeCheck).length() > 0
								&& discountTypeCheck.equals("FREE_SHIPPING")) {
							freeShipping = "yes";
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
									String.valueOf(orderShippingDiscount.getDiscountValue()));
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
									String.valueOf(orderShippingDiscount.getDiscountInPercent()));
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
									orderShippingDiscount.getDiscountCoupon().getCopounCode());
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
									orderShippingDiscount.getDiscountType().name());
							orderDetail.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
									SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
							orderDetail = SalesDAO.CouponDataCrud(orderDetail);
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			// Order Discount
			List<Discount> orderDiscounts = getOrderDiscount(session);
			if (orderDiscounts != null && orderDiscounts.size() > 0) {
				for (Discount orderDiscount : orderDiscounts) {
					try {
						String website = userDetail.getWebsite();
						if (orderId <= 0) {
							orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
						}
						orderDetail.put(SalesActionContantVariables.ORDER_ID, orderId);
						orderDetail.put(SalesActionContantVariables.USER_ID, userDetail.getUserId());
						// save Order Level Discount
						SalesPromotionService salesPromo = SalesPromotionService.getInstance();
						if (salesPromo.storeCouponUsed(orderDiscount, String.valueOf(orderId), userDetail.getUserId(),
								userDetail.getBuyingCompanyId(), website)
								&& CommonUtility.validateString(discountTypeCheck).length() > 0
								&& discountTypeCheck.equals("FREE_SHIPPING")) {
							orderTotalDiscountAmount = orderDiscount.getDiscountValue();
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
									String.valueOf(orderDiscount.getDiscountValue()));
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
									String.valueOf(orderDiscount.getDiscountInPercent()));
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
									orderDiscount.getDiscountCoupon().getCopounCode());
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
									orderDiscount.getDiscountType().name());
							orderDetail.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
									SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
							orderDetail = SalesDAO.CouponDataCrud(orderDetail);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			// orderId = saveOrder(conn, userDetail.getUserId(), orderId, billAddress,
			// shipAddress, userDetail.getReqDate(), tempGeneralSubset,
			// CCard.getCreditCardRefNumber(), "Credit Card", CCard.getCreditCardNumber(),
			// CCard.getExpDate(), CCard.getCardHolder(), userDetail.getPobox(), ipAddress,
			// CCard, customerReleaseNumber,orderDetail);
			orderId = saveOrder(conn, userDetail.getUserId(), orderId, billAddress, shipAddress, "webOrder",
					tempGeneralSubset, CCard.getCreditCardRefNumber(), paymentMethod, CCard.getCreditCardNumber(),
					CCard.getExpDate(), CCard.getCardHolder(), userDetail.getPobox(), ipAddress, CCard,
					customerReleaseNumber, orderDetail);
			// orderId = saveOrder(conn, userId, orderId, userBillAddress, userShipAddress,
			// "webOrder",taxExempt,refKey,paymentMethod,ccNumber,ccExp,cardHolder,poNumber,ipaddress,creditCardValue,
			// customerReleaseNumber,orderDetails);
			ProductsModel saveItems = new ProductsModel();
			cartListData = new ArrayList<ProductsModel>();
			cartListData = SalesDAO.getOrderDetails(1, 1, userDetail.getSubsetId(), generalSubset, session,
					"auSubmitOrder");
			LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
			if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
					.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
				ArrayList<Integer> itemList = new ArrayList<Integer>();
				if (cartListData != null && cartListData.size() > 0) {
					for (ProductsModel pModel : cartListData) {
						itemList.add(pModel.getItemId());
					}
				}
				customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(userDetail.getSubsetId(), generalSubset,
						StringUtils.join(itemList, " OR "), "itemid");
			}
			double orderSubTotal = 0.0;
			double orderGrandTotal = 0.0;

			LinkedHashMap<String, String> lineItemCommentList = new LinkedHashMap<String, String>();
			LinkedHashMap<String, Integer> UOMQTY = new LinkedHashMap<String, Integer>();
			for (ProductsModel itemPrice : cartListData) {
				total = itemPrice.getCartTotal();
				String lineComment = "";
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
						.equalsIgnoreCase("Y")) {
					if (CommonUtility.validateString(itemPrice.getMultipleShipVia()).length() > 0
							&& CommonUtility.validateString(userDetail.getShipVia()).equals("MULTIPLE")) {
						lineComment = "Ship Method : " + itemPrice.getMultipleShipVia();
					}
				}
				if (CommonUtility.validateString(itemPrice.getLineItemComment()).length() > 0) {
					if (CommonUtility.validateString(lineComment).length() > 0) {
						lineComment = lineComment + " | " + "LineItemComment : " + itemPrice.getLineItemComment();
					} else {
						lineComment = itemPrice.getLineItemComment();
					}
					lineItemCommentList.put(itemPrice.getPartNumber(), lineComment);
				}
				int packageQty = 1;
				if (itemPrice.getPackageFlag() > 0 && itemPrice.getPackageQty() > 0) {
					packageQty = itemPrice.getPackageQty();
				}
				orderSubTotal = orderSubTotal + (itemPrice.getTotal());
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("UMQTY_FROM_ERP"))
						.equalsIgnoreCase("Y")) {
					for (ProductsModel item : cartListData) {
						UOMQTY.put(item.getPartNumber(), CommonUtility.validateNumber(item.getQtyUOM()));
					}
				} else {
					UOMQTY.put(itemPrice.getPartNumber(), packageQty);
				}

				Discount itemDiscount = getItemDiscount(session, itemPrice.getProductListId(),
						itemPrice.getPartNumber(), itemPrice.getQty());

				if (itemDiscount != null) {
					try {
						// save Item Level Discount
						SalesPromotionService salesPromo = SalesPromotionService.getInstance();
						if (salesPromo.storeCouponUsed(itemDiscount, String.valueOf(orderId), userDetail.getUserId(),
								userDetail.getBuyingCompanyId(), userDetail.getWebsite())) {
							discountCouponCode = itemDiscount.getDiscountCoupon().getCopounCode();
							discountAmount = itemDiscount.getDiscountValue();
							discountInPercent = itemDiscount.getDiscountInPercent();
							discountCouponType = itemDiscount.getDiscountType().name();
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				saveItems.setItemId(itemPrice.getItemId());
				saveItems.setPartNumber(itemPrice.getPartNumber());
				saveItems.setInvoiceDesc(itemPrice.getInvoiceDesc());
				saveItems.setSalesUom(itemPrice.getSalesUom());
				saveItems.setPackDesc(itemPrice.getPackDesc());
				saveItems.setLineItemComment(itemPrice.getLineItemComment());
				saveItems.setItemLevelRequiredByDate(itemPrice.getItemLevelRequiredByDate());
				saveItems.setCatalogId(itemPrice.getCatalogId());
				saveItems.setShipViaCode(itemPrice.getMultipleShipVia());
				saveItems.setQty(itemPrice.getQty());
				saveItems.setShipViaDesc(itemPrice.getMultipleShipViaDesc());
				saveItems.setCustomerPartNumber("");
				saveItems.setShortDesc(itemPrice.getShortDesc());
				discountCouponCode = itemPrice.getDiscountCouponCode();
				int orderItemId = saveOrderItems(conn, orderId, saveItems, discountCouponCode, discountAmount,
						discountInPercent, discountCouponType);
				// int orderItemId = saveOrderItems(conn, orderId,itemPrice.getItemId(),
				// itemPrice.getQty(),itemPrice.getPartNumber(), "", itemPrice.getShortDesc(),
				// itemPrice.getTotal(), itemPrice.getInvoiceDesc(), itemPrice.getUom(),
				// itemPrice.getPackDesc(),itemPrice.getLineItemComment(),itemPrice.getMultipleShipVia(),itemPrice.getMultipleShipViaDesc(),itemPrice.getItemLevelRequiredByDate(),itemPrice.getCatalogId());
				itemPrice.setOrderItemId(orderItemId);
			}
			if (cartListData != null && cartListData.size() > 0 && session.getAttribute("userToken") != null
					&& !session.getAttribute("userToken").toString().trim().equalsIgnoreCase("")
					&& CommonDBQuery.getSystemParamtersList().get("ERP") != null
					&& !CommonDBQuery.getSystemParamtersList().get("ERP").trim().equalsIgnoreCase("defaults")) {
				if (CommonUtility
						.validateString(
								CommonDBQuery.getSystemParamtersList().get("SAVE_LEADTIME_ON_ORDER_CONFIRMATION"))
						.equalsIgnoreCase("Y")) {
					ProductManagement priceInquiry = new ProductManagementImpl();
					ProductManagementModel leadInquiry = new ProductManagementModel();
					leadInquiry.setHomeTerritory(
							CommonUtility.validateString((String) session.getAttribute("wareHouseCode")));
					leadInquiry.setPartIdentifier(cartListData);
					String leadTimeData = priceInquiry.ajaxBasePriceAndLeadTime(leadInquiry);
					Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
					ProductsModelArray gsonParsed = gson.fromJson("{\"products\":" + leadTimeData + "}",
							ProductsModelArray.class);
					for (ProductsModel eachItem : cartListData) {
						for (ProductsModel eachLeadItem : gsonParsed.getProducts()) {
							if (eachItem.getPartNumber().equalsIgnoreCase(eachLeadItem.getPartNumber())) {
								if (eachItem.getHomeBranchavailablity() == 0) {
									if (eachLeadItem.getLeadTime() == 0) {
										eachItem.setLeadTime(5);
									} else {
										eachItem.setLeadTime(eachLeadItem.getLeadTime());
									}
								} else {
									eachItem.setLeadTime(-1);
								}
							}

						}
					}
				}
				updateOrderItemPrice(conn, orderId, cartListData);
			}
			String shipBranch = (String) session.getAttribute("shipBranchId");
			String homeBranch = (String) session.getAttribute("homeBranchId");
			shipVia = userDetail.getShipVia();
			String shipViaDisplay = null;
			if (userDetail.getShipViaDescription() != null) {
				shipViaDisplay = userDetail.getShipViaDescription();
			} else if (userDetail.getShipViaMethod() != null) {
				shipViaDisplay = userDetail.getShipViaMethod();
			}
			System.out.println("shipViaDisplay------------" + shipViaDisplay);
			if (CommonUtility.validateString(shipBranch).length() > 0
					&& (CommonUtility.validateString(shipVia).toUpperCase().contains("WILL CALL")
							|| CommonUtility.validateString(shipVia).toUpperCase().contains("CUSTOMER PICK UP"))) {
				selectedBranch = shipBranch;
			} else if (homeBranch != null && homeBranch.trim().length() > 0) {
				selectedBranch = homeBranch;
			} else {
				selectedBranch = "";
			}
			SalesModel erpOrderDetail = new SalesModel();
			SalesModel defaultOrderDetail = new SalesModel();
			String quoteNumber = (String) session.getAttribute("quoteNumber");
			orderGrandTotal = orderSubTotal;
			defaultOrderDetail.setSubtotal(orderSubTotal);
			defaultOrderDetail.setTotal(orderGrandTotal);
			defaultOrderDetail.setOrderedBy(userDetail.getOrderedBy());
			defaultOrderDetail.setStatusDescription("Order Successfully Submitted");
			defaultOrderDetail.setOrderNotes(userDetail.getOrderNotes());
			defaultOrderDetail.setShippingInstruction(userDetail.getShippingInstruction());
			defaultOrderDetail.setReqDate(userDetail.getReqDate());
			defaultOrderDetail.setShipViaID(shipVia);
			SalesOrderManagementModel salesOrderInput = new SalesOrderManagementModel();
			SalesModel quoteResponse = null;
			if (session.getAttribute("quoteResponse") != null) {
				quoteResponse = new SalesModel();
				quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
				salesOrderInput.setQuoteResponse(quoteResponse);
			}
			salesOrderInput.setShipVia(shipVia);
			salesOrderInput.setShippingInstruction(userDetail.getShippingInstruction());
			salesOrderInput.setOrderNotes(userDetail.getOrderNotes());
			salesOrderInput.setOrderedBy(userDetail.getOrderedBy());
			salesOrderInput.setReqDate(userDetail.getReqDate());
			salesOrderInput.setSession(session);
			salesOrderInput.setOrderId(orderId);
			salesOrderInput.setBillEntityId(CommonUtility.validateString(userDetail.getBillAddress().getEntityId()));
			salesOrderInput.setShipEntityId(CommonUtility.validateString(userDetail.getShipAddress().getEntityId()));
			salesOrderInput.setUserToken(userDetail.getUserToken());
			salesOrderInput.setShipAddress(userDetail.getShipAddress());
			salesOrderInput.setBillAddress(userDetail.getBillAddress());
			salesOrderInput.setTaxExempt(taxExempt);
			salesOrderInput.setUserName(userDetail.getUserName());
			salesOrderInput.setCreditCardValue(CCard);
			salesOrderInput.setAnonymous(anonymous);
			/*
			 * if(userDetail.getCreditCardList()!=null &&
			 * userDetail.getCreditCardList().size()>0){
			 * salesOrderInput.setCreditCardValue(CCard); }
			 */

			salesOrderInput.setPurchaseOrderNumber(userDetail.getPobox());
			salesOrderInput.setSelectedBranch(selectedBranch);
			salesOrderInput.setPaymentTerms(paymentTermsCode);
			salesOrderInput.setLineItemCommentList(lineItemCommentList);
			salesOrderInput.setCountry(userDetail.getBillAddress().getCountry());
			salesOrderInput.setuOMQTY(UOMQTY);
			salesOrderInput.setOrderStatus(userDetail.getOrderStatus());
			salesOrderInput.setOrderStatusCode(userDetail.getOrderStatusCode());
			salesOrderInput.setFrieghtCharges(orderFreight);// CPE
			if (CommonUtility.validateDoubleNumber(orderTax) > 0) {
				salesOrderInput.setOrderTax(CommonUtility.validateDoubleNumber(orderTax));
			}
			salesOrderInput.setShipViaMethod(shipViaDisplay);

			System.out.println("shipViaDisplay----------:" + shipViaDisplay);
			salesOrderInput.setOrderStatusCode(userDetail.getOrderStatusCode());
			if (quoteNumber != null && !quoteNumber.trim().equalsIgnoreCase("")) {
				salesOrderInput.setQuoteNumber(quoteNumber);
			} else {
				salesOrderInput.setErpOrderType("SO");// -------- Sx /// Check and Confirm
			}
			/// Check and Confirm
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
					.equalsIgnoreCase("SO")
					|| (CommonUtility.validateString(orderingType).length() > 0
							&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO"))) {
				if (CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
						.equalsIgnoreCase(CommonUtility.validateString(orderingType))) {
					salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
				} else if (CommonUtility.validateString(orderingType).length() > 0
						&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO")) {
					salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
				} else if (CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
						.length() > 0) {
					salesOrderInput.setErpOrderType(CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE")));
				}
			}
			/// Check and Confirm

			salesOrderInput.setFrieghtCharges(upsFrieghtCharges);

			// -------- Sx
			String itemleveShipDisplay = "";
			String freightMessage = "";
			FreightCalculatorModel freightValue = null;
			if (total > 0) {
				FreightCalculatorModel freightInput = new FreightCalculatorModel();
				freightInput.setCartTotal(total);
				freightInput.setCountry(userDetail.getCountry());
				freightInput.setCustomerNumber(userDetail.getUserToken());
				freightInput.setLocale(
						CommonUtility.validateString(session.getAttribute("localeCode").toString().toUpperCase()));

				if (customFieldVal != null
						&& CommonDBQuery.getSystemParamtersList().get("OVERSIZE_ITEM_FREIGHT_RULE") != null
						&& CommonDBQuery.getSystemParamtersList().get("OVERSIZE_ITEM_FREIGHT_RULE").trim()
								.equalsIgnoreCase("Y")) {
					for (Map.Entry<Integer, LinkedHashMap<String, Object>> entry : customFieldVal.entrySet()) {
						if (entry != null && entry.getValue() != null
								&& entry.getValue().toString().contains("custom_OverSize=Y")) {
							freightInput.setOverSize("Y");
							break;
						} else {
							freightInput.setOverSize("N");
						}
					}
				}

				if (session.getAttribute("itemleveShip") != null) {
					itemleveShipDisplay = (String) session.getAttribute("itemShipDesc");
				}

				/*
				 * if(shipVia==null){ if(session.getAttribute("selectedShipVia")!=null){ shipVia
				 * = (String) session.getAttribute("selectedShipVia"); } }else{
				 * session.setAttribute("selectedShipVia",shipVia); }
				 */

				freightInput.setShipVia(shipVia);
				freightInput.setWareHouseCode(userDetail.getWareHouseCodeStr());
				// UsersModel shipAddress = null;
				// if(session!=null && session.getAttribute("defaultShipAddress")!=null){
				// shipAddress = (UsersModel) session.getAttribute("defaultShipAddress");
				if (shipAddress != null && shipAddress.getState() != null
						&& shipAddress.getState().trim().length() > 0) {
					freightInput.setState(shipAddress.getState().trim());
				}
				// }

				freightValue = FreightCalculator.getFreightByTotal(freightInput);
				if (freightValue != null) {
					freightMessage = freightValue.getMessage();
				}
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
						.equalsIgnoreCase("SHIPVIA_COST_TABLE")
						&& session.getAttribute("customerShipViaListJson") != null) {
					String shipCostTableJasonString = CommonUtility
							.validateString((String) session.getAttribute("customerShipViaListJson"));
					Gson gson = new Gson();
					// LinkedList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
					// new TypeToken<List<ShipVia>>(){}.getType());
					ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
							new TypeToken<List<ShipVia>>() {
							}.getType());
					if (shipCostTable != null && !shipCostTable.isEmpty()) {

						if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
							session.removeAttribute("selectedShipCodeOption");
						} else {
							if (session.getAttribute("selectedShipCodeOption") != null)
								selectedShipCodeOption = CommonUtility
										.validateString(session.getAttribute("selectedShipCodeOption").toString());
						}
						if (shipCostTable != null && !shipCostTable.isEmpty()) {
							if (freeShipping.equalsIgnoreCase("no")) {
								for (ShipVia shipViaObj : shipCostTable) {
									if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
										if (shipViaObj.getShipCode().equalsIgnoreCase(selectedShipCodeOption)) {
											freightValue = new FreightCalculatorModel();
											freightValue.setFreightValue(shipViaObj.getShipCost());
											session.setAttribute("selectedShipCodeOption", selectedShipCodeOption);
											break;
										}
									} else {
										if (shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)) {
											freightValue = new FreightCalculatorModel();
											freightValue.setFreightValue(shipViaObj.getShipCost());
											break;
										}
									}
								}
							}
						}

						/*
						 * if(shipCostTable!=null && !shipCostTable.isEmpty()){ for (ShipVia shipViaObj
						 * : shipCostTable) {
						 * if(shipViaObj.getShipViaID().equalsIgnoreCase(selectedShipViaWL)){
						 * freightValue = new FreightCalculatorModel();
						 * freightValue.setFreightValue(shipViaObj.getShipCost()); break; } } }
						 */
					}
					if (freightValue != null) {
						total = total + freightValue.getFreightValue();
					}
				}

			}
			// -------- Sx
			// -------- Sx
			String userEmailAddress = (String) session.getAttribute("userEmailAddress");
			String userOfficePhone = (String) session.getAttribute("userOfficePhone");
			LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();
			boolean nonCatalogItem = false;
			for (ProductsModel eachItem : cartListData) {
				if (eachItem.getItemId() == CommonUtility.validateNumber(
						CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
					nonCatalogItem = true;
					break;
				}
			}
			if (nonCatalogItem) {
				createQuoteInput.put("ARIItem", "Y");
			} else {
				createQuoteInput.put("ARIItem", "N");
			}

			createQuoteInput.put("orderedBy", orderedBy);
			createQuoteInput.put("orderType", CommonUtility.validateString(userDetail.getRequestType()));
			createQuoteInput.put("itemList", cartListData);
			createQuoteInput.put("userToken", userDetail.getUserToken());
			createQuoteInput.put("shipToEntity", userDetail.getUserToken());
			createQuoteInput.put("orderNotes", orderNotes);
			createQuoteInput.put("shippingInstruction", shippingInstruction);
			createQuoteInput.put("poNumber", poNumber);
			createQuoteInput.put("reqDate", reqDate);
			createQuoteInput.put("shipVia", shipVia);
			createQuoteInput.put("billAddress", billAddress);
			createQuoteInput.put("shipAddress", shipAddress);
			createQuoteInput.put("defaultBillToId", userDetail.getBillAddress().getAddressBookId());
			createQuoteInput.put("defaultShipToId", userDetail.getShipAddress().getAddressBookId());
			createQuoteInput.put("customerId", userDetail.getUserToken());
			String wareHousecode = "UTIC";
			if (CommonUtility.validateString(shipVia).length() > 0 && shipVia.contains("PK")) {
				wareHousecode = userDetail.getWareHouseCodeStr();
				if (shipVia.equals("PKAA")) {
					wareHousecode = "ANN";
				} else if (shipVia.equals("PKCS")) {
					wareHousecode = "CEDA";
				} else if (shipVia.equals("PKCL")) {
					wareHousecode = "WATE";
				} else if (shipVia.equals("PKFM")) {
					wareHousecode = "FARM";
				} else if (shipVia.equals("PKUT")) {
					wareHousecode = "UTIC";
				}
				createQuoteInput.put("wareHousecode", wareHousecode);
			} else {
				createQuoteInput.put("wareHousecode", userDetail.getWareHouseCodeStr());
			}
			createQuoteInput.put("customerCountry", userDetail.getCountry());
			createQuoteInput.put("customerName", shipAddress.getCustomerName());
			createQuoteInput.put("customerReleaseNumber", customerReleaseNumber);
			createQuoteInput.put("discountValue", discountValue);
			createQuoteInput.put("discountType", discountType);
			createQuoteInput.put("subsetId", subsetId);
			createQuoteInput.put("generalSubset", generalSubset);
			if (orderTotalDiscountAmount > 0) {
				createQuoteInput.put("orderDiscountType", "$");
				createQuoteInput.put("discountAmount", orderTotalDiscountAmount);
				createQuoteInput.put("discountPercent", discountValue);
			} else {
				createQuoteInput.put("orderDiscountType", discountType);
				createQuoteInput.put("discountAmount", discountAmount);
				createQuoteInput.put("discountPercent", discountValue);

			}

			if (CommonUtility.validateString(userDetail.getEmailAddress()).length() > 0) {
				createQuoteInput.put("userEmailAddress", userDetail.getEmailAddress());
			}
			if (CommonUtility.validateString(userOfficePhone).length() > 0) {
				createQuoteInput.put("userOfficePhone", userOfficePhone);
			}
			if (customFieldVal != null) {
				createQuoteInput.put("customFieldVal", customFieldVal);
			}
			if (freightValue != null) {
				createQuoteInput.put("freight", freightValue.getFreightValue());
				createQuoteInput.put("totalCartFrieghtCharges", freightValue.getFreightValue());
			}
			createQuoteInput.put("creditCardValue", CCard);
			createQuoteInput.put("erpOrderType", salesOrderInput.getErpOrderType());
			salesOrderInput.setSalesOrderInput(createQuoteInput);
			// -------- Sx

			SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();
			erpOrderDetail = salesOrderSubmit.submitOrderToERP(salesOrderInput);
			session.removeAttribute("selectedShipCodeOption");

			if (erpOrderDetail != null) {
				if (erpOrderDetail.getFreight() == 0) {
					erpOrderDetail.setFreight(CommonUtility.validateDoubleNumber(orderFreight));
				}
				if (erpOrderDetail.getTax() == 0) {
					erpOrderDetail.setTax(CommonUtility.validateDoubleNumber(orderTax));
				} // p21
				if (erpOrderDetail.getShipViaID() != null && erpOrderDetail.getShipViaID().trim().length() > 0) {

				} else {
					erpOrderDetail.setShipViaID(shipVia);
				}
				if (erpOrderDetail.getOrderedBy() != null && erpOrderDetail.getOrderedBy().trim().length() > 0) {

				} else {
					erpOrderDetail.setOrderedBy(orderedBy);
				}
				if (erpOrderDetail.getReqDate() != null && erpOrderDetail.getReqDate().trim().length() > 0) {

				} else {
					erpOrderDetail.setReqDate(reqDate);
				}
				if (erpOrderDetail.getSubtotal() <= 0.0) {
					String roundSubTotalStr = CommonUtility.validateParseDoubleToString(orderSubTotal);
					erpOrderDetail.setSubtotal(CommonUtility.validateDoubleNumber(roundSubTotalStr));
				}
				if (erpOrderDetail.getTotal() <= 0.0) {
					if (CommonUtility.customServiceUtility() != null) {
						orderGrandTotal = CommonUtility.customServiceUtility().assigningTotal(orderGrandTotal,
								orderSubTotal, orderTax, orderFreight);
					}
					String roundTotalStr = CommonUtility.validateParseDoubleToString(orderGrandTotal);
					erpOrderDetail.setTotal(CommonUtility.roundHalfUp(roundTotalStr));
					System.out.println("OrderTotal---:update to db" + orderGrandTotal);
				}
				updateSalesOrder(conn, orderId, erpOrderDetail);
			} else {
				updateSalesOrder(conn, orderId, defaultOrderDetail);
			}
			salesOrderId = orderId;
			stmt = conn.prepareCall("{call ORDER_KEYWORD_PROC(?)}");
			stmt.setInt(1, orderId);
			stmt.execute();
			if (!CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_DELETE_CART_ON_ORDER_FAIL"))
					.equalsIgnoreCase("Y")
					|| CommonUtility.validateString(erpOrderDetail.getErpOrderNumber()).length() > 0) {
				ProductsDAO.clearCartBySessionId(1, session.getId());
			}
			SalesModel otherDetail = new SalesModel();
			otherDetail.setSession(session);
			int count = -1;
			count = SalesDAO.sendConfirmationMail(orderId, userDetail.getUserId(), 0, null, otherDetail);
			if (count == 1) {
				String sql = "update orders set email_sent = 'Y' where order_id = ?";
				pstmt = conn.prepareStatement(sql);
				pstmt.setInt(1, orderId);
				rs = pstmt.executeQuery();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBStatement(stmt);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBConnection(conn);
		}
		return SUCCESS;
	}

	public String saveDefaultPCard() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String pCardId = request.getParameter("pCardId");

			UsersModel userDetail = new UsersModel();
			userDetail.setPcardId(CommonUtility.validateNumber(pCardId));
			userDetail.setUserId(CommonUtility.validateNumber((String) session.getAttribute(Global.USERID_KEY)));
			int count = SalesDAO.updateDefaultCreditCardInfo(userDetail);
			if (count > 0) {
				renderContent = "0|Success";
			} else {
				renderContent = "1|Something Went Wrong";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String expressCheckout() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			UsersModel userDetail = new UsersModel();
			userDetail.setPcardId(CommonUtility.validateNumber(pCardId));
			userDetail.setUserId(CommonUtility.validateNumber((String) session.getAttribute(Global.USERID_KEY)));
			userDetail.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			if (userDetail.getUserId() > 1) {
				int pCardID = SalesDAO.getDefaultCcId(userDetail);
				if (pCardID > 0) {
					userDetail.setPcardId(pCardID);
					userDetail = SalesDAO.getDefaultCreditCardDetails(userDetail);
					contentObject.put("userDetail", userDetail);
					cartListData = new ArrayList<ProductsModel>();
					cartListData = SalesDAO.getOrderDetails(savedGroupId, userDetail.getUserId(), subsetId,
							generalSubset, session, "expressCheckout");
					if (cartListData != null && cartListData.size() > 0) {
						String tempdefaultShipId = (String) session.getAttribute("defaultShipToId");
						if (tempdefaultShipId != null) {
							defaultShipToId = CommonUtility.validateNumber(tempdefaultShipId);
						}
						if (defaultBillToId == 0) {
							HashMap<String, Integer> userAddressId = UsersDAO
									.getDefaultAddressIdForBCAddressBook(userDetail.getUserName());
							defaultBillToId = userAddressId.get("Bill");
						}
						UserManagement usersObj = new UserManagementImpl();
						HashMap<String, UsersModel> userAddressDB = usersObj
								.getUserAddressFromBCAddressBook(defaultBillToId, defaultShipToId);
						contentObject.put("billEntityId",
								CommonUtility.validateString(userAddressDB.get("Bill").getEntityId()));
						contentObject.put("shipEntityId",
								CommonUtility.validateString(userAddressDB.get("Ship").getEntityId()));
						contentObject.put("defaultShipToId", defaultShipToId);
						contentObject.put("defaultBillToId", defaultBillToId);
						contentObject.put("billAddress", userAddressDB.get("Bill"));
						contentObject.put("shipAddress", userAddressDB.get("Ship"));
						contentObject.put("statusDesc", "ProceedCheckout");
						contentObject.put("cartListData", cartListData);
					} else {
						contentObject.put("statusDesc", "NoCartItems");
					}
				} else {
					cardDetails = SalesDAO.getCreditCardDetails(userDetail.getUserId());
					if (cardDetails != null && cardDetails.size() > 0) {
						contentObject.put("statusDesc", "SelectDefaultCard");
						contentObject.put("cardDetails", cardDetails);
					} else {
						contentObject.put("statusDesc", "noCCard");
					}
				}
			} else {
				contentObject.put("statusDesc", "noUser");
			}

			renderContent = LayoutGenerator.templateLoader("ExpressCheckoutPage", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String OrderInvoiceStatus() {
		try {
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String actionName = null;
			String bill_to_number = (String) session.getAttribute("contactId");
			if (requestType.equalsIgnoreCase("orderstatus")) {
				actionName = "OrderStatus";
				contentObject.put("actionname", "Order Status");
			} else {
				actionName = "InvoiceStatus";
				contentObject.put("actionname", "Invoice Status");
			}
			System.out.println("Bill-to-number== " + bill_to_number);
			Date d = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
			String date = sdf.format(d);
			JsonObject js = new JsonObject();
			js.addProperty("c", bill_to_number);
			js.addProperty("t", date);
			System.out.println("Json object == " + js);
			GenerateSignature util = new GenerateSignature();
			String ecodedToken = util.signJSONObject(js);
			String orderinvoiceStatus = CommonDBQuery.getSystemParamtersList().get("ORDERINVOICESTATUS");
			String url = orderinvoiceStatus + "?token=" + ecodedToken + "&type=" + actionName;
			System.out.println("Final URL == " + url);
			contentObject.put("token", url);
			renderContent = LayoutGenerator.templateLoader("OrderInvoiceStatusPage", contentObject, null, null, null);
			target = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String punchoutOrderMessage() {
		try {
			request = ServletActionContext.getRequest();
			String outputDoc = (String) request.getAttribute("outputDoc");
			String punchoutUrl = (String) request.getAttribute("punchoutUrl");
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			contentObject.put("punchoutUrl", punchoutUrl);
			contentObject.put("punchoutOutputDoc", outputDoc);
			renderContent = LayoutGenerator.templateLoader("PunchoutSubmit", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String savePunchoutOrder() {
		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		CallableStatement stmt = null;
		this.request = ServletActionContext.getRequest();
		HttpSession session = this.request.getSession();
		String tempBuyingCompany = (String) session.getAttribute("buyingCompanyId");
		int buyingCompanyId = CommonUtility.validateNumber(tempBuyingCompany);
		this.resultData = new ArrayList();
		try {
			String sessionUserId = (String) session.getAttribute("com.common.IdUser");
			boolean flag = false;
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = Integer.parseInt(tempSubset);
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			int generalSubset = Integer.parseInt(tempGeneralSubset);
			int orderId = 0;
			int cartCount = 0;
			int userId = Integer.parseInt(sessionUserId);
			int activeTaxonomyId = CommonUtility
					.validateNumber(CommonDBQuery.getSystemParamtersList().get("TAXONOMY_ID"));

			String addrs1 = this.type;
			String addrs2 = this.type;
			String city = this.type;
			String state = this.type;
			String zipCode = this.type;
			String country = "US";
			String phone = this.type;
			String addType = "Ship";
			int siteId = 0;
			if (CommonDBQuery.getGlobalSiteId() > 0) {
				siteId = CommonDBQuery.getGlobalSiteId();
			}
			conn = ConnectionManager.getDBConnection();

			String sql = "";
			int checkOciUser = 0;
			if (this.savedGroupId == 0) {
				if (session.getAttribute("isOciUser") != null) {
					checkOciUser = ((Integer) session.getAttribute("isOciUser")).intValue();
				}

				if (checkOciUser == 1 || (checkOciUser == 2
						&& CommonUtility.validateString((String) session.getAttribute("SESSION_AUTH_REQUIRED"))
								.equalsIgnoreCase("Y"))) {
					sql = PropertyAction.SqlContainer.get("getCartItemDetailQueryBySession");
					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1, siteId);
					pstmt.setInt(2, userId);
					pstmt.setString(3, session.getId());
					pstmt.setInt(4, subsetId);
					pstmt.setInt(5, siteId);
					pstmt.setInt(6, userId);
					pstmt.setString(7, session.getId());
					pstmt.setInt(8, generalSubset);
					pstmt.setInt(9, siteId);
					pstmt.setInt(10, userId);
					pstmt.setString(11, session.getId());
					pstmt.setInt(12, subsetId);
					rs = pstmt.executeQuery();
				} else {
					sql = PropertyAction.SqlContainer.get("getCartItemDetailQuery");
					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1, siteId);
					pstmt.setInt(2, userId);
					pstmt.setInt(3, subsetId);
					pstmt.setInt(4, siteId);
					pstmt.setInt(5, userId);
					pstmt.setInt(6, generalSubset);
					pstmt.setInt(7, siteId);
					pstmt.setInt(8, userId);
					pstmt.setInt(9, subsetId);
					rs = pstmt.executeQuery();
				}
			} else {
				sql = PropertyAction.SqlContainer.get("selectGroupItem");
				pstmt = conn.prepareStatement(sql);
				pstmt.setInt(1, this.savedGroupId);
				pstmt.setInt(2, userId);
				pstmt.setInt(3, buyingCompanyId);
				pstmt.setInt(4, subsetId);
				pstmt.setInt(5, activeTaxonomyId);
				pstmt.setInt(6, this.savedGroupId);
				pstmt.setInt(7, userId);
				pstmt.setInt(8, buyingCompanyId);
				pstmt.setInt(9, generalSubset);
				pstmt.setInt(10, activeTaxonomyId);
				pstmt.setInt(11, this.savedGroupId);
				pstmt.setInt(12, subsetId);

				rs = pstmt.executeQuery();
			}

			UsersModel userDefaultAddress = new UsersModel();
			userDefaultAddress.setAddress1(addrs1);
			userDefaultAddress.setAddress2(addrs2);
			userDefaultAddress.setCity(city);
			userDefaultAddress.setState(state);
			userDefaultAddress.setZipCodeStringFormat(zipCode);
			userDefaultAddress.setCountry(country);
			userDefaultAddress.setPhoneNo(phone);
			userDefaultAddress.setSession(session);

			String homeBranchId = (String) session.getAttribute("homeBranchId");
			String homeBranchName = (String) session.getAttribute("homeBranchName");
			String shipBranchId = (String) session.getAttribute("shipBranchId");
			String shipBranchName = (String) session.getAttribute("shipBranchName");

			LinkedHashMap<String, Object> orderDetails = new LinkedHashMap<String, Object>();
			orderDetails.put("homeBranchId", homeBranchId);
			orderDetails.put("homeBranchName", homeBranchName);
			orderDetails.put("shipBranchId", shipBranchId);
			orderDetails.put("shipBranchName", shipBranchName);

			while (rs.next()) {
				cartCount++;
				if (cartCount == 1) {
					String ipaddress = this.request.getHeader("X-Forwarded-For");

					if (ipaddress == null)
						ipaddress = this.request.getRemoteAddr();

					orderId = saveOrder(conn, userId, orderId, userDefaultAddress, userDefaultAddress, type, taxExempt,
							"", "", ccNumber, ccExp, cardHolder, poNumber, ipaddress, creditCardValue,
							customerReleaseNumber, orderDetails);
					this.salesOrderId = orderId;
				}
				int count = saveOrderItems(conn, orderId, rs.getInt("ITEM_ID"), rs.getInt("QTY"),
						rs.getString("PART_NUMBER"), "", rs.getString("SHORT_DESC"), rs.getDouble("NET_PRICE"),
						rs.getString("INVOICE_DESC"), rs.getString("SALES_UOM"), rs.getString("PACK_DESC"),
						rs.getString("LINE_ITEM_COMMENT"), rs.getString("ITEM_LEVEL_SHIPVIA"),
						rs.getString("ITEM_LEVEL_SHIPVIA_DESC"), rs.getString("ITEMLEVEL_REQUIREDBYDATE"),
						rs.getString("CATALOG_ID"));
				flag = true;
			}
			SalesModel eclipseOrderDetail = new SalesModel();
			if (flag) {
				updateSalesOrder(conn, orderId, eclipseOrderDetail);
				stmt = conn.prepareCall("{call ORDER_KEYWORD_PROC(?)}");
				stmt.setInt(1, orderId);
				stmt.execute();
			}
			if (checkOciUser == 1 || (checkOciUser == 2 && CommonUtility
					.validateString((String) session.getAttribute("SESSION_AUTH_REQUIRED")).equalsIgnoreCase("Y")))
				deleteFromCartBySession(conn, userId, session.getId());
			else
				deleteFromCart(conn, userId);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBStatement(stmt);
			ConnectionManager.closeDBConnection(conn);
		}
		renderContent = "Submitted Successfully";
		return "none";
	}

	public String deletePunchoutOrder() {
		Connection conn = null;
		this.request = ServletActionContext.getRequest();
		HttpSession session = this.request.getSession();

		String sessionUserId = (String) session.getAttribute("com.common.IdUser");
		int userId = Integer.parseInt(sessionUserId);
		try {
			conn = ConnectionManager.getDBConnection();

			deleteFromCart(conn, userId);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBConnection(conn);
		}
		renderContent = "Punchout Canceled";
		return "none";
	}

	public static void deleteFromCartBySession(Connection conn, int userId, String sessionId) {
		System.out.println("Deleting Sap Cart Session : " + sessionId);
		PreparedStatement pstmt = null;
		try {

			int count;
			String sql = PropertyAction.SqlContainer.get("deleteFromCartBySession");
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, userId);
			pstmt.setString(2, sessionId);
			count = pstmt.executeUpdate();
		} catch (SQLException e) {

			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBPreparedStatement(pstmt);
		}
	}

	public String BrontoSendOrderToContact() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionId = session.getId();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			String orderIdTemp = (String) request.getParameter("orderId");
			String reqType = (String) request.getParameter("reqType");
			int orderId = CommonUtility.validateNumber(orderIdTemp);
			result = "";
			UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
			String auUser = (String) session.getAttribute("auUserLogin");

			int userId = 1;
			if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
				userId = userDetail.getUserId();
			} else {
				userId = CommonUtility.validateNumber(sessionUserId);
			}
			if (userId > 2) {
				// Subset id is null as it is not required for this module
				String secretKey = BrontoDAO.getAbandonedCartKey(userId, sessionId);
				BrontoDAO.updateAbandonedCartStatus(userId, secretKey, "Y", "cartProcessed", sessionId);
				String apiToken = CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("BRONTO_API_TOKEN"));
				BrontoApi client = BrontoUtility.getInstance().brontoLogin(apiToken);
				result = BrontoUtility.getInstance().sendOrderDetailsToContact(client, userId, orderId);

			} else {
				target = "SESSIONEXPIRED";
			}
			if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
				session.removeAttribute("auUserDetails");
				session.removeAttribute("auUserLogin");
				session.removeAttribute("fromPage");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		renderContent = result;
		return SUCCESS;
	}

	public static int saveOrderItems(Connection conn, int orderId, ProductsModel saveItems, String discountCouponCode,
			double discountAmount, float discountInPercent, String discountCouponType) {
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		int count = 0;
		try {
			if (CommonUtility.validateString(saveItems.getShortDesc()).length() == 0) {
				saveItems.setShortDesc(" ");
			}
			if (CommonUtility.validateString(saveItems.getInvoiceDesc()).length() == 0) {
				saveItems.setInvoiceDesc(" ");
			}
			if (CommonUtility.validateString(saveItems.getPackDesc()).length() == 0) {
				saveItems.setPackDesc(" ");
			}
			if (CommonUtility.customServiceUtility() != null) {
				CommonUtility.customServiceUtility().getPackDesc(saveItems);
			}

			int orderItemId = CommonDBQuery.getSequenceId("ORDER_ITEM_ID");
			String sql = PropertyAction.SqlContainer.get("saveOrderItemsWithDiscount");
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, orderItemId);
			pstmt.setInt(2, orderId);
			pstmt.setInt(3, saveItems.getItemId());
			pstmt.setString(4, saveItems.getPartNumber());
			pstmt.setString(5, saveItems.getCustomerPartNumber());
			pstmt.setString(6, saveItems.getShortDesc());
			pstmt.setInt(7, saveItems.getQty());
			pstmt.setDouble(8, saveItems.getPrice() / saveItems.getQty());
			pstmt.setString(9, "");
			pstmt.setString(10, saveItems.getInvoiceDesc());
			pstmt.setString(11, saveItems.getUom());
			pstmt.setString(12, saveItems.getPackDesc());
			pstmt.setString(13, "N");
			pstmt.setString(14, saveItems.getLineItemComment());
			pstmt.setString(15, saveItems.getShipViaCode());
			pstmt.setString(16, saveItems.getShipViaDesc());
			pstmt.setString(17, saveItems.getItemLevelRequiredByDate());
			pstmt.setString(18, saveItems.getCatalogId());
			pstmt.setDouble(19, discountAmount);
			pstmt.setFloat(20, discountInPercent);
			pstmt.setString(21, discountCouponCode);
			pstmt.setString(22, discountCouponType);
			pstmt.setInt(23, saveItems.getCartId());
			// pstmt.setInt(24, saveItems.getLineNumber());
			pstmt.setString(24, saveItems.getManufacturerName());
			count = pstmt.executeUpdate();
			if (count > 0) {
				count = orderItemId;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
		}
		return count;
	}

	public String TrackOrder() {
		try {
			String sectionName = "OrderDetailPage";
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String orderId = request.getParameter("orderNumber");
			String userName = request.getParameter("userName");
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			if (CommonUtility.validateString(userName).length() > 0
					&& CommonUtility.validateString(orderId).length() > 0) {
				HashMap<String, String> userDetails = UsersDAO.getUserPasswordAndUserId(userName, "Y");
				if (userDetails != null && CommonUtility.validateString(userDetails.get("userId")).length() > 0) {
					SalesModel salesInputParameter = new SalesModel();
					salesInputParameter
							.setCustomerCountry(CommonUtility.validateString(userDetails.get("customerCountry")));
					salesInputParameter.setUserName(CommonUtility.validateString(userDetails.get("userName")));
					if (CommonUtility.validateString(orderId).contains("-")) {
						String[] orderSplit = orderId.split("-");
						salesInputParameter.setOrderId(CommonUtility.validateNumber(orderSplit[0]));
						salesInputParameter.setOrderID(CommonUtility.validateString(orderSplit[0]));
						salesInputParameter.setOrderSuffix(CommonUtility.validateNumber(orderSplit[1]));
					} else {
						salesInputParameter.setOrderId(CommonUtility.validateNumber(orderId));
						salesInputParameter.setOrderID(CommonUtility.validateString(orderId));

					}

					SalesOrderManagement salesObj = new SalesOrderManagementImpl();
					LinkedHashMap<String, ArrayList<SalesModel>> orderInfo = new LinkedHashMap<String, ArrayList<SalesModel>>();

					if (CommonUtility.customServiceUtility() != null) {
						orderInfo = CommonUtility.customServiceUtility().getTrackOrderInfo(salesInputParameter,
								userDetails, session, orderId, contentObject);
					}
					if (orderInfo != null && orderInfo.get("OrderDetail") != null) {
						sectionName = "OrderTrackingInfoPage";
					} else {
						orderInfo = salesObj.OrderDetail(salesInputParameter);
					}

					if (orderInfo != null && orderInfo.get("OrderInfo") != null
							&& !CommonUtility.validateString(orderInfo.get("OrderInfo").get(0).getCustomerNumber())
									.equalsIgnoreCase(CommonUtility.validateString(userDetails.get("contactId")))) {
						contentObject.put("errorOnOrder", "Y");
						contentObject.put("errorMsg",
								LayoutLoader.getMessageProperties()
										.get(session.getAttribute("localeCode").toString().toUpperCase())
										.getProperty("trackOrder.error.emailIdAndorderIdDidNotMatch"));
					} else {
						if (orderInfo != null && orderInfo.get("OrderDetail") != null) {
							SalesModel orderInformation = null;
							SalesModel orderToatalDetails = null;
							ArrayList<SalesModel> trackOrderDetails = new ArrayList<SalesModel>();
							trackOrderDetails = orderInfo.get("OrderDetail");
							orderDetail = (orderInfo.get("OrderDetail").get(0) != null)
									? orderInfo.get("OrderDetail").get(0)
									: null;
							orderItemList = orderInfo.get("OrderItemList");
							String erp = "defaults";
							if (session.getAttribute("erpType") != null
									&& session.getAttribute("erpType").toString().trim().length() > 0) {
								erp = session.getAttribute("erpType").toString().trim();
							}
							if (!CommonUtility.validateString(erp).equalsIgnoreCase("eclipse")
									&& !CommonUtility.validateString(erp).equalsIgnoreCase("defaults")
									&& (orderInfo.get("OrderInfo") != null
											&& orderInfo.get("orderToatalDetails") != null)) {
								orderInformation = (orderInfo.get("OrderInfo").get(0) != null)
										? orderInfo.get("OrderInfo").get(0)
										: null;
								orderToatalDetails = (orderInfo.get("orderToatalDetails").get(0) != null)
										? orderInfo.get("orderToatalDetails").get(0)
										: null;
							}
							contentObject.put("orderId", orderId);
							contentObject.put("orderItemList", orderItemList);
							contentObject.put("orderDetail", orderDetail);
							contentObject.put("orderToatalDetails", orderToatalDetails);
							contentObject.put("orderInformation", orderInformation);
							contentObject.put("trackOrderDetails", trackOrderDetails);
							contentObject.put("trackOrder", "Y");
						} else {
							contentObject.put("errorOnOrder", "Y");
							contentObject.put("errorMsg",
									LayoutLoader.getMessageProperties()
											.get(session.getAttribute("localeCode").toString().toUpperCase())
											.getProperty("trackOrder.error.orderIdNotFound"));
						}
					}
				} else {
					contentObject.put("errorOnOrder", "Y");
					contentObject.put("errorMsg",
							LayoutLoader.getMessageProperties()
									.get(session.getAttribute("localeCode").toString().toUpperCase())
									.getProperty("trackOrder.error.invalidEmailId"));
				}
			} else {
				contentObject.put("errorOnOrder", "Y");
				contentObject.put("errorMsg",
						LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("trackOrder.error.enterEmailIdAndOrderId"));
			}
			renderContent = LayoutGenerator.templateLoader(sectionName, contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public static int saveRequestQuote(HttpSession session, HttpServletRequest request, String isReOrder,
			int savedGroupId, String type, String poNumber, UsersModel billAddress, UsersModel shipAddress,
			SalesModel quoteResponse) {

		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;

		String sessionId = session.getId();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		String tempSubset = (String) session.getAttribute("userSubsetId");
		String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
		String tempBuyingCompany = (String) session.getAttribute("buyingCompanyId");
		String wareHousecode = (String) session.getAttribute("wareHouseCode");
		String userToken = (String) session.getAttribute("userToken");

		int buyingCompanyId = CommonUtility.validateNumber(tempBuyingCompany);
		int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
		int userId = CommonUtility.validateNumber(sessionUserId);
		int subsetId = CommonUtility.validateNumber(tempSubset);
		int activeTaxonomyId = CommonUtility.validateNumber(CommonDBQuery.getSystemParamtersList().get("TAXONOMY_ID"));
		int orderId = 0;
		int cartCount = 0;
		try {

			try {
				conn = ConnectionManager.getDBConnection();
			} catch (SQLException e) {
				e.printStackTrace();
			}

			int siteId = 0;
			if (CommonDBQuery.getGlobalSiteId() > 0) {
				siteId = CommonDBQuery.getGlobalSiteId();
			}

			if (ProductsDAO
					.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
				generalSubset = ProductsDAO
						.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
			}

			String sql = "";
			if (isReOrder != null && isReOrder.trim().equalsIgnoreCase("Y")) {
				sql = PropertyAction.SqlContainer.get("getQuoteCartItemDetailQuery");
				pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, sessionId);
				pstmt.setInt(2, subsetId);
				pstmt.setInt(3, activeTaxonomyId);
				pstmt.setString(4, sessionId);
				pstmt.setInt(5, generalSubset);
				pstmt.setInt(6, activeTaxonomyId);
				pstmt.setString(7, sessionId);
				pstmt.setInt(8, subsetId);
				rs = pstmt.executeQuery();
			} else {
				if (savedGroupId == 0) {
					sql = PropertyAction.SqlContainer.get("getCartItemDetailQuery");
					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1, siteId);
					pstmt.setInt(2, userId);
					pstmt.setInt(3, subsetId);
					pstmt.setInt(4, siteId);
					pstmt.setInt(5, userId);
					pstmt.setInt(6, generalSubset);
					pstmt.setInt(7, siteId);
					pstmt.setInt(8, userId);
					pstmt.setInt(9, subsetId);
					rs = pstmt.executeQuery();
				} else {
					sql = PropertyAction.SqlContainer.get("selectGroupItem");
					pstmt = conn.prepareStatement(sql);

					pstmt.setInt(1, savedGroupId);
					pstmt.setInt(2, userId);
					pstmt.setInt(3, buyingCompanyId);
					pstmt.setInt(4, subsetId);
					pstmt.setInt(5, activeTaxonomyId);
					pstmt.setInt(6, savedGroupId);
					pstmt.setInt(7, userId);
					pstmt.setInt(8, buyingCompanyId);
					pstmt.setInt(9, generalSubset);
					pstmt.setInt(10, activeTaxonomyId);
					pstmt.setInt(11, savedGroupId);
					pstmt.setInt(12, subsetId);

					rs = pstmt.executeQuery();
				}
			}
			ArrayList<ProductsModel> itemDetailObject = new ArrayList<ProductsModel>();
			ArrayList<String> partIdentifier = new ArrayList<String>();
			ArrayList<Integer> partIdentifierQuantity = new ArrayList<Integer>();
			String c = "";
			String idList = "";
			while (rs.next()) {
				cartCount++;
				if (cartCount == 1) {
					String ipaddress = request.getHeader("X-Forwarded-For");
					if (ipaddress == null)
						ipaddress = request.getRemoteAddr();// userDefaultAddress

					String homeBranchId = (String) session.getAttribute("homeBranchId");
					String homeBranchName = (String) session.getAttribute("homeBranchName");
					String shipBranchId = (String) session.getAttribute("shipBranchId");
					String shipBranchName = (String) session.getAttribute("shipBranchName");
					LinkedHashMap<String, Object> orderDetails = new LinkedHashMap<String, Object>();
					orderDetails.put("homeBranchId", homeBranchId);
					orderDetails.put("homeBranchName", homeBranchName);
					orderDetails.put("shipBranchId", shipBranchId);
					orderDetails.put("shipBranchName", shipBranchName);
					orderDetails.put("wareHousecode", wareHousecode);
					billAddress.setSession(session);

					orderId = saveOrder(conn, userId, orderId, billAddress, shipAddress, "webOrder", "", "",
							"Request Quote", "", "", "", poNumber, ipaddress, null, "", orderDetails);
					UsersDAO.updateUserLog(
							CommonUtility.validateNumber((String) session.getAttribute(Global.USERID_KEY)),
							"Quote Order Submitted", session.getId(), ipaddress, "Click", Integer.toString(orderId));

				}
				ProductsModel saveItems = new ProductsModel();
				saveItems.setCartId(rs.getInt("CART_ID"));
				saveItems.setPartNumber(rs.getString("PART_NUMBER"));
				saveItems.setItemId(rs.getInt("ITEM_ID"));
				saveItems.setInvoiceDesc(rs.getString("INVOICE_DESC"));
				saveItems.setSalesUom(rs.getString("SALES_UOM"));
				saveItems.setPackDesc(rs.getString("PACK_DESC"));
				saveItems.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
				saveItems.setItemLevelRequiredByDate(rs.getString("ITEMLEVEL_REQUIREDBYDATE"));
				saveItems.setCatalogId(rs.getString("CATALOG_ID"));
				saveItems.setShipViaCode(rs.getString("ITEM_LEVEL_SHIPVIA"));
				saveItems.setQty(rs.getInt("QTY"));
				saveItems.setShipViaDesc(rs.getString("ITEM_LEVEL_SHIPVIA_DESC"));
				saveItems.setCustomerPartNumber("");
				if (rs.findColumn("UOM") > 0) {
					saveItems.setUom(rs.getString("UOM"));
				}
				saveItems.setShortDesc(rs.getString("SHORT_DESC"));
				saveItems.setUnitPrice(rs.getDouble("PRICE"));
				saveItems.setExtendedPrice(rs.getDouble("PRICE") * rs.getInt("QTY"));
				saveItems.setPrice(rs.getDouble("PRICE") * rs.getInt("QTY"));

				int orderItemId = saveOrderItems(conn, orderId, saveItems, "", 0, 0, "");
				ProductsDAO.updatePopularity(rs.getInt("ITEM_ID"), 3);

				ProductsModel itmVal = new ProductsModel();
				itmVal.setItemId(rs.getInt("ITEM_ID"));
				itmVal.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
				itmVal.setPartNumber(rs.getString("PART_NUMBER"));
				itmVal.setAltPartNumber1(rs.getString("ALT_PART_NUMBER1"));
				itmVal.setUnitPrice(rs.getDouble("EXTPRICE") / rs.getInt("QTY"));
				itmVal.setQty(rs.getInt("QTY"));
				itmVal.setOrderItemId(orderItemId);

				idList = idList + c + rs.getInt("ITEM_ID");
				c = " OR ";
				partIdentifier.add(rs.getString("PART_NUMBER"));

				partIdentifierQuantity.add(rs.getInt("QTY"));
				if (rs.findColumn("UOM") > 0) {
					itmVal.setUom(rs.getString("UOM"));
				}

				itemDetailObject.add(itmVal);

			}

			if (itemDetailObject != null && itemDetailObject.size() > 0) {
				String entityId = (String) session.getAttribute("entityId");
				String homeTerritory = (String) session.getAttribute("shipBranchId");

				ProductManagement priceInquiry = new ProductManagementImpl();
				ProductManagementModel priceInquiryInput = new ProductManagementModel();
				priceInquiryInput.setEntityId(CommonUtility.validateString(entityId));
				priceInquiryInput.setHomeTerritory(homeTerritory);
				priceInquiryInput.setPartIdentifier(itemDetailObject);
				priceInquiryInput.setPartIdentifierQuantity(partIdentifierQuantity);
				priceInquiryInput.setRequiredAvailabilty("Y");
				priceInquiryInput.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
				priceInquiryInput.setUserToken((String) session.getAttribute("userToken"));
				priceInquiryInput.setSession(session);
				itemDetailObject = priceInquiry.priceInquiry(priceInquiryInput, itemDetailObject);
				/*
				 * if(CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get(
				 * "UMQTY_FROM_ERP")).equalsIgnoreCase("Y")) { for(ProductsModel item :
				 * itemDetailObject) {
				 * UOMQTY.put(item.getPartNumber(),CommonUtility.validateNumber(item.getQtyUOM()
				 * )); } }
				 */
				updateOrderItemPrice(conn, orderId, itemDetailObject);

			}

			for (ProductsModel item : itemDetailObject) {
				for (SalesModel erpOrderItem : quoteResponse.getOrderList()) {
					if (item.getPartNumber() != null && erpOrderItem.getProductcode() != null
							&& item.getPartNumber().trim().equalsIgnoreCase(erpOrderItem.getProductcode().trim())) {
						item.setUnitPrice(erpOrderItem.getPrice());
						item.setUom(erpOrderItem.getUom());
						item.setQty((int) erpOrderItem.getQuantityOrdered());
						item.setQtyUOM(erpOrderItem.getQtyUom());
						item.setErpQty(erpOrderItem.getPerQty());

					}
				}
			}

			if (quoteResponse != null) {
				updateSalesOrder(conn, orderId, quoteResponse);
				if (quoteResponse.getOrderList() != null && quoteResponse.getOrderList().size() > 0) {
					updateOrderItemPrice(conn, orderId, itemDetailObject);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBConnection(conn);
		}
		return orderId;
	}

	public String saveSalesOrderAjax() {
		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		CallableStatement stmt = null;
		Double approAmount = 0.0;
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String sessionId = session.getId();
		resultData = new ArrayList<ProductsModel>();
		try {
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			String tempBuyingCompany = (String) session.getAttribute("buyingCompanyId");
			int buyingCompanyId = CommonUtility.validateNumber(tempBuyingCompany);
			int activeTaxonomyId = CommonUtility
					.validateNumber(CommonDBQuery.getSystemParamtersList().get("TAXONOMY_ID"));
			if (CommonUtility.validateString((String) session.getAttribute("shipvia")).length() > 0) {
				shipVia = (String) session.getAttribute("shipvia");
			}
			AddressModel overrideShipAddress = (AddressModel) session.getAttribute("overrideShipAddress");
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			// String newsLetter = request.getParameter("newsLetterSubscription");
			// String newsLetterStatus = (String) session.getAttribute("newsLetter");
			int orderId = CommonUtility.validateNumber(ccOrderNumber);
			// For JDW All Users will be considered as CreditCardFlag = False (Ref: Brunda)
			session.setAttribute("creditCardFlag", "false");
			if (type != null && type.trim().equalsIgnoreCase("mobile") && mobileUserId != null) {
				sessionUserId = mobileUserId;
				session.removeAttribute("isReOrder");
				session.setAttribute("mobileUserName", mobileUserName);
				session.setAttribute("mobileUserId", mobileUserId);
				session.setAttribute(Global.USERID_KEY, mobileUserId);
				session.setAttribute(Global.USERNAME_KEY, mobileUserName);
			}
			if (type != null && type.trim().equalsIgnoreCase("mobile")) {
				if (session.getAttribute("mobileUserId") != null && session.getAttribute("mobileUserName") != null) {
					mobileUserId = (String) session.getAttribute("mobileUserId");
					session.setAttribute(Global.USERID_KEY, mobileUserId);
					mobileUserName = (String) session.getAttribute("mobileUserName");
					session.setAttribute(Global.USERNAME_KEY, mobileUserName);
					sessionUserId = mobileUserId;
				}
			}

			String overRideShipEmail = "";
			if (CommonUtility.validateString((String) session.getAttribute("overRideShipEmail")).trim().length() > 0) {
				overRideShipEmail = (String) session.getAttribute("overRideShipEmail");
				session.setAttribute("overRideShipEmail", overRideShipEmail);
			}

			String userToken = (String) session.getAttribute("userToken");
			String wareHousecode = (String) session.getAttribute("wareHouseCode");
			String customerCountry = (String) session.getAttribute("customerCountry");
			eclipseSessionId = userToken;
			String userName = (String) session.getAttribute(Global.USERNAME_KEY);
			String entityId = (String) session.getAttribute("entityId");
			String homeTerritory = (String) session.getAttribute("shipBranchId");
			ArrayList<String> partIdentifier = new ArrayList<String>();
			ArrayList<Integer> partIdentifierQuantity = new ArrayList<Integer>();
			String freeShipping = "no";
			String discountTypeCheck = "";
			String isApproveCart = (String) session.getAttribute("fromApproveCart");
			boolean nonCatalogItemFlag = false;
			boolean sendMailFlag = false;
			// Discount related values
			String discountCouponCode = null;
			double discountAmount = 0.0D;
			double orderTotalDiscountAmount = 0.0D;
			float discountInPercent = 0.00F;
			String discountCouponType = null;
			conn = ConnectionManager.getDBConnection();
			int siteId = 0;
			if (CommonDBQuery.getGlobalSiteId() > 0) {
				siteId = CommonDBQuery.getGlobalSiteId();
			}

			String cartSortByValue = "";
			String cartSortColumn = "";
			if (session.getAttribute("cartSortByValue") != null) {
				cartSortByValue = CommonUtility.validateString(session.getAttribute("cartSortByValue").toString());
				String[] sortCoumnArray = cartSortByValue.split(" ");
				if (sortCoumnArray != null && sortCoumnArray.length > 0) {
					cartSortColumn = CommonUtility.validateString(sortCoumnArray[0]);
				}
			}
			session.removeAttribute("poNumber");
			session.removeAttribute("shippingInstruction");
			session.removeAttribute("orderNotes");
			session.removeAttribute("reqDate");
			session.removeAttribute("sortBy");
			if (userId > 1) {
				String sql = "";

				// Commented because it was over riding the Gereral Catalog ID
				// generalSubset =
				// ProductsDAO.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
				if (ProductsDAO.getSubsetIdFromName(
						CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
					generalSubset = ProductsDAO
							.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
				}

				HashMap<String, Integer> userAddressId = new HashMap<String, Integer>();
				if (type != null && type.trim().equalsIgnoreCase("mobile") && mobileUserId != null) {
					userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(mobileUserName);
				} else {
					userAddressId = UsersDAO
							.getDefaultAddressIdForBCAddressBook((String) session.getAttribute(Global.USERNAME_KEY));
				}

				defaultBillToId = userAddressId.get("Bill");
				session.setAttribute("defaultBillToId", "" + defaultBillToId);
				HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
						defaultShipToId);

				String shipBranch = (String) session.getAttribute("shipBranchId");
				String homeBranch = (String) session.getAttribute("homeBranchId");
				if (shipVia != null
						&& (shipVia.trim().toUpperCase().contains("WILL CALL")
								|| shipVia.trim().toUpperCase().contains("CUSTOMER PICK UP"))
						&& shipBranch != null && shipBranch.trim().length() > 0) {
					selectedBranch = shipBranch;
				} else if (homeBranch != null && homeBranch.trim().length() > 0) {
					selectedBranch = homeBranch;
				} else {
					selectedBranch = "";
				}

				UsersModel userBillAddress = userAddress.get("Bill");
				userBillAddress.setShippingInstruction(shippingInstruction);
				userBillAddress.setOrderedBy(orderedBy);
				userBillAddress.setOrderNotes(orderNotes);
				userBillAddress.setReqDate(reqDate);

				UsersModel userShipAddress = userAddress.get("Ship");
				if (userShipAddress != null && CommonUtility.validateString(overRideShipEmail).trim().length() > 0) {
					userShipAddress.setEmailAddress(overRideShipEmail);
				}
				userShipAddress.setShippingInstruction(shippingInstruction);
				userShipAddress.setOrderedBy(orderedBy);
				userShipAddress.setOrderNotes(orderNotes);
				userShipAddress.setReqDate(reqDate);
				userShipAddress.setFirstName((String) session.getAttribute("userFirstName"));
				userShipAddress.setLastName((String) session.getAttribute("userLastName"));

				// if user edit the ship address in checkout page,carrying edited details from
				// session
				if (overrideShipAddress != null) {
					userBillAddress.setCustomerName(CommonUtility.validateString(overrideShipAddress.getCompanyName()));// override
																														// company
																														// name
																														// ill
																														// be
																														// stored
																														// in
																														// orders
																														// and
																														// also
																														// send
																														// in
																														// mail.
					userShipAddress.setCompanyName(CommonUtility.validateString(overrideShipAddress.getCompanyName()));
					userShipAddress.setAddress1(CommonUtility.validateString(overrideShipAddress.getAddress1()));
					userShipAddress.setAddress2(CommonUtility.validateString(overrideShipAddress.getAddress2()));
					userShipAddress.setCity(CommonUtility.validateString(overrideShipAddress.getCity()));
					userShipAddress.setState(CommonUtility.validateString(overrideShipAddress.getState()));
					userShipAddress.setCountry(CommonUtility.validateString(overrideShipAddress.getCountry()));
					userShipAddress.setZipCode(CommonUtility.validateString(overrideShipAddress.getZipCode()));
					userShipAddress
							.setZipCodeStringFormat(CommonUtility.validateString(overrideShipAddress.getZipCode()));
					userShipAddress.setPhoneNo(CommonUtility.validateString(overrideShipAddress.getPhoneNo()));
					userShipAddress
							.setEmailAddress(CommonUtility.validateString(overrideShipAddress.getEmailAddress()));
				}

				billEntityId = userAddress.get("Bill").getEntityId();
				shipEntityId = userAddress.get("Ship").getEntityId();
				UsersModel userDefaultAddress = new UsersModel();
				userDefaultAddress.setAddress1(address1);
				userDefaultAddress.setAddress2(address2);
				userDefaultAddress.setCity(city);
				userDefaultAddress.setState(state);
				userDefaultAddress.setZipCodeStringFormat(zipCode);
				userDefaultAddress.setCountry(country);
				userDefaultAddress.setPhoneNo(phoneNumber);
				userDefaultAddress.setOrderNotes(orderNotes);
				userDefaultAddress.setShippingInstruction(shippingInstruction);
				userDefaultAddress.setOrderedBy(orderedBy);
				userDefaultAddress.setOrderStatus(orderStatus);
				userDefaultAddress.setCustomerReleaseNumber(customerReleaseNumber);
				userDefaultAddress.setReqDate(reqDate);

				ArrayList<ProductsModel> itemDetailObject = new ArrayList<ProductsModel>();
				LinkedHashMap<String, String> lineItemCommentList = new LinkedHashMap<String, String>();
				LinkedHashMap<String, Integer> UOMQTY = new LinkedHashMap<String, Integer>();
				ArrayList<ProductsModel> partIdentifiersList = new ArrayList<ProductsModel>();
				SalesModel defaultOrderDetail = new SalesModel();

				double orderSubTotal = 0.0;
				double orderGrandTotal = 0.0;
				String c = "";
				String idList = "";

				String ipaddress = request.getHeader("X-Forwarded-For");
				if (ipaddress == null)
					ipaddress = request.getRemoteAddr();// userDefaultAddress
				String paymentMethod = "Purchase Order";
				if (CommonUtility.validateString(payPalToken).length() > 0
						&& CommonUtility.validateString(payPalPayerId).length() > 0) {
					paymentMethod = "PayPal";
				} else {
					paymentMethod = "Credit Card";
				}
				creditCardValue = setCreditCardValues(session);
				String refKey = "";
				if (ccRefrenceCode != null && ccRefrenceCode.trim().length() > 0) {
					refKey = ccRefrenceCode;
				}
				String homeBranchId = (String) session.getAttribute("homeBranchId");
				String homeBranchName = (String) session.getAttribute("homeBranchName");
				String shipBranchId = (String) session.getAttribute("shipBranchId");
				String shipBranchName = (String) session.getAttribute("shipBranchName");
				LinkedHashMap<String, Object> orderDetails = new LinkedHashMap<String, Object>();
				orderDetails.put("homeBranchId", homeBranchId);
				orderDetails.put("homeBranchName", homeBranchName);
				orderDetails.put("shipBranchId", shipBranchId);
				orderDetails.put("shipBranchName", shipBranchName);
				orderDetails.put("wareHousecode", wareHousecode);
				orderDetails.put("gasPoNumber", gasPoNumber);

				userBillAddress.setSession(session);
				Discount orderShippingDiscount = getOrderShippingDiscount(session);
				if (orderShippingDiscount != null) {
					try {
						buyingCompanyId = Integer.parseInt(session.getAttribute("buyingCompanyId").toString());
						String website = (String) session.getAttribute("websiteName");
						if (orderId <= 0) {
							orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
						}
						orderDetails.put(SalesActionContantVariables.ORDER_ID, orderId);
						orderDetails.put(SalesActionContantVariables.USER_ID, userId);
						// save Order Level Discount
						SalesPromotionService salesPromo = SalesPromotionService.getInstance();
						if (orderShippingDiscount != null) {
							discountTypeCheck = orderShippingDiscount.getDiscountType().name();
							if (salesPromo.storeCouponUsed(orderShippingDiscount, String.valueOf(orderId), userId,
									buyingCompanyId, website)
									&& CommonUtility.validateString(discountTypeCheck).length() > 0
									&& discountTypeCheck.equals("FREE_SHIPPING")) {
								freeShipping = "yes";
								orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
										String.valueOf(orderShippingDiscount.getDiscountValue()));
								orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
										String.valueOf(orderShippingDiscount.getDiscountInPercent()));
								orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
										orderShippingDiscount.getDiscountCoupon().getCopounCode());
								orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
										orderShippingDiscount.getDiscountType().name());
								orderDetails.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
										SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
								orderDetails = SalesDAO.CouponDataCrud(orderDetails);
							}
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				// Order Discount
				List<Discount> orderDiscounts = getOrderDiscount(session);
				if (orderDiscounts != null && orderDiscounts.size() > 0) {

					for (Discount orderDiscount : orderDiscounts) {
						try {
							buyingCompanyId = Integer.parseInt(session.getAttribute("buyingCompanyId").toString());
							String website = (String) session.getAttribute("websiteName");
							if (orderId <= 0) {
								orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
							}
							orderDetails.put(SalesActionContantVariables.ORDER_ID, orderId);
							orderDetails.put(SalesActionContantVariables.USER_ID, userId);
							// save Order Level Discount
							SalesPromotionService salesPromo = SalesPromotionService.getInstance();
							if (salesPromo.storeCouponUsed(orderDiscount, String.valueOf(orderId), userId,
									buyingCompanyId, website)) {
								orderTotalDiscountAmount = orderDiscount.getDiscountValue();
								orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
										String.valueOf(orderDiscount.getDiscountValue()));
								orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
										String.valueOf(orderDiscount.getDiscountInPercent()));
								orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
										orderDiscount.getDiscountCoupon().getCopounCode());
								orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
										orderDiscount.getDiscountType().name());
								orderDetails.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
										SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
								orderDetails = SalesDAO.CouponDataCrud(orderDetails);
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}

				if ((CommonUtility.validateString(payPalToken).length() > 0
						&& CommonUtility.validateString(payPalPayerId).length() > 0)
						|| (CommonUtility.validateString(creditCardPayment).equalsIgnoreCase("Y")
								&& CommonUtility.validateString(ccTransactionId).length() > 0)) {
					// For JDW All Users will be considered as CreditCardFlag = True (Ref: Brunda)
					session.setAttribute("creditCardFlag", "true");

					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION"))
							.length() > 0) {
						userBillAddress.setShippingInstruction(
								CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
										+ shippingInstruction);
						userShipAddress.setShippingInstruction(
								CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
										+ shippingInstruction);
						userDefaultAddress.setShippingInstruction(
								CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
										+ shippingInstruction);
						shippingInstruction = CommonDBQuery.getSystemParamtersList()
								.get("CREDITCARD_SHIPPINGINSTRUCTION") + shippingInstruction;
					}

				}
				System.out.println("ccTransID : " + ccTransactionId);

				if (orderId <= 0) {
					String ccNumberTemp = ccNumber;
					if (CommonUtility.validateString(ccNumber).length() > 4) {
						ccNumberTemp = ccNumber.substring(ccNumber.length() - 4, ccNumber.length());
					}
					orderId = saveOrder(conn, userId, orderId, userBillAddress, userShipAddress, "webOrder", taxExempt,
							refKey, paymentMethod, ccNumberTemp, ccExp, cardHolder, poNumber, ipaddress,
							creditCardValue, customerReleaseNumber, orderDetails);
					UsersDAO.updateUserLog(
							CommonUtility.validateNumber((String) session.getAttribute(Global.USERID_KEY)),
							"Order Submitted", session.getId(), ipaddress, "Click", Integer.toString(orderId));
				}
				salesOrderId = orderId;

				if (CommonUtility.validateNumber(ccOrderNumber) > 0) {
					sql = PropertyAction.SqlContainer.get("getOrderItemsAjax");
					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1, orderId);
					pstmt.setInt(2, subsetId);
					rs = pstmt.executeQuery();
				} else if (isReOrder != null && isReOrder.trim().equalsIgnoreCase("Y")) {
					sql = PropertyAction.SqlContainer.get("getQuoteCartItemDetailQuery");
					if (CommonUtility.validateString(cartSortColumn).length() > 0
							&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
						sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
					}
					pstmt = conn.prepareStatement(sql);
					pstmt.setString(1, sessionId);
					pstmt.setInt(2, subsetId);
					pstmt.setInt(3, activeTaxonomyId);
					pstmt.setString(4, sessionId);
					pstmt.setInt(5, generalSubset);
					pstmt.setInt(6, activeTaxonomyId);
					pstmt.setString(7, sessionId);
					pstmt.setInt(8, subsetId);
					rs = pstmt.executeQuery();
				} else {
					if (savedGroupId == 0 && isFromQC != null && isFromQC.trim().equalsIgnoreCase("Yes")) {
						// sessionId = sessionId+".QUICKCART";
						sql = PropertyAction.SqlContainer.get("getCartItemDetailQueryBySession");
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, siteId);
						pstmt.setInt(2, userId);
						pstmt.setString(3, sessionId);
						pstmt.setInt(4, subsetId);
						pstmt.setInt(5, siteId);
						pstmt.setInt(6, userId);
						pstmt.setString(7, sessionId);
						pstmt.setInt(8, subsetId);
						pstmt.setInt(9, siteId);
						pstmt.setInt(10, userId);
						pstmt.setString(11, sessionId);
						pstmt.setInt(12, subsetId);
						rs = pstmt.executeQuery();
					} else if (savedGroupId == 0) {
						sql = PropertyAction.SqlContainer.get("getCartItemDetailQuery");
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, siteId);
						pstmt.setInt(2, userId);
						pstmt.setInt(3, subsetId);
						pstmt.setInt(4, siteId);
						pstmt.setInt(5, userId);
						pstmt.setInt(6, generalSubset);
						pstmt.setInt(7, siteId);
						pstmt.setInt(8, userId);
						pstmt.setInt(9, subsetId);
						rs = pstmt.executeQuery();
					} else {
						sql = PropertyAction.SqlContainer.get("selectGroupItem");
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}

						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, savedGroupId);
						pstmt.setInt(2, userId);
						pstmt.setInt(3, buyingCompanyId);
						pstmt.setInt(4, subsetId);
						pstmt.setInt(5, activeTaxonomyId);
						pstmt.setInt(6, savedGroupId);
						pstmt.setInt(7, userId);
						pstmt.setInt(8, buyingCompanyId);
						pstmt.setInt(9, generalSubset);
						pstmt.setInt(10, activeTaxonomyId);
						pstmt.setInt(11, savedGroupId);
						pstmt.setInt(12, subsetId);

						rs = pstmt.executeQuery();
					}
				}
				while (rs.next()) {
					ProductsModel partIdentifiers = new ProductsModel();

					if (rs.getInt("ITEM_ID") == CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						nonCatalogItemFlag = true;
					}

					int packageQty = 1;
					int qty = rs.getInt("QTY");
					if (rs.getInt("PACKAGE_FLAG") > 0) {
						if (rs.getInt("PACKAGE_QTY") > 0) {
							packageQty = rs.getInt("PACKAGE_QTY");
						}

					}
					// qty = qty * packageQty;
					String lineComment = "";
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.validateString(rs.getString("ITEM_LEVEL_SHIPVIA")).length() > 0
								&& CommonUtility.validateString(shipVia).equals("MULTIPLE")) {
							lineComment = "Ship Method : " + rs.getString("ITEM_LEVEL_SHIPVIA");
						}
					}
					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("ITEM_LEVEL_SHIPVIA_REQUIREDBY_DATE"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.validateString(rs.getString("ITEMLEVEL_REQUIREDBYDATE")).length() > 0) {
							lineComment = "Required By Date : " + rs.getString("ITEMLEVEL_REQUIREDBYDATE");
						}
					}
					if (CommonUtility.validateString(rs.getString("LINE_ITEM_COMMENT")).length() > 0) {
						if (CommonUtility.validateString(lineComment).length() > 0) {
							lineComment = lineComment + " | " + "LineItemComment : "
									+ rs.getString("LINE_ITEM_COMMENT");
						} else {
							lineComment = rs.getString("LINE_ITEM_COMMENT");
						}
					}

					ProductsModel saveItems = new ProductsModel();
					saveItems.setCartId(rs.getInt("CART_ID"));
					saveItems.setItemId(rs.getInt("ITEM_ID"));
					saveItems.setInvoiceDesc(rs.getString("INVOICE_DESC"));
					saveItems.setSalesUom(rs.getString("SALES_UOM"));
					saveItems.setPackDesc(rs.getString("PACK_DESC"));
					saveItems.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
					saveItems.setItemLevelRequiredByDate(rs.getString("ITEMLEVEL_REQUIREDBYDATE"));
					saveItems.setCatalogId(rs.getString("CATALOG_ID"));
					saveItems.setShipViaCode(rs.getString("ITEM_LEVEL_SHIPVIA"));
					saveItems.setQty(qty);
					saveItems.setShipViaDesc(rs.getString("ITEM_LEVEL_SHIPVIA_DESC"));
					saveItems.setCustomerPartNumber("");
					// saveItems.setLineNumber(rs.getInt("LINE_NUMBER"));
					saveItems.setManufacturerName(rs.getString("MANUFACTURER_NAME"));
					if (rs.findColumn("UOM") > 0) {
						saveItems.setUom(rs.getString("UOM"));
					}
					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))
							|| CommonUtility.validateNumber(ccOrderNumber) > 0) {
						saveItems.setPartNumber(rs.getString("PART_NUMBER"));
						saveItems.setShortDesc(rs.getString("SHORT_DESC"));
						saveItems.setUnitPrice(rs.getDouble("EXTPRICE") / rs.getInt("QTY"));
						saveItems.setExtendedPrice(rs.getDouble("EXTPRICE"));
						saveItems.setAltPartNumber1(rs.getString("ALT_PART_NUMBER1"));
						saveItems.setPrice(rs.getDouble("EXTPRICE"));
						partIdentifiers.setErpPartNumber(rs.getString("PART_NUMBER"));
						partIdentifiersList.add(partIdentifiers);
						UOMQTY.put(rs.getString("PART_NUMBER"), packageQty);
						lineItemCommentList.put(rs.getString("PART_NUMBER"), lineComment);
					} else {
						saveItems.setPartNumber(rs.getString("NC_PART_NUMBER"));
						saveItems.setShortDesc(rs.getString("SHORT_DESCRIPTION"));
						saveItems.setUnitPrice(rs.getDouble("PRICE"));
						saveItems.setExtendedPrice(rs.getDouble("PRICE") * rs.getInt("QTY"));
						saveItems.setPrice(rs.getDouble("PRICE") * rs.getInt("QTY"));
						partIdentifiers.setErpPartNumber(rs.getString("NC_PART_NUMBER"));
						UOMQTY.put(rs.getString("NC_PART_NUMBER"), packageQty);
						lineItemCommentList.put(rs.getString("NC_PART_NUMBER"), lineComment);
					}
					// Order Item discount updation
					Discount itemDiscount = getItemDiscount(session, rs.getInt("CART_ID"), rs.getString("PART_NUMBER"),
							rs.getInt("QTY"));

					if (itemDiscount != null) {

						buyingCompanyId = Integer.parseInt(session.getAttribute("buyingCompanyId").toString());
						String website = (String) session.getAttribute("websiteName");

						// save Item Level Discount
						SalesPromotionService salesPromo = SalesPromotionService.getInstance();
						if (salesPromo.storeCouponUsed(itemDiscount, String.valueOf(orderId), userId, buyingCompanyId,
								website)) {
							discountCouponCode = itemDiscount.getDiscountCoupon().getCopounCode();
							discountAmount = itemDiscount.getDiscountValue();
							discountInPercent = itemDiscount.getDiscountInPercent();
							discountCouponType = itemDiscount.getDiscountType().name();
						}

					}
					int orderItemId = 0;
					if (CommonUtility.validateNumber(ccOrderNumber) > 0) {
						orderItemId = rs.getInt("ORDER_ITEM_ID");
					} else {
						orderItemId = saveOrderItems(conn, orderId, saveItems, discountCouponCode, discountAmount,
								discountInPercent, discountCouponType);
						ProductsDAO.updatePopularity(rs.getInt("ITEM_ID"), 3);
					}

					saveItems.setOrderItemId(orderItemId);

					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						orderSubTotal = orderSubTotal + (rs.getDouble("EXTPRICE") - 0);
					} else {
						orderSubTotal = orderSubTotal + ((rs.getDouble("PRICE") * rs.getInt("QTY")) - 0);
					}
					orderSubTotal = orderSubTotal + (rs.getDouble("EXTPRICE"));

					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						idList = idList + c + rs.getInt("ITEM_ID");
						c = " OR ";
						partIdentifier.add(rs.getString("PART_NUMBER"));
					} else {
						partIdentifier.add(rs.getString("NC_PART_NUMBER"));
					}

					partIdentifierQuantity.add(rs.getInt("QTY"));
					itemDetailObject.add(saveItems);
				}

				LinkedHashMap<Integer, ArrayList<ProductsModel>> customerPartNumber = null;
				if (CommonUtility.validateString(idList).length() > 0) {
					customerPartNumber = ProductHunterSolr.getcustomerPartnumber(idList, buyingCompanyId,
							buyingCompanyId);
				}
				if (customerPartNumber != null && customerPartNumber.size() > 0) {
					for (ProductsModel item : itemDetailObject) {
						item.setCustomerPartNumberList(customerPartNumber.get(item.getItemId()));
					}
				}
				if (itemDetailObject != null && itemDetailObject.size() > 0 && eclipseSessionId != null
						&& !eclipseSessionId.trim().equalsIgnoreCase("")) {
					// Call erp for price
					ProductManagement priceInquiry = new ProductManagementImpl();
					ProductManagementModel priceInquiryInput = new ProductManagementModel();
					priceInquiryInput.setEntityId(CommonUtility.validateString(entityId));
					priceInquiryInput.setHomeTerritory(homeTerritory);
					priceInquiryInput.setPartIdentifier(itemDetailObject);
					priceInquiryInput.setPartIdentifierQuantity(partIdentifierQuantity);
					priceInquiryInput.setRequiredAvailabilty("Y");
					priceInquiryInput.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
					priceInquiryInput.setUserToken((String) session.getAttribute("userToken"));
					priceInquiryInput.setSession(session);
					itemDetailObject = priceInquiry.priceInquiry(priceInquiryInput, itemDetailObject);
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("UMQTY_FROM_ERP"))
							.equalsIgnoreCase("Y")) {
						for (ProductsModel item : itemDetailObject) {
							UOMQTY.put(item.getPartNumber(), CommonUtility.validateNumber(item.getQtyUOM()));
						}
					}
					updateOrderItemPrice(conn, orderId, itemDetailObject);
				}

				SalesModel erpOrderDetail = new SalesModel();

				String quoteNumber = (String) session.getAttribute("quoteNumber");
				orderGrandTotal = orderSubTotal;
				defaultOrderDetail.setSubtotal(orderSubTotal);
				defaultOrderDetail.setTotal(orderGrandTotal);
				defaultOrderDetail.setOrderedBy(orderedBy);
				defaultOrderDetail.setStatusDescription("Order Successfully Submitted");
				defaultOrderDetail.setOrderNotes(orderNotes);
				defaultOrderDetail.setShippingInstruction(shippingInstruction);
				defaultOrderDetail.setReqDate(reqDate);
				defaultOrderDetail.setShipViaID(shipVia);

				AddressModel selectedShipAddress = new AddressModel();
				selectedShipAddress.setAddress1(address1);
				selectedShipAddress.setAddress2(address2);
				selectedShipAddress.setCity(city);
				selectedShipAddress.setState(state);
				selectedShipAddress.setZipCode(zipCode);
				selectedShipAddress.setCountry(country);
				selectedShipAddress.setPhoneNo(phoneNumber);

				SalesOrderManagementModel salesOrderInput = new SalesOrderManagementModel();
				salesOrderInput.setOrderItems(itemDetailObject);
				SalesModel quoteResponse = null;
				if (session.getAttribute("quoteResponse") != null) {
					quoteResponse = new SalesModel();
					quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
					salesOrderInput.setQuoteResponse(quoteResponse);
				}
				salesOrderInput.setShipVia(shipVia);
				salesOrderInput.setShippingInstruction(shippingInstruction);
				salesOrderInput.setOrderNotes(orderNotes);
				salesOrderInput.setOrderedBy(orderedBy);
				salesOrderInput.setOrderStatus(orderStatus);
				salesOrderInput.setOrderStatusCode(orderStatusCode);
				salesOrderInput.setReqDate(reqDate);
				salesOrderInput.setSession(session);
				salesOrderInput.setOrderId(orderId);
				salesOrderInput.setBillEntityId(billEntityId);
				salesOrderInput.setShipEntityId(shipEntityId);
				salesOrderInput.setUserToken(userToken);
				salesOrderInput.setShipAddress(selectedShipAddress);
				salesOrderInput.setTaxExempt(taxExempt);
				salesOrderInput.setUserName(userName);
				salesOrderInput.setCreditCardValue(creditCardValue);
				salesOrderInput.setPurchaseOrderNumber(poNumber);
				salesOrderInput.setGasPoNumber(gasPoNumber);
				salesOrderInput.setCustomerReleaseNumber(customerReleaseNumber);
				salesOrderInput.setSelectedBranch(selectedBranch);
				salesOrderInput.setLineItemCommentList(lineItemCommentList);
				salesOrderInput.setCountry(country);
				salesOrderInput.setCCType(ccType);
				salesOrderInput.setCCAuth(ccAuthCode);
				if (CommonUtility.validateString(ccApprovedAmount).length() > 0) {
					approAmount = Double.parseDouble(ccApprovedAmount);
				}
				salesOrderInput.setCCAmount(approAmount);
				salesOrderInput.setCCToken(ccToken);
				salesOrderInput.setuOMQTY(UOMQTY);
				salesOrderInput.setPaymentTerms(paymentTermsCode);
				if (quoteNumber != null && !quoteNumber.trim().equalsIgnoreCase(""))
					salesOrderInput.setQuoteNumber(quoteNumber);

				if (CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
						.equalsIgnoreCase("SO")
						|| (CommonUtility.validateString(orderingType).length() > 0
								&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO"))) {
					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
							.equalsIgnoreCase(CommonUtility.validateString(orderingType))) {
						salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
					} else if (CommonUtility.validateString(orderingType).length() > 0
							&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO")) {
						salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
					} else if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
							.length() > 0) {
						salesOrderInput.setErpOrderType(CommonUtility.validateString(
								CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE")));
					}
				}

				salesOrderInput.setFrieghtCharges(upsFrieghtCharges);
				salesOrderInput.setOrderERPId(orderErpId);

				if (CommonUtility.validateString(salesOrderInput.getErpOrderType()).equalsIgnoreCase("SO")) {

					String discountValue = (String) session.getAttribute("discountValue");
					String discountType = (String) session.getAttribute("discountType");
					String userEmailAddress = (String) session.getAttribute("userEmailAddress");
					String userOfficePhone = (String) session.getAttribute("userOfficePhone");

					double freight = 0.0;
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
							.equalsIgnoreCase("SHIPVIA_COST_TABLE")
							&& session.getAttribute("customerShipViaListJson") != null) {
						String shipCostTableJasonString = CommonUtility
								.validateString((String) session.getAttribute("customerShipViaListJson"));
						Gson gson = new Gson();
						// LinkedList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
						// new TypeToken<List<ShipVia>>(){}.getType());
						ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
								new TypeToken<List<ShipVia>>() {
								}.getType());
						if (shipCostTable != null && !shipCostTable.isEmpty()) {
							if (shipCostTable != null && !shipCostTable.isEmpty()) {
								if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
									session.removeAttribute("selectedShipCodeOption");
								} else {
									if (session.getAttribute("selectedShipCodeOption") != null)
										selectedShipCodeOption = CommonUtility.validateString(
												session.getAttribute("selectedShipCodeOption").toString());
								}
								if (freeShipping.equalsIgnoreCase("no")) {
									for (ShipVia shipViaObj : shipCostTable) {
										// if(shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)){
										if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
											if (shipViaObj.getShipCode().equalsIgnoreCase(selectedShipCodeOption)) {
												freight = shipViaObj.getShipCost();
												session.removeAttribute("selectedShipCodeOption");
												break;
											}
										} else {
											if (shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)) {
												freight = shipViaObj.getShipCost();
												break;
											}
										}
									}
								}
							}
						}
					}

					LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();
					createQuoteInput.put("session", session);
					createQuoteInput.put("orderedBy", orderedBy);
					createQuoteInput.put("itemList", itemDetailObject);
					createQuoteInput.put("userToken", userToken);
					createQuoteInput.put("shipToEntity", userToken);
					createQuoteInput.put("orderNotes", orderNotes);
					createQuoteInput.put("shippingInstruction", shippingInstruction);
					createQuoteInput.put("poNumber", poNumber);
					createQuoteInput.put("reqDate", reqDate);
					createQuoteInput.put("shipVia", shipVia);
					createQuoteInput.put("freight", freight);
					createQuoteInput.put("billAddress", userBillAddress);
					createQuoteInput.put("shipAddress", userShipAddress);
					createQuoteInput.put("defaultBillToId", defaultBillToId);
					createQuoteInput.put("defaultShipToId", defaultShipToId);
					createQuoteInput.put("customerId", userToken);
					if (CommonUtility.validateString(shipVia).length() > 0 && shipVia.contains("PK")) {
						if (shipVia.equals("PKAA")) {
							wareHousecode = "ANN";
						} else if (shipVia.equals("PKCS")) {
							wareHousecode = "CEDA";
						} else if (shipVia.equals("PKCL")) {
							wareHousecode = "WATE";
						} else if (shipVia.equals("PKFM")) {
							wareHousecode = "FARM";
						} else if (shipVia.equals("PKUT")) {
							wareHousecode = "UTIC";
						}
						createQuoteInput.put("wareHousecode", wareHousecode);
					} else {
						createQuoteInput.put("wareHousecode", wareHousecode);
					}
					createQuoteInput.put("customerCountry", customerCountry);
					createQuoteInput.put("customerName", userShipAddress.getCustomerName());
					createQuoteInput.put("customerReleaseNumber", customerReleaseNumber);
					createQuoteInput.put("discountValue", discountValue);
					createQuoteInput.put("discountType", discountType);
					if (nonCatalogItemFlag) {
						createQuoteInput.put("ARIItem", "Y");
					} else {
						createQuoteInput.put("ARIItem", "N");
					}
					createQuoteInput.put("subsetId", subsetId);
					createQuoteInput.put("generalSubset", generalSubset);
					if (CommonUtility.validateString(userEmailAddress).length() > 0) {
						createQuoteInput.put("userEmailAddress", userEmailAddress);
					}
					if (CommonUtility.validateString(userOfficePhone).length() > 0) {
						createQuoteInput.put("userOfficePhone", userOfficePhone);
					}
					createQuoteInput.put("creditCardValue", creditCardValue);
					createQuoteInput.put("erpOrderType",
							CommonUtility.validateString(salesOrderInput.getErpOrderType()));
					if (orderTotalDiscountAmount > 0) {
						createQuoteInput.put("orderDiscountType", "$");
						createQuoteInput.put("discountAmount", orderTotalDiscountAmount);
						createQuoteInput.put("discountPercent", discountValue);
					} else {
						createQuoteInput.put("orderDiscountType", discountType);
						createQuoteInput.put("discountAmount", discountAmount);
						createQuoteInput.put("discountPercent", discountValue);

					}
					salesOrderInput.setSalesOrderInput(createQuoteInput);
				}

				SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();

				erpOrderDetail = salesOrderSubmit.submitOrderToERP(salesOrderInput);

				if (erpOrderDetail != null
						&& CommonUtility.validateNumber(erpOrderDetail.getStatus()) != HttpStatus.SC_PAYMENT_REQUIRED
						&& CommonUtility.validateNumber(erpOrderDetail.getStatus()) != HttpStatus.SC_EXPECTATION_FAILED
						&& CommonUtility.validateNumber(erpOrderDetail.getStatus()) != HttpStatus.SC_BAD_REQUEST) {
					sendMailFlag = erpOrderDetail.isSendMailFlag();
					for (ProductsModel item : itemDetailObject) {
						for (SalesModel erpOrderItem : erpOrderDetail.getOrderList()) {
							if (item.getPartNumber() != null && erpOrderItem.getPartNumber() != null && item
									.getPartNumber().trim().equalsIgnoreCase(erpOrderItem.getPartNumber().trim())) {
								item.setUnitPrice(erpOrderItem.getUnitPrice());
								item.setUom(erpOrderItem.getUom());
								item.setQty(erpOrderItem.getQtyShipped());
								item.setQtyUOM(erpOrderItem.getQtyUom());
								item.setErpQty(erpOrderItem.getPerQty());

							}
						}
					}
					if (erpOrderDetail.getShipViaID() != null && erpOrderDetail.getShipViaID().trim().length() > 0) {
					} else {
						erpOrderDetail.setShipViaID(shipVia);
					}
					if (CommonUtility.validateString(erpOrderDetail.getShipViaMethod()).length() > 0) {
					} else {
						if (session.getAttribute("customerShipViaDesc") != null) {
							erpOrderDetail.setShipViaMethod(CommonUtility
									.validateString(session.getAttribute("customerShipViaDesc").toString()));
						}
					}

					if (erpOrderDetail.getOrderedBy() != null && erpOrderDetail.getOrderedBy().trim().length() > 0) {
					} else {
						erpOrderDetail.setOrderedBy(orderedBy);
					}
					if (erpOrderDetail.getReqDate() != null && erpOrderDetail.getReqDate().trim().length() > 0) {
					} else {
						erpOrderDetail.setReqDate(reqDate);
					}
					updateSalesOrder(conn, orderId, erpOrderDetail);
					if (erpOrderDetail.getOrderList() != null && erpOrderDetail.getOrderList().size() > 0) {
						updateOrderItemPrice(conn, orderId, itemDetailObject);
					}

					deleteFromCart(conn, userId);
					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CREDITCARD_SAVE"))
							.equalsIgnoreCase("Y")) {
						SalesDAO.deleteAllCreditCardInfo(userId);
					}

					stmt = conn.prepareCall("{call ORDER_KEYWORD_PROC(?)}");
					stmt.setInt(1, orderId);
					stmt.execute();
					System.out.println(type);
				} else {
					updateSalesOrder(conn, orderId, defaultOrderDetail);
				}

				if (isApproveCart != null && isApproveCart.trim().equalsIgnoreCase("Y") && orderId > 0) {
					SalesDAO.approveCartDao(session, savedGroupId, orderId);
				}

				if (sendMailFlag) {

					SalesModel otherDetail = new SalesModel();
					otherDetail.setSession(session);
					otherDetail.setSendmailToSalesRepOnly(sendmailToSalesRepOnly);
					int count = SalesDAO.sendConfirmationMail(orderId, userId, 0, null, otherDetail);

					if (count == 1) {
						sql = "update orders set email_sent = 'Y' where order_id = ?";
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, orderId);
						rs = pstmt.executeQuery();
					}

					// target = SUCCESS;
				} else {
					// target = "ResultLoader";
				}
				renderContent = orderId + "~" + erpOrderDetail.getStatus() + "~"
						+ erpOrderDetail.getStatusDescription();
			} else {
				return "SESSIONEXPIRED";
			}
			session.removeAttribute("orderingType");
			session.removeAttribute("calculateTax");

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBStatement(stmt);
			ConnectionManager.closeDBConnection(conn);
		}

		return "ResultLoader";
	}

	private CreditCardModel setCreditCardValues(HttpSession session) {

		try {
			if ((CommonUtility.validateString(payPalToken).length() > 0
					&& CommonUtility.validateString(payPalPayerId).length() > 0)
					|| (CommonUtility.validateString(creditCardPayment).equalsIgnoreCase("Y")
							|| CommonUtility.validateString(ccTransactionId).length() > 0)) {
				String paymentGatewayType = "";
				if (session.getAttribute("PAYMENT_GATEWAY") != null
						&& session.getAttribute("PAYMENT_GATEWAY").toString().length() > 0) {
					paymentGatewayType = (String) session.getAttribute("PAYMENT_GATEWAY");
				} else {
					paymentGatewayType = CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY");
				}

				if (CommonUtility.validateString(payPalToken).length() > 0
						&& CommonUtility.validateString(payPalPayerId).length() > 0) {
					creditCardValue = new CreditCardModel();
					creditCardValue.setPayPalPayerId(CommonUtility.validateString(payPalPayerId));
					creditCardValue.setPayPalToken(CommonUtility.validateString(payPalToken));
				} else {
					ccNumber = ccNumber.replaceAll("XXXX-", "");
					ccNumber = ccNumber.replaceAll("\\*", "");
					ccNumber = ccNumber.replaceAll("#", "");
					ccNumber = ccNumber.replaceAll("-", "");
					creditCardValue = new CreditCardModel();
					creditCardValue.setCardHolder(cardHolder);
					creditCardValue.setDate(ccExp);
					creditCardValue.setElementPaymentAccountId(ccTransactionId);
					creditCardValue.setAddress1(streetAddress);
					creditCardValue.setZipCode(postalCode);

					creditCardValue.setPaymentGatewayType(paymentGatewayType);

					creditCardValue.setCreditCardResponseCode(ccResponseCode);
					creditCardValue.setCreditCardStatus(ccStatus);
					creditCardValue.setCreditCardHostRefNumber(ccHostRefNumber);
					creditCardValue.setCreditCardTaskID(ccTaskID);
					creditCardValue.setCreditCardAmount(ccAmount);
					creditCardValue.setCreditCardDeclineResponseReason(ccDeclineResponseReason);
					creditCardValue.setCreditCardCvv2VrfyCode(ccCvv2VrfyCode);
					creditCardValue.setCreditCardTip(ccTip);
					creditCardValue.setCreditCardTransTimeStamp(ccTransTimeStamp);
					creditCardValue.setCreditCardToken(ccToken);
					creditCardValue.setCreditCardApprovedAmount(ccApprovedAmount);
					creditCardValue.setCreditCardRequestedAmount(ccRequestedAmount);
					creditCardValue.setCreditCardHostResponseCode(ccHostResponseCode);
					creditCardValue.setCreditCardInvoice(ccInvoice);
					creditCardValue.setCreditCardApprovalCode(ccApprovalCode);
					creditCardValue.setCreditCardTransactionID(ccTransactionId);
					creditCardValue.setCreditCardServerTimestamp(ccServerTimestamp);
					creditCardValue.setCreditCardType(ccType);
					creditCardValue.setCreditCardFee(ccFee);
					creditCardValue.setCreditCardExternalSessionID(ccExternalSessionID);
					creditCardValue.setCreditCardAddVrfyCode(ccAddVrfyCode);
					creditCardValue.setCreditCardTax(ccTax);
					creditCardValue.setCreditCardNewDomainKey(ccNewDomainKey);
					creditCardValue.setCreditCardNumber(ccNumber);
					creditCardValue.setCreditCardRefNumber(ccRefrenceCode);
					creditCardValue.setCreditCardActualOrderTotal(actualOrderTotal);
					creditCardValue.setCreditCardMerchantId(ccMerchantId);
					creditCardValue.setSaveCard(saveCard);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return creditCardValue;
	}

	public String creditCardPreAuthorization() {
		try {
			request = ServletActionContext.getRequest();

			SalesOrderManagementImpl salesObj = new SalesOrderManagementImpl();

			CreditCardModel creditCardValue = new CreditCardModel();

			creditCardValue.setCardHolder(request.getParameter("cardHolderNew"));
			creditCardValue.setCreditCardNumber(request.getParameter("ccNumberNew"));
			creditCardValue.setCreditCardCvv2VrfyCode(request.getParameter("ccCvv2VrfyCodeNew"));
			creditCardValue.setCreditCardType(request.getParameter("ccTypeNew"));
			creditCardValue.setCreditCardExpiryMonth(request.getParameter("ccExpNewMonth"));
			creditCardValue.setCreditCardExpiryYear(request.getParameter("ccExpNewYear"));
			creditCardValue.setCreditCardResponseCode(request.getParameter("ccCurrencyCode"));
			creditCardValue.setAmount(request.getParameter("creditAmount"));
			creditCardValue.setAddress1(request.getParameter("ccAddress"));
			creditCardValue.setState(request.getParameter("ccState"));
			creditCardValue.setCountry(request.getParameter("ccCountry"));
			creditCardValue.setZipCode(request.getParameter("ccZipcode"));

			CreditCardModel creditCardResponse = salesObj.creditCardPreAuthorization(creditCardValue);

			String transactionId = creditCardResponse.getCreditCardTransactionID();

			if (CommonUtility.validateString(transactionId).length() > 0) {
				renderContent = "0|" + transactionId;
			} else {

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;

	}

	public String openQuotes() {
		int shipToEntityBCId = 0;
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			if (session.getAttribute("userBuyingCompanyId") != null) {
				shipToEntityBCId = CommonUtility.validateNumber((String) session.getAttribute("userBuyingCompanyId"));
				ArrayList<SalesModel> openOrderList = new ArrayList<SalesModel>();
				openOrderList = SalesDAO.getShipToEntityOpenQuotes(shipToEntityBCId);
				contentObject.put("openOrderList", openOrderList);
			} else {
				contentObject.put("openOrderList", "No Content Found");
			}
			renderContent = LayoutGenerator.templateLoader("openQuotesPage", contentObject, null, null, null);
		} catch (Exception e) {

			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String auCreditCardPreAuthorization() {
		try {
			request = ServletActionContext.getRequest();
			SalesOrderManagementImpl salesObj = new SalesOrderManagementImpl();

			CreditCardModel creditCardValue = new CreditCardModel();

			creditCardValue.setCardHolder(request.getParameter("wlCardHolderNew"));
			creditCardValue.setCreditCardNumber(request.getParameter("wlCcNumberNew"));
			creditCardValue.setCreditCardCvv2VrfyCode(request.getParameter("wlCcCvv2VrfyCodeNew"));
			creditCardValue.setCreditCardType(request.getParameter("wlCcTypeNew"));
			creditCardValue.setCreditCardExpiryMonth(request.getParameter("wlCcExpNewMonth"));
			creditCardValue.setCreditCardExpiryYear(request.getParameter("wlCcExpNewYear"));
			creditCardValue.setCreditCardResponseCode(request.getParameter("wlCcCurrencyCode"));
			creditCardValue.setAmount(request.getParameter("wlCreditAmount"));
			creditCardValue.setAddress1(request.getParameter("wlCcAddress"));
			creditCardValue.setState(request.getParameter("wlCcState"));
			creditCardValue.setCountry(request.getParameter("wlCcCountry"));
			creditCardValue.setZipCode(request.getParameter("wlCcZipcode"));

			CreditCardModel creditCardResponse = salesObj.creditCardPreAuthorization(creditCardValue);
			String transactionId = creditCardResponse.getCreditCardTransactionID();

			if (CommonUtility.validateString(transactionId).length() > 0) {
				renderContent = "0|" + transactionId;
			} else {

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;

	}

	public UsersModel getTransctionSetupId(UsersModel billAddress, UsersModel shipAddress, String transAmount) {

		String transactionSetupId = "";
		// Transaction
		ExpressImpl implObj = new ExpressImpl();

		Application application = new Application();
		Credentials credentials = new Credentials();
		Terminal terminal = new Terminal();
		Transaction transaction = new Transaction();
		TransactionSetup transactionSetup = new TransactionSetup();
		Address address = new Address();
		String transactionType = "";
		PaymentAccount paymentAccount = new PaymentAccount();
		ExtendedParameters[] extendedParameters = null;
		addressList = null;

		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		int userId = Integer.parseInt(sessionUserId);
		UsersModel userDetail = new UsersModel();
		DecimalFormat df = CommonUtility.getPricePrecision(session);
		transAmount = df.format(CommonUtility.validateDoubleNumber(transAmount));
		HttpURLConnection eclipseConn;

		try {
			UsersModel user = UsersDAO.getUserEmail(userId);
			String userMailId = user.getEmailAddress();
			if (session.getAttribute("userContactAddress") != null) {
				addressList = (UsersModel) session.getAttribute("userContactAddress");
			}
			application.setApplicationID(CommonDBQuery.getSystemParamtersList().get("TRANS_APPLICATION_ID"));
			application.setApplicationName(CommonDBQuery.getSystemParamtersList().get("TRANS_APPLICATION_NAME"));
			application.setApplicationVersion(CommonDBQuery.getSystemParamtersList().get("TRANS_APPLICATION_VERSION"));

			credentials.setAccountID(CommonDBQuery.getSystemParamtersList().get("TRANS_ACCOUNT_ID"));
			credentials.setAccountToken(CommonDBQuery.getSystemParamtersList().get("TRANS_ACCOUNT_TOKEN"));
			credentials.setAcceptorID(CommonDBQuery.getSystemParamtersList().get("TRANS_ACCEPTOR_ID"));

			terminal.setTerminalID(CommonDBQuery.getSystemParamtersList().get("TRANS_TERMINAL_ID"));
			/*
			 * terminal.setTerminalType(TerminalType.ECommerce);
			 * terminal.setCardholderPresentCode(CardholderPresentCode.ECommerce);
			 * terminal.setCardPresentCode(CardPresentCode.NotPresent);//Unknown
			 * terminal.setCardInputCode(CardInputCode.ManualKeyed);
			 * terminal.setCVVPresenceCode(CVVPresenceCode.NotProvided);
			 * terminal.setTerminalCapabilityCode(TerminalCapabilityCode.KeyEntered);
			 * terminal.setTerminalEnvironmentCode(TerminalEnvironmentCode.ECommerce);
			 * terminal.setMotoECICode(MotoECICode.
			 * NonAuthenticatedSecureECommerceTransaction);
			 * terminal.setCVVResponseType(CVVResponseType.Regular);//Extended only for visa
			 * terminal.setConsentCode(ConsentCode.Internet);
			 * terminal.setTerminalEncryptionFormat(EncryptionFormat.Format1);
			 */

			transaction.setTransactionAmount(transAmount);
			/*
			 * transaction.setReversalType(ReversalType.System);
			 * transaction.setMarketCode(MarketCode.ECommerce);
			 * transaction.setBillPaymentFlag(BooleanType.False);
			 * transaction.setDuplicateCheckDisableFlag(BooleanType.False);
			 * transaction.setDuplicateOverrideFlag(BooleanType.False);//-------------------
			 * ---- Enquiry transaction.setRecurringFlag(BooleanType.False);
			 * transaction.setPartialApprovedFlag(BooleanType.True);
			 * transaction.setEMVEncryptionFormat(EMVEncryptionFormat.Default);
			 * //transaction.setReversalType(ReversalType.Full);
			 * transaction.setReversalReason(ReversalReason.Unknown);
			 */

			transactionSetup.setProcessTransactionTitle(
					LayoutLoader.getMessageProperties().get(session.getAttribute("localeCode").toString().toUpperCase())
							.getProperty("element.placeorder.title").trim());
			transactionSetup.setReturnURL(CommonDBQuery.getSystemParamtersList().get("CREDITCARD_RESPONSE_URL"));
			// transactionSetup.setReturnURL(CommonDBQuery.getSystemParamtersList().get("122.166.57.27/Shamrock/CreditCardResponse.slt"));
			// transactionSetup.setReturnURL(CommonDBQuery.getSystemParamtersList().get("http://192.168.1.74/Shamrock/CreditCardResponse.slt"));
			// transactionSetup.setTransactionSetupMethod(TransactionSetupMethod.CreditCardAuthorization);
			if (CommonUtility.validateString(outStandingPayment).equalsIgnoreCase("Y")) {
				System.out.println("is outStandingPayment :" + outStandingPayment);
				transactionSetup.setTransactionSetupMethod(TransactionSetupMethod.CreditCardSale);
				transactionType = outStandingPayment;
			} else {
				transactionSetup.setTransactionSetupMethod(TransactionSetupMethod.CreditCardAuthorization);
			}

			/*
			 * transactionSetup.setEmbedded(BooleanType.True);//False
			 * transactionSetup.setDevice(Device.Null);
			 * transactionSetup.setCVVRequired(BooleanType.True);//False
			 * transactionSetup.setAutoReturn(BooleanType.True);
			 * transactionSetup.setDeviceInputCode(DeviceInputCode.Keyboard);
			 */

			if (addressList != null) {
				address.setBillingName(addressList.getFirstName().replaceAll("([^a-zA-Z]|\\s)+", " ") + " "
						+ addressList.getLastName().replaceAll("([^a-zA-Z]|\\s)+", " "));
				address.setBillingAddress1(addressList.getAddress1());
				if (addressList.getAddress2() != null) {
					address.setBillingAddress2(addressList.getAddress2());
				}
				address.setBillingCity(addressList.getCity());
				address.setBillingState(addressList.getState());
				address.setBillingZipcode(addressList.getZipCode());
				address.setBillingEmail(addressList.getEmailAddress());
			} else {
				address.setBillingName(billAddress.getCustomerName().replaceAll("([^a-zA-Z]|\\s)+", " "));
				address.setBillingAddress1(billAddress.getAddress1());
				if (billAddress.getAddress2() != null) {
					address.setBillingAddress2(billAddress.getAddress2());
				}
				address.setBillingCity(billAddress.getCity());
				address.setBillingState(billAddress.getState());
				address.setBillingZipcode(billAddress.getZipCode());
				address.setBillingEmail(billAddress.getEmailAddress());
			}
			if (CommonUtility.customServiceUtility() != null) {
				CommonUtility.customServiceUtility().addfirstNameAndlastNameToBillAddress(address, billAddress);
			}
			/*
			 * address.setShippingAddress1(shipAddress.getAddress1());
			 * if(shipAddress.getAddress2()!=null){
			 * address.setShippingAddress2(shipAddress.getAddress2()); }
			 * address.setShippingCity(shipAddress.getCity());
			 * address.setShippingState(shipAddress.getState());
			 * address.setShippingZipcode(shipAddress.getZipCode());
			 * address.setShippingEmail(userMailId);
			 */

			paymentAccount.setPaymentAccountType(PaymentAccountType.CreditCard);
			paymentAccount.setPASSUpdaterBatchStatus(PASSUpdaterBatchStatus.Null);
			paymentAccount.setPASSUpdaterOption(PASSUpdaterOption.Null);

			// Response response = implObj.transactionSetup(credentials, application,
			// terminal, transaction, transactionSetup, address, paymentAccount,
			// extendedParameters);

			System.out.println("transactionType :" + transactionSetup.getTransactionSetupMethod());
			System.out.println("transactionType :==============" + transactionType);
			VelocityEngine velocityTemplateEngine = new VelocityEngine();
			velocityTemplateEngine.setProperty("file.resource.loader.path",
					CommonDBQuery.getSystemParamtersList().get("ERPTEMPLATEPATH"));
			velocityTemplateEngine.init();

			Template t = velocityTemplateEngine.getTemplate("Transactionsetup.xml");
			/* create a context and add data */
			VelocityContext context = new VelocityContext();
			context.put("credentials", credentials);
			context.put("application", application);
			context.put("terminal", terminal);
			context.put("transaction", transaction);
			context.put("transactionSetup", transactionSetup);
			context.put("address", address);
			context.put("transactionType", transactionType);
			context.put("referenceNumber", new Date().getTime());

			/* now render the template into a StringWriter */
			StringWriter writer = new StringWriter();
			t.merge(context, writer);
			/* show the World */
			StringBuffer finalMessage = new StringBuffer();
			finalMessage.append(writer.toString());

			System.out.println(finalMessage.toString());

			eclipseConn = (HttpURLConnection) new URL("https://transaction.elementexpress.com").openConnection();
			if (CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_TRANSACTION_URL"))
					.contains("cert")) {
				eclipseConn = (HttpURLConnection) new URL("https://certtransaction.elementexpress.com")
						.openConnection();
			}
			eclipseConn.setRequestProperty("content-type", "text/xml");

			eclipseConn.setDoOutput(true);
			OutputStream os = eclipseConn.getOutputStream();
			os.write(finalMessage.toString().getBytes());

			BufferedReader in = new BufferedReader(new InputStreamReader(eclipseConn.getInputStream()));
			String line = null;

			StringBuffer responseData = new StringBuffer();

			while ((line = in.readLine()) != null) {

				responseData.append(line);
			}
			System.out.println(responseData.toString().replace(" xmlns='https://transaction.elementexpress.com'", ""));

			JAXBContext jaxbContext = JAXBContext.newInstance(TransactionSetupResponse.class);
			StringReader reader = new StringReader(
					responseData.toString().replace(" xmlns='https://transaction.elementexpress.com'", ""));
			Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
			TransactionSetupResponse transactionSetupResponse = (TransactionSetupResponse) jaxbUnmarshaller
					.unmarshal(reader);

			if (CommonUtility.validateString(transactionSetupResponse.getResponse().getExpressResponseMessage()).trim()
					.equalsIgnoreCase("Success")) {

				userDetail.setElementSetupId(
						transactionSetupResponse.getResponse().getTransaction().getTransactionSetupID());
				userDetail.setElementSetupUrl(
						CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_TRANSACTION_URL"));
			}
			System.out.println(transactionSetupResponse);
			System.out.println(transactionSetupResponse.getResponse().getExpressResponseMessage());

			System.out.println(transactionSetupResponse.getResponse().getTransaction().getTransactionSetupID());

			// transactionSetupId = response.getTransaction().getTransactionSetupID();

			/*
			 * System.out.println("-------- Credit Card Transuction Setup   ----------");
			 * System.out.println("ExpressResponseCode: "+response.getExpressResponseCode())
			 * ; System.out.println("ExpressResponseMessage : "+response.
			 * getExpressResponseMessage());
			 * System.out.println("ExpressTransactionDate : "+response.
			 * getExpressTransactionDate());
			 * System.out.println("ExpressTransactionTime : "+response.
			 * getExpressTransactionTime());
			 * System.out.println("ExpressTransactionTimezone : "+response.
			 * getExpressTransactionTimezone()); System.out.println("TransactionSetupID : "
			 * + response.getTransaction().getTransactionSetupID());
			 * System.out.println("PaymentAccount TransactionSetupID : " +
			 * response.getPaymentAccount().getTransactionSetupID());
			 * System.out.println("TransactionSetup TransactionSetupID : " +
			 * response.getTransactionSetup().getTransactionSetupID());
			 * System.out.println("TransactionSetup ValidationCode : " +
			 * response.getTransactionSetup().getValidationCode());
			 * System.out.println("-------- Credit Card Transuction Setup   ----------");
			 */

		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return userDetail;
	}

	public void saveFile() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String ccToken = CommonUtility.validateString(request.getParameter("ccToken"));
		String ccExp = CommonUtility.validateString(request.getParameter("ccExp"));
		String ccStatus = CommonUtility.validateString(request.getParameter("ccStatus"));
		String ccApprovalCode = CommonUtility.validateString(request.getParameter("ccApprovalCode"));// same
																										// ccapprovalNO
		String ccTransactionId = CommonUtility.validateString(request.getParameter("ccTransactionId"));
		String ccType = CommonUtility.validateString(request.getParameter("ccType"));
		String ccDescription = CommonUtility.validateString(request.getParameter("ccType"));
		String ccApprovedAmount = CommonUtility.validateString(request.getParameter("ccApprovedAmount"));
		String ccNumber = CommonUtility.validateString(request.getParameter("ccNumber"));
		String ccApprovalNo = CommonUtility.validateString(request.getParameter("approvalNumber"));
		String ccValidationCode = CommonUtility.validateString(request.getParameter("validationCode"));
		String ccRefrenceCode = CommonUtility.validateString(request.getParameter("ccRefrenceCode"));
		String CVVResponseCode = CommonUtility.validateString(request.getParameter("CVVResponseCode"));
		String transactionID = CommonUtility.validateString(request.getParameter("transactionID"));
		String customerNumber = CommonUtility.validateString(request.getParameter("customerNumber"));
		String outStandingPaymentTotal = CommonUtility.validateString(request.getParameter("outStandingPaymentTotal"));
		String sequenceId = CommonUtility.validateString(request.getParameter("sequenceId"));

		String remitterId = "";
		if (session.getAttribute("customerId") != null) {
			remitterId = CommonUtility.validateString((String) session.getAttribute("customerId"));
		}
		String CompanyId = CommonUtility
				.validateString(CommonDBQuery.getSystemParamtersList().get("CIMM2B_ERP_COMPANY_ID"));
		String userName = (String) session.getAttribute(Global.USERNAME_KEY);
		String ccTypeCode = "";
		String ccLastName = "";
		String ccZipCode = "";
		String ccAddress2 = "";
		int termsAmount = 0;
		int setNo = 1;
		int count = 0;
		String[] expDate = ccExp.split("/");
		int expMonth = 0;
		int expYear = 0;
		String cardExpDate = "";
		if (expDate != null && expDate.length > 1) {
			expMonth = CommonUtility.validateNumber(expDate[0]);
			expYear = CommonUtility.validateNumber(expDate[1]);
		}

		Calendar calendar = Calendar.getInstance();
		// passing month-1 because 0-->jan, 1-->feb... 11-->dec
		calendar.set(Calendar.YEAR, 2015);
		calendar.set(2000 + expYear, expMonth - 1, 1);
		calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));
		Date creditCardDate = calendar.getTime();

		DateFormat DATE_FORMAT = new SimpleDateFormat("MM/dd/yyyy");
		System.out.println(DATE_FORMAT.format(creditCardDate));
		cardExpDate = DATE_FORMAT.format(creditCardDate);

		UserManagement usersObj = new UserManagementImpl();

		String selectedinvoiNo = (String) session.getAttribute("selectedinvoiceNo");
		if (session.getAttribute("selectedinvoiceNo") != null) {
			selectedinvoiNo = CommonUtility.validateString((String) session.getAttribute("selectedinvoiceNo"));
		}

		String[] selectedinvoiceNo = null;
		if (selectedinvoiNo != null && selectedinvoiNo.contains(",")) {
			selectedinvoiceNo = selectedinvoiNo.split(",");
		}

		if (session.getAttribute("defaultShipToId") != null) {
			defaultShipToId = CommonUtility.validateNumber((String) session.getAttribute("defaultShipToId"));
		}
		if (defaultBillToId == 0) {
			HashMap<String, Integer> userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(userName);
			// UsersDAO.getDefaultAddressId(userId);
			defaultBillToId = userAddressId.get("Bill");
			// defaultShipToId = userAddressId.get("Ship");
		}
		HashMap<String, UsersModel> userAddress = usersObj.getUserAddressFromBCAddressBook(defaultBillToId,
				defaultShipToId);
		// UsersDAO.getUserAddress(userId, defaultBillToId, defaultShipToId);
		billAddress = userAddress.get("Bill");

		if (billAddress.getLastName() != null) {
			ccLastName = billAddress.getLastName();
		} else {
			ccLastName = ".";
		}
		if (billAddress.getZipCodeStringFormat() != null) {
			ccZipCode = billAddress.getZipCodeStringFormat();
		} else {
			ccZipCode = "11111";
		}
		if (billAddress.getAddress2() != null) {
			ccAddress2 = billAddress.getAddress2();
		} else {
			ccAddress2 = ".";
		}

		String invoiceNo[] = request.getParameterValues("invoiceNo");
		if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("P21_CREDIT_CARD_TYPES"))
				.equalsIgnoreCase("Y")) {
			if (!CommonUtility.validateString(ccType).equalsIgnoreCase("")) {
				List<CustomTable> creditCardType = CIMM2VelocityTool.getInstance().getCusomTableData("Website",
						"CREDIT_CARD_TYPE");
				String credictCardCode = CIMM2VelocityTool.getInstance().getCreditCardCode(creditCardType, ccType);
				if (credictCardCode != null) {
					ccTypeCode = credictCardCode;
				}
			}
		}

		String fileContentARH = "";
		String fileContentARL = "";
		String fileContentARR = "";
		String fileContentARC = "";
		PrintWriter pw = null;
		try {
			SimpleDateFormat format = new SimpleDateFormat("yyMMdd");
			SimpleDateFormat formatDate = new SimpleDateFormat("MM/dd/yyyy");
			SimpleDateFormat formatCurrentDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss:ms");
			Date date = new Date();
			long startTime = System.currentTimeMillis();
			String currentDate = format.format(date);
			String formatedCurrentDate = formatCurrentDate.format(date);
			String savePath = CommonDBQuery.getSystemParamtersList().get("FILES_SAVE_PATH");// "D:/Invoices/";
			String fileNameARH = CommonDBQuery.getSystemParamtersList().get("SAVE_FILE_NAME_ARH");
			String fileNameARL = CommonDBQuery.getSystemParamtersList().get("SAVE_FILE_NAME_ARL");
			String fileNameARR = CommonDBQuery.getSystemParamtersList().get("SAVE_FILE_NAME_ARR");
			String fileNameARC = CommonDBQuery.getSystemParamtersList().get("SAVE_FILE_NAME_ARC");
			String fileFormat = CommonDBQuery.getSystemParamtersList().get("SAVE_FILE_TYPE");
			String applicationID = CommonDBQuery.getSystemParamtersList().get("TRANS_APPLICATION_ID");
			String ccPayDate = formatDate.format(date);

			String dumpFileARH = fileNameARH + sequenceId + fileFormat;
			String dumpFileARL = fileNameARL + sequenceId + fileFormat;
			String dumpFileARR = fileNameARR + sequenceId + fileFormat;
			String dumpFileARC = fileNameARC + sequenceId + fileFormat;

			System.out.println("savePath : " + savePath + "dumpFileARH :" + dumpFileARH);
			double invoiceApprovedTotalAmount = 0.0;

			if (invoiceNo != null && invoiceNo.length > 0) {

				for (String invNumDetail : invoiceNo) {

					System.out.println("invNumDetail" + invNumDetail);
					System.out.println("selectedinvoiNo" + selectedinvoiNo);
					if ((selectedinvoiceNo != null && count < selectedinvoiceNo.length
							&& CommonUtility.validateString(selectedinvoiceNo[count])
									.equalsIgnoreCase(CommonUtility.validateString(invNumDetail)))
							|| selectedinvoiNo.equalsIgnoreCase(invNumDetail)) {
						System.out.println("first loop entered");
						String invoiceApprovedAmount = request.getParameter("invoicetotal_" + invNumDetail);
						invoiceApprovedTotalAmount = invoiceApprovedTotalAmount
								+ CommonUtility.validateDoubleNumber(invoiceApprovedAmount);

						if (count > 0) {
							fileContentARL = fileContentARL + "\r\n" + setNo + "\t" + invNumDetail + "\t" + CompanyId
									+ "\t" + invoiceApprovedAmount + "\t" + termsAmount + "\t" + "\t" + "\t" + 0 + "\t"
									+ "N" + "\t" + formatedCurrentDate + "\t" + formatedCurrentDate + "\t" + "estore";
						} else {
							fileContentARL = setNo + "\t" + invNumDetail + "\t" + CompanyId + "\t"
									+ invoiceApprovedAmount + "\t" + termsAmount + "\t" + "\t" + "\t" + 0 + "\t" + "N"
									+ "\t" + formatedCurrentDate + "\t" + formatedCurrentDate + "\t" + "estore";
						}
						count++;
					}
				}
				fileContentARH = fileContentARH + setNo + "\t" + ccTypeCode + "\t" + "\t" + ccPayDate + "\t"
						+ invoiceApprovedTotalAmount + "\t" + termsAmount + "\t" + "\t" + "\t" + ccNumber + "\t"
						+ cardExpDate + "\t" + "\t" + "\t" + "\t" + ccPayDate + "\t" + ccApprovalNo + "\t" + "\t"
						+ sequenceId + "\t" + "\t" + applicationID + "\t" + "\t" + 0 + "\t" + "\t" + "N" + "\t"
						+ formatedCurrentDate + "\t" + formatedCurrentDate + "\t" + "estore" + "\t" + 0 + "\t" + "\t"
						+ "\t" + "\t" + "\t" + "\t" + 1587 + "\t" + "\t" + "\t" + "0";
				fileContentARC = fileContentARC + setNo + "\t" + ccNumber + "\t" + billAddress.getFirstName().trim()
						+ "\t" + ccLastName.trim() + "\t" + billAddress.getAddress1().trim() + "\t" + ccAddress2.trim()
						+ "\t" + billAddress.getCity().trim() + "\t" + billAddress.getState().trim() + "\t" + ccZipCode
						+ "\t" + "\t" + transactionID + "\t" + ccTransactionId + "\t" + "\t" + "\t" + "\t" + "\t" + "\t"
						+ "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "ESTORE" + "\t" + "\t" + "estore" + "\t" + "\t"
						+ "\t" + "\t" + "\t" + 0 + "\t" + "\t" + "\t" + "N" + "\t" + "N" + "\t" + "\t" + "N" + "\t"
						+ "N" + "\t" + "Ecommerce" + "\t" + "N" + "\t" + "Y" + "\t" + 920;
				fileContentARR = fileContentARR + setNo + "\t" + CompanyId + "\t" + remitterId + "\t" + ccPayDate + "\t"
						+ "\t" + "Y" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "\t" + "N" + "\t"
						+ formatedCurrentDate + "\t" + formatedCurrentDate + "\t" + "estore" + "\t" + "\t" + "N";

			}
			session.removeAttribute("selectedinvoiceNo");
			System.out.println("fileContentARH : " + fileContentARH);
			System.out.println("fileContentARC : " + fileContentARC);
			System.out.println("fileContentARL : " + fileContentARL);
			System.out.println("fileContentARR : " + fileContentARR);

			String fileNameGen = savePath + dumpFileARH;

			System.out.println("fileNameGen : " + fileNameGen);

			File ARH = new File(fileNameGen);
			if (!ARH.exists()) {
				ARH.createNewFile();
				System.out.println("File Do not exist and Created Now");
			}
			System.out.println("FileName Generated:" + fileNameGen);
			FileWriter flWriter = new FileWriter(ARH, true);
			pw = new PrintWriter(flWriter);
			pw.print(fileContentARH);
			pw.flush();
			ConnectionManager.closeFileWriter(flWriter);
			System.out.println("Files ARH saved in server");

			// ARL
			fileNameGen = savePath + dumpFileARL;
			File ARL = new File(fileNameGen);
			if (!ARL.exists()) {
				ARL.createNewFile();
				System.out.println("File Do not exist and Created Now");
			}
			System.out.println("FileName Generated:" + fileNameGen);
			flWriter = new FileWriter(ARL, true);
			pw = new PrintWriter(flWriter);
			pw.print(fileContentARL);
			pw.flush();
			ConnectionManager.closeFileWriter(flWriter);
			System.out.println("Files ARL saved in server");
			// ARR
			fileNameGen = savePath + dumpFileARR;
			File ARR = new File(fileNameGen);
			if (!ARR.exists()) {
				ARR.createNewFile();
				System.out.println("File Do not exist and Created Now");
			}
			System.out.println("FileName Generated:" + fileNameGen);
			flWriter = new FileWriter(ARR, true);
			pw = new PrintWriter(flWriter);
			pw.print(fileContentARR);
			pw.flush();
			ConnectionManager.closeFileWriter(flWriter);
			System.out.println("Files ARR saved in server");
			// ARC
			fileNameGen = savePath + dumpFileARC;
			File ARC = new File(fileNameGen);
			if (!ARC.exists()) {
				ARC.createNewFile();
				System.out.println("File Do not exist and Created Now");
			}
			System.out.println("FileName Generated:" + fileNameGen);
			flWriter = new FileWriter(ARC, true);
			pw = new PrintWriter(flWriter);
			pw.print(fileContentARC);
			pw.flush();
			ConnectionManager.closeFileWriter(flWriter);
			System.out.println("Files ARC saved in server");

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (pw != null)
				pw.close();
		}

	}

	public String guestCheckout() {
		try {
			Gson gson = new Gson();
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			UsersAction LoadShipvia = new UsersAction();
			LoadShipvia.loadShipDetailsForUser();
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			/*
			 * String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			 * String tempSubset = (String) session.getAttribute("userSubsetId");
			 * contentObject.put("subsetId", tempSubset);
			 * contentObject.put("generalsubsetId", tempGeneralSubset);
			 * if(CommonDBQuery.getSystemParamtersList().get("ENABLE_GUIDED_CHECKOUT")!=null
			 * &&
			 * CommonDBQuery.getSystemParamtersList().get("ENABLE_GUIDED_CHECKOUT").trim().
			 * equalsIgnoreCase("Y")){ contentObject =
			 * ProductsDAO.getShoppingCartDao(session, contentObject);
			 * contentObject.put("itemLevelShipSelected",
			 * contentObject.get("productListData")); }
			 * contentObject.put("itemAvailabilityStatus", itemAvailabilityStatus);
			 */
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			String tempSubset = (String) session.getAttribute("userSubsetId");
			contentObject.put("subsetId", tempSubset);
			contentObject.put("generalsubsetId", tempGeneralSubset);
			if (CommonDBQuery.getSystemParamtersList().get("ENABLE_GUIDED_CHECKOUT") != null && CommonDBQuery
					.getSystemParamtersList().get("ENABLE_GUIDED_CHECKOUT").trim().equalsIgnoreCase("Y")) {
				contentObject = ProductsDAO.getShoppingCartDao(session, contentObject);
				contentObject.put("productListData", contentObject.get("productListData"));
				contentObject.put("checkoutType", (String) request.getParameter("checkoutType"));
				contentObject.put("cardDetails", cardDetails);
				if (isReOrder != null && isReOrder.trim().equalsIgnoreCase("Y")) {
					contentObject = ProductsDAO.getQuoteCartDao(session, contentObject);
					contentObject.put("reorderProductListData", contentObject.get("productListData"));
				}
			}

			if (CommonDBQuery.getSystemParamtersList().get("FETCH_WAREHOUSES_IN_SHOPPING_CART") != null
					&& CommonDBQuery.getSystemParamtersList().get("FETCH_WAREHOUSES_IN_SHOPPING_CART").equals("Y")) {
				List<WarehouseModel> wareHouses = UsersDAO.getWareHouses();
				if (CommonUtility.customServiceUtility() != null
						&& CommonUtility.customServiceUtility().getGroupedWareHouses() != null) {
					wareHouses = CommonUtility.customServiceUtility().getGroupedWareHouses();
				}
				contentObject.put("wareHouses", wareHouses);
				contentObject.put("wareHousesAsJson", gson.toJson(wareHouses));
			}
			contentObject.put("auEmail", auEmail);
			contentObject.put("SiteShipViaList", CommonDBQuery.getSiteShipViaList());
			contentObject = CommonUtility.loadCenPOSParams(contentObject);
			renderContent = LayoutGenerator.templateLoader("GuestCheckoutPage", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String guestConfirmOrder() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			double totalCartFrieghtCharges = 0.0;
			UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
			String auUser = (String) session.getAttribute("auUserLogin");
			String wareHousecode = (String) session.getAttribute("wareHouseCode");
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			String discountValue = (String) session.getAttribute("discountValueToERP");
			String discountType = (String) session.getAttribute("discountType");
			String reqApprType = (String) request.getParameter("reqTypeCode");
			List<Discount> appliedlDiscounts = new ArrayList<Discount>();
			double orderItemsDiscountVal = 0.0D;
			double orderDiscountVal = 0.0D;
			double totalSavingOnOrder = 0.0D;
			String discountAvailed = "no";
			String freeShipping = "no";
			String customParameter = "";
			ArrayList<String> invalidCoupons = new ArrayList<String>();
			String selectedShipViaWL = "";
			String orderType = "";
			String erpOverrideFlag = CommonUtility.validateString(request.getParameter("erpOverrideFlag"));
			String extraParam = CommonUtility.validateString(request.getParameter("extraParam"));

			if (CommonUtility.validateString(request.getParameter("pickUpWareHouseCode")).length() > 0) {
				wareHousecode = CommonUtility.validateString(request.getParameter("pickUpWareHouseCode"));
			}
			if (CommonUtility.validateString(request.getParameter("selectedShipViaWL")).length() > 0) {
				selectedShipViaWL = CommonUtility.validateString(request.getParameter("selectedShipViaWL"));
			}
			if (CommonUtility.validateString(request.getParameter("orderingType")).length() > 0) {
				orderType = CommonUtility.validateString(request.getParameter("orderingType"));
			}
			int shipViaServiceCode = 0;
			if (!CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
					.equalsIgnoreCase("Y") && CommonUtility.validateString(selectedShipViaWL).length() < 1) {
				selectedShipViaWL = (String) request.getParameter("selectedShipViaAnonymousUser");
				userDetail.setShipVia(selectedShipViaWL);
			} else {
				userDetail.setShipVia(selectedShipViaWL);
			}
			if (cardHolder != null && cardHolder.length() > 0) {
				userDetail.setCardHolder(CommonUtility.validateString(cardHolder));
			}
			if (streetAddress != null && streetAddress.length() > 0) {
				userDetail.setStreetAddress(CommonUtility.validateString(streetAddress));
			}
			if (postalCode != null && postalCode.length() > 0) {
				userDetail.setPostalCode(CommonUtility.validateString(postalCode));
			}
			if (orderedBy != null && orderedBy.length() > 0) {
				userDetail.setOrderedBy(CommonUtility.validateString(orderedBy));
			}
			if (shippingInstruction != null && shippingInstruction.length() > 0) {
				userDetail.setShippingInstruction(CommonUtility.validateString(shippingInstruction));
			}
			if (CommonUtility.validateString(orderType).length() > 0) {
				userDetail.setOrderType(CommonUtility.validateString(orderType));
			}
			userDetail.setReqDate(
					CommonUtility.validateString(reqDate).length() > 0 ? CommonUtility.validateString(reqDate) : "");
			if (CommonUtility.validateString(reqApprType).equalsIgnoreCase("cod")) {
				userDetail.setOrderedBy(orderedBy);
				userDetail.setPobox(poNumber);
				userDetail.setPoNumber(poNumber);
				userDetail.setReqDate(reqDate);
				userDetail.setEmailAddress(email);
				userDetail.setShippingInstruction(shippingInstruction);
				userDetail.setOrderNotes(orderNotes);
			}

			UsersModel billAddress = new UsersModel();
			billAddress.setFirstName(userDetail.getBillAddress().getFirstName());
			billAddress.setLastName(userDetail.getBillAddress().getLastName());
			billAddress.setAddress1(userDetail.getBillAddress().getAddress1());
			billAddress.setAddress2(userDetail.getBillAddress().getAddress2());
			billAddress.setCity(userDetail.getBillAddress().getCity());
			billAddress.setState(userDetail.getBillAddress().getState());
			billAddress.setZipCodeStringFormat(userDetail.getBillAddress().getZipCode());
			billAddress.setZipCode(userDetail.getBillAddress().getZipCode());
			billAddress.setCountry(userDetail.getBillAddress().getCountry());
			billAddress.setPhoneNo(userDetail.getBillAddress().getPhoneNo());
			billAddress.setCompanyName(userDetail.getBillAddress().getCompanyName());
			billAddress.setCustomerName(userDetail.getBillAddress().getCompanyName());
			billAddress.setEmailAddress(userDetail.getUserName());
			billAddress.setEntityId(CommonUtility.validateString(userDetail.getBillAddress().getEntityId()));
			billAddress.setEntityName(userDetail.getBillAddress().getCompanyName());
			billAddress.setUserToken(userDetail.getUserToken());
			billAddress.setUserId(userDetail.getUserId());
			billAddress.setSession(session);
			billAddress.setAddressBookId(userDetail.getBillAddress().getAddressBookId());
			billAddress.setErpOverrideFlag(erpOverrideFlag);
			billAddress.setExtraParam(extraParam);

			UsersModel shipAddress = new UsersModel();
			shipAddress.setShipToId(userDetail.getShipAddress().getShipToId());
			shipAddress.setFirstName(userDetail.getShipAddress().getFirstName());
			shipAddress.setLastName(userDetail.getShipAddress().getLastName());
			shipAddress.setCompanyName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setCustomerName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setAddress1(userDetail.getShipAddress().getAddress1());
			shipAddress.setAddress2(userDetail.getShipAddress().getAddress2());
			shipAddress.setCity(userDetail.getShipAddress().getCity());
			shipAddress.setState(userDetail.getShipAddress().getState());
			shipAddress.setZipCodeStringFormat(userDetail.getShipAddress().getZipCode());
			shipAddress.setZipCode(userDetail.getShipAddress().getZipCode());
			shipAddress.setCountry(userDetail.getShipAddress().getCountry());
			shipAddress.setPhoneNo(userDetail.getShipAddress().getPhoneNo());
			shipAddress.setOrderNotes(userDetail.getOrderNotes());
			shipAddress.setShippingInstruction(userDetail.getShippingInstruction());
			shipAddress.setEntityId(CommonUtility.validateString(userDetail.getShipAddress().getEntityId()));
			shipAddress.setEntityName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setUserToken(userDetail.getUserToken());
			shipAddress.setEmailAddress(userDetail.getUserName());
			shipAddress.setUserId(userDetail.getUserId());
			shipAddress.setSession(session);
			shipAddress.setAddressBookId(userDetail.getShipAddress().getAddressBookId());

			UserManagement userUpdate = new UserManagementImpl();
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("UPDATE_CUSTOMER_API"))
					.length() > 0) {
				userUpdate.editBillingAddress(billAddress);
			}
			userUpdate.editShippingAddress(shipAddress);

			if (!CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
					.equalsIgnoreCase("Y")) {
				ArrayList<ShipVia> customerShipViaListArray = (ArrayList<ShipVia>) session
						.getAttribute("customerShipViaList");
				LinkedHashMap<String, String> shipViaMap = new LinkedHashMap<String, String>();
				if (customerShipViaListArray != null && customerShipViaListArray.size() > 0) {
					for (ShipVia shipVia : customerShipViaListArray) {
						shipViaMap.put(shipVia.getShipViaID().trim().toUpperCase(), shipVia.getDescription());
						if (shipVia != null) {
							if (CommonUtility.validateString(shipVia.getShipCode())
									.equalsIgnoreCase(selectedShipViaWL)) {
								shipViaServiceCode = shipVia.getServiceCode();
							} else if (CommonUtility.validateString(shipVia.getShipViaID())
									.equalsIgnoreCase(selectedShipViaWL)) {
								shipViaServiceCode = shipVia.getServiceCode();
							}
						}
					}
				}
				userDetail.setShipViaDescription(shipViaMap.get(selectedShipViaWL));
			} else {
				selectedShipViaWL = CommonUtility.validateString(request.getParameter("shipViaDisplay"));
				shipViaServiceCode = CommonUtility.validateNumber(request.getParameter("serviceCode"));
			}
			double total = 0;
			double subTotal = 0;
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);

			if (ProductsDAO
					.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
				generalSubset = ProductsDAO
						.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
			}

			LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
			cartListData = new ArrayList<ProductsModel>();
			if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
				cartListData = SalesDAO.getOrderDetails(1, 1, userDetail.getSubsetId(), generalSubset, session,
						"auConfirmOrder");
				if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
						.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
					ArrayList<Integer> itemList = new ArrayList<Integer>();
					if (cartListData != null && cartListData.size() > 0) {
						for (ProductsModel pModel : cartListData) {
							itemList.add(pModel.getItemId());
						}
					}
					customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(userDetail.getSubsetId(),
							generalSubset, StringUtils.join(itemList, " OR "), "itemid");
				}

				for (ProductsModel itemPrice : cartListData) {
					total = itemPrice.getCartTotal();
					subTotal = itemPrice.getCartTotal();
					break;
				}
			}
			/*
			 * if(CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get(
			 * "GET_UPS_FRIEGHT_CHARGES")).equalsIgnoreCase("Y") &&
			 * CommonUtility.validateString(selectedShipViaWL).toUpperCase(Locale.US).
			 * contains("UPS")){ UsersModel shippingAdress = new UsersModel();
			 * shippingAdress.setShipToName(userDetail.getShipAddress().getShipToName());
			 * shippingAdress.setPhoneNo(userDetail.getShipAddress().getPhoneNo());
			 * shippingAdress.setAddress1(userDetail.getShipAddress().getAddress1());
			 * shippingAdress.setCity(userDetail.getShipAddress().getCity());
			 * shippingAdress.setState(userDetail.getShipAddress().getState());
			 * shippingAdress.setZipCodeStringFormat(userDetail.getShipAddress().getZipCode(
			 * )); shippingAdress.setCountry(userDetail.getShipAddress().getCountry());
			 * double totalCartFrieght= SalesDAO.getTotalCartWeight(cartListData);
			 * WarehouseModel wareHouseDetail = new WarehouseModel();
			 * if(CommonUtility.validateString(userDetail.getBranchID()).length()>0){
			 * wareHouseDetail =
			 * UsersDAO.getWareHouseDetailsByCode(CommonUtility.validateString(userDetail.
			 * getBranchID())); totalCartFrieghtCharges =
			 * UpsCarrier.getUPSFreightCharges(totalCartFrieght,wareHouseDetail,
			 * shippingAdress,shipViaServiceCode); }else{ wareHouseDetail =
			 * UsersDAO.getWareHouseDetailsByCode(wareHousecode); totalCartFrieghtCharges =
			 * UpsCarrier.getUPSFreightCharges(totalCartFrieght,wareHouseDetail,
			 * shippingAdress,shipViaServiceCode); } total = total +
			 * totalCartFrieghtCharges; }
			 */
			String shipViaServiceName = "UPS";
			if (CommonUtility.validateString(LayoutLoader.getMessageProperties()
					.get(session.getAttribute("localeCode").toString().toUpperCase()).getProperty("ups.service.name"))
					.length() > 0
					&& selectedShipViaWL.toUpperCase(Locale.US)
							.contains(LayoutLoader.getMessageProperties()
									.get(session.getAttribute("localeCode").toString().toUpperCase())
									.getProperty("ups.service.name"))) {
				shipViaServiceName = CommonUtility.validateString(LayoutLoader.getMessageProperties()
						.get(session.getAttribute("localeCode").toString().toUpperCase())
						.getProperty("ups.service.name"));
			} else if (CommonUtility
					.validateString(LayoutLoader.getMessageProperties()
							.get(session.getAttribute("localeCode").toString().toUpperCase())
							.getProperty("ups.service.addon.name"))
					.length() > 0
					&& selectedShipViaWL.toUpperCase(Locale.US)
							.contains(LayoutLoader.getMessageProperties()
									.get(session.getAttribute("localeCode").toString().toUpperCase())
									.getProperty("ups.service.addon.name"))) {
				shipViaServiceName = CommonUtility.validateString(LayoutLoader.getMessageProperties()
						.get(session.getAttribute("localeCode").toString().toUpperCase())
						.getProperty("ups.service.addon.name"));
			}
			String erp = "defaults";

			if (session != null
					&& CommonUtility.validateString((String) session.getAttribute("erpType")).length() > 0) {
				erp = CommonUtility.validateString((String) session.getAttribute("erpType"));
			}
			ErpType erpType = CimmUtil.getErpType(erp);
			WarehouseModel wareHouseDetail = new WarehouseModel();

			double totalCartFreight = SalesDAO.getTotalCartWeight(cartListData);
			wareHouseDetail = UsersDAO.getWareHouseDetailsByCode(wareHousecode);
			SalesModel freightParameters = new SalesModel();
			freightParameters.setShippingAddress(shipAddress);
			freightParameters.setWareHouseDetails(wareHouseDetail);
			freightParameters.setTotalCartFrieght(totalCartFreight);
			freightParameters.setShipViaServiceCode(CommonUtility.validateParseIntegerToString(shipViaServiceCode));
			freightParameters.setShipViaMethod(userDetail.getShipViaDescription() != null
					? CommonUtility.validateString(userDetail.getShipViaDescription())
					: shipViaServiceName);
			freightParameters.setShipViaServiceName(shipViaServiceName);
			freightParameters.setShipViaDescription(shipVia);
			freightParameters.setCartData(cartListData);

			if (!CommonUtility.validateString(erp).equalsIgnoreCase("eclipse")
					&& !CommonUtility.validateString(erp).equalsIgnoreCase("defaults")) {
				totalCartFrieghtCharges = FreightService.getFreightData(freightParameters, erpType);
				if (totalCartFrieghtCharges > 0 && CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ADDITIONAL_FREIGHT_CHARGES"))
						.length() > 0) {
					totalCartFrieghtCharges += totalCartFrieghtCharges * CommonUtility.validateDoubleNumber(
							CommonDBQuery.getSystemParamtersList().get("ADDITIONAL_FREIGHT_CHARGES"));
				}
			}
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("GET_UPS_FRIEGHT_CHARGES"))
					.equalsIgnoreCase("Y")
					&& CommonUtility.validateString(selectedShipViaWL).toUpperCase(Locale.US)
							.contains(shipViaServiceName.toUpperCase(Locale.US))) {
				UsersModel shippingAdress = new UsersModel();
				shippingAdress.setShipToName(userDetail.getShipAddress().getShipToName());
				shippingAdress.setPhoneNo(userDetail.getShipAddress().getPhoneNo());
				shippingAdress.setAddress1(userDetail.getShipAddress().getAddress1());
				shippingAdress.setCity(userDetail.getShipAddress().getCity());
				shippingAdress.setState(userDetail.getShipAddress().getState());
				shippingAdress.setZipCode(userDetail.getShipAddress().getZipCode());
				shippingAdress.setZipCodeStringFormat(userDetail.getShipAddress().getZipCode());
				if (CommonUtility.validateString(userDetail.getShipAddress().getCountry()).equalsIgnoreCase("USA")
						|| CommonUtility.validateString(userDetail.getShipAddress().getCountry()).length() == 0) {
					shippingAdress.setCountry("US");
					shippingAdress.setCountryCode("US");
				} else {
					shippingAdress.setCountry(userDetail.getShipAddress().getCountry());
					shippingAdress.setCountryCode(userDetail.getShipAddress().getCountry());
				}
				double totalCartFrieght = SalesDAO.getTotalCartWeight(cartListData);
				if (totalCartFrieght == 0.0) {
					totalCartFrieght = SalesDAO.getTotalCartWeight(cartListData);
				}

				if (CommonUtility.validateString(userDetail.getBranchID()).length() > 0) {
					wareHouseDetail = UsersDAO
							.getWareHouseDetailsByCode(CommonUtility.validateString(userDetail.getBranchID()));
					// totalCartFrieghtCharges = new
					// UpsFreightService().getFreightCharges(shippingAdress, wareHouseDetail,
					// totalCartFrieght,
					// CommonUtility.validateParseIntegerToString(shipViaServiceCode),selectedShipViaWL,total);
				} else {
					wareHouseDetail = UsersDAO.getWareHouseDetailsByCode(wareHousecode);
					// totalCartFrieghtCharges = new
					// UpsFreightService().getFreightCharges(shippingAdress, wareHouseDetail,
					// totalCartFrieght,
					// CommonUtility.validateParseIntegerToString(shipViaServiceCode),selectedShipViaWL,total);
				}
				double thresholdWeightLimit = CommonUtility.validateDoubleNumber(
						CommonDBQuery.getSystemParamtersList().get("MAXIMUM_CARTWEIGHT_FOR_SHIPPING"));
				if (totalCartFrieght <= thresholdWeightLimit) {
					totalCartFrieghtCharges = new UpsFreightService().getFreightCharges(shippingAdress, wareHouseDetail,
							totalCartFrieght, CommonUtility.validateParseIntegerToString(shipViaServiceCode),
							selectedShipViaWL);
				} else {
					int multiple = (int) (totalCartFrieght / thresholdWeightLimit);
					double balanceweight = totalCartFrieght - (thresholdWeightLimit * multiple);
					totalCartFrieghtCharges = new UpsFreightService().getFreightCharges(shippingAdress, wareHouseDetail,
							thresholdWeightLimit, CommonUtility.validateParseIntegerToString(shipViaServiceCode),
							selectedShipViaWL);
					if (balanceweight > 0) {
						totalCartFrieghtCharges += new UpsFreightService().getFreightCharges(shippingAdress,
								wareHouseDetail, balanceweight,
								CommonUtility.validateParseIntegerToString(shipViaServiceCode), selectedShipViaWL);
					}
				}
				if (totalCartFrieghtCharges > 0 && CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ADDITIONAL_FREIGHT_CHARGES"))
						.length() > 0) {
					totalCartFrieghtCharges += totalCartFrieghtCharges * CommonUtility.validateDoubleNumber(
							CommonDBQuery.getSystemParamtersList().get("ADDITIONAL_FREIGHT_CHARGES"));
				}
				total = total + totalCartFrieghtCharges;
			}

			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("GET_FEDEX_FRIEGHT_CHARGES"))
					.equalsIgnoreCase("Y")
					&& CommonUtility.validateString(selectedShipViaWL).toUpperCase(Locale.US).contains("FED")) {
				UsersModel shippingAdress = new UsersModel();
				shippingAdress.setShipToName(userDetail.getShipAddress().getShipToName());
				shippingAdress.setPhoneNo(userDetail.getShipAddress().getPhoneNo());
				shippingAdress.setAddress1(userDetail.getShipAddress().getAddress1());
				shippingAdress.setCity(userDetail.getShipAddress().getCity());
				shippingAdress.setState(userDetail.getShipAddress().getState());
				shippingAdress.setZipCodeStringFormat(userDetail.getShipAddress().getZipCode());
				shippingAdress.setCountry(userDetail.getShipAddress().getCountry());
				ProductsModel totalCartDimensions = new ProductsModel();
				totalCartDimensions = SalesDAO.getTotalDimensions(cartListData);
				double totalCartWeight = SalesDAO.getTotalCartWeight(cartListData);
				int totalCartLength = (int) totalCartDimensions.getLength();
				int totalCartHeight = (int) totalCartDimensions.getHeight();
				int totalCartWidth = (int) totalCartDimensions.getWidth();
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ERP"))
						.equalsIgnoreCase("eclipse")) {
					wareHousecode = (String) session.getAttribute("homeBranchId");
				}
				wareHouseDetail = UsersDAO.getWareHouseDetailsByCode(wareHousecode);
				totalCartFrieghtCharges = RateWebServiceClient.getFedExFreightCharges(totalCartWeight, totalCartLength,
						totalCartHeight, totalCartWidth, wareHouseDetail, shippingAdress,
						CommonUtility.validateString(selectedShipViaWL));
				total = total + totalCartFrieghtCharges;

			}
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("IS_DISCOUNT_COUPONS_ENABLED"))
					.equalsIgnoreCase("Y")) {
				Cart cart = null;
				if (cartListData != null && cartListData.size() > 0) {
					// removing old discount calculation if any from session
					clearSavedDiscounts(session);
					cart = new Cart();
					cart.setCustomerName(userDetail.getCustomerName());
					cart.setUserId(userDetail.getUserId());
					cart.setBuyingCompanyId(userDetail.getBuyingCompanyId());
					cart.setUserName(userDetail.getUserName());
					cart.setWebsite(userDetail.getWebsite());
					LinkedHashMap<String, String> userCustomFieldValue = (LinkedHashMap<String, String>) session
							.getAttribute("userCustomFieldValue");
					if (userCustomFieldValue != null && CommonUtility
							.validateString(userCustomFieldValue.get("USER_LEVEL_COUPON_GROUPS")).length() > 0) {
						cart.setUserGroupName(userCustomFieldValue.get("USER_LEVEL_COUPON_GROUPS"));
					}
					LinkedHashMap<String, String> customerCustomFieldValue = (LinkedHashMap<String, String>) session
							.getAttribute("customerCustomFieldValue");
					if (customerCustomFieldValue != null && CommonUtility
							.validateString(userCustomFieldValue.get("CUSTOMER_COUPON_GROUP")).length() > 0) {
						cart.setCustomerGroupName(customerCustomFieldValue.get("CUSTOMER_COUPON_GROUP"));
					}
					if (session.getAttribute("wareHouseName") != null) {
						cart.setWareHouseName((String) session.getAttribute("wareHouseName"));
					}
					for (ProductsModel cartItem : cartListData) {
						LineItem lineItem = new LineItem();
						lineItem.setLineItemId(cartItem.getProductListId());
						lineItem.setPartNumber(cartItem.getPartNumber());
						lineItem.setOrderQuantity(cartItem.getQty());
						lineItem.setPrice((float) cartItem.getPrice());
						lineItem.setExtendedPrice((float) cartItem.getTotal());
						if (cartItem.getItemId() != CommonUtility.validateNumber(
								CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
							if (cartItem.getCustomFieldVal() != null && cartItem.getCustomFieldVal().size() > 0
									&& cartItem.getCustomFieldVal().get("custom_ITEM_LEVEL_COUPON_GROUPS") != null
									&& CommonUtility.validateString((String) cartItem.getCustomFieldVal()
											.get("custom_ITEM_LEVEL_COUPON_GROUPS")).length() > 0) {
								lineItem.setItemGroupName(
										(String) cartItem.getCustomFieldVal().get("custom_ITEM_LEVEL_COUPON_GROUPS"));
							}
						}
						if (CommonUtility.validateString(userDetail.getWareHouseCodeStr()).length() > 0) {
							lineItem.setWareHouseName(userDetail.getWareHouseName());
						}
						cart.getLineItems().add(lineItem);
					}
					try {
						SalesPromotionService promotionService = SalesPromotionService.getInstance();

						List<Coupon> couponsList = new ArrayList<Coupon>();

						if (discountCoupons == null) {
							Coupon coupon = new Coupon();
							coupon.setCopounCode("zzzzzzzz");
							couponsList.add(coupon);
						} else {
							for (String couponCode : discountCoupons.split(",")) {
								Coupon coupon = new Coupon();
								coupon.setCopounCode(couponCode);
								couponsList.add(coupon);
							}
						}
						cart.setSelectedShipMethod(selectedShipViaWL);
						promotionService.checkDiscount(cart, couponsList);
						for (LineItem discountedLineItem : cart.getLineItems()) {
							for (ProductsModel cartItem : cartListData) {
								if (cartItem.getProductListId() == discountedLineItem.getLineItemId()) {
									cartItem.setdDiscountValue(discountedLineItem.getDiscount());
									cartItem.setTotal(discountedLineItem.getExtendedPrice());
									cartItem.setNetPrice(discountedLineItem.getNetPrice());
									if (discountedLineItem.getAvailedDiscount() != null) {
										cartItem.setPromoCode(discountedLineItem.getAvailedDiscount()
												.getDiscountCoupon().getCopounCode());
										appliedlDiscounts.add(discountedLineItem.getAvailedDiscount());
									}
									orderItemsDiscountVal += discountedLineItem.getDiscount();
								}
							}

						}
						if (cart.isItemDiscountAvailed()) {
							discountAvailed = "yes";
						}
						if (cart.getDiscount() > 0.0) {
							orderDiscountVal = cart.getDiscount();
							appliedlDiscounts.addAll(cart.getAvailedDiscounts());
							discountAvailed = "yes";
						}
						if (cart.isFreeShipping()) {
							freeShipping = "yes";
							appliedlDiscounts.add(cart.getAvailedShippingDiscount());
						}
						total = cart.getTotal();
						subTotal = cart.getTotal();
						totalSavingOnOrder = orderItemsDiscountVal + orderDiscountVal;
						// setting in session to use in save sales order
						Collection<String> appliedCouponsArray = new ArrayList<String>();
						for (Discount test : appliedlDiscounts) {
							appliedCouponsArray.add(test.getDiscountCoupon().getCopounCode());
						}
						for (Coupon enteredCoupon : couponsList) {
							if (CommonUtility.validateString(enteredCoupon.getCopounCode()).length() > 0) {
								if (appliedlDiscounts.size() > 0 && !CommonUtility
										.validateString(enteredCoupon.getCopounCode()).equals("zzzzzzzz")) {
									if (!appliedCouponsArray.contains(enteredCoupon.getCopounCode())) {
										invalidCoupons.add(enteredCoupon.getCopounCode());
									}
								} else {
									if (!CommonUtility.validateString(enteredCoupon.getCopounCode())
											.equals("zzzzzzzz")) {
										invalidCoupons.add(enteredCoupon.getCopounCode());
									}
								}
							}
						}
						session.setAttribute("availedDiscounts", cart);
						session.setAttribute("appliedDiscountCoupons", appliedlDiscounts);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			}
			FreightCalculatorModel freightValue = null;
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
					.equalsIgnoreCase("SHIPVIA_COST_TABLE")
					&& session.getAttribute("customerShipViaListJson") != null) {
				String shipCostTableJasonString = CommonUtility
						.validateString((String) session.getAttribute("customerShipViaListJson"));
				Gson gson = new Gson();
				// LinkedList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
				// new TypeToken<List<ShipVia>>(){}.getType());
				ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
						new TypeToken<List<ShipVia>>() {
						}.getType());
				if (shipCostTable != null && !shipCostTable.isEmpty()) {

					if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
						session.removeAttribute("selectedShipCodeOption");
					} else {
						if (session.getAttribute("selectedShipCodeOption") != null)
							selectedShipCodeOption = CommonUtility
									.validateString(session.getAttribute("selectedShipCodeOption").toString());
					}
					if (shipCostTable != null && !shipCostTable.isEmpty()) {
						if (freeShipping.equalsIgnoreCase("no")) {
							for (ShipVia shipViaObj : shipCostTable) {
								if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
									if (shipViaObj.getShipCode().equalsIgnoreCase(selectedShipCodeOption)) {
										freightValue = new FreightCalculatorModel();
										freightValue.setFreightValue(shipViaObj.getShipCost());
										session.setAttribute("selectedShipCodeOption", selectedShipCodeOption);
										break;
									}
								} else {
									if (shipViaObj.getShipViaID().equalsIgnoreCase(selectedShipViaWL)) {
										freightValue = new FreightCalculatorModel();
										freightValue.setFreightValue(shipViaObj.getShipCost());
										break;
									}
								}
							}
						}
					}

					/*
					 * if(shipCostTable!=null && !shipCostTable.isEmpty()){ for (ShipVia shipViaObj
					 * : shipCostTable) {
					 * if(shipViaObj.getShipViaID().equalsIgnoreCase(selectedShipViaWL)){
					 * freightValue = new FreightCalculatorModel();
					 * freightValue.setFreightValue(shipViaObj.getShipCost()); break; } } }
					 */
				}
				if (freightValue != null) {
					total = total + freightValue.getFreightValue();
				}
			} else {
				FreightCalculatorModel freightInput = new FreightCalculatorModel();
				freightInput.setCartTotal(total);
				freightInput.setCountry(userDetail.getCountry());
				freightInput.setCustomerNumber(userDetail.getUserToken());
				freightInput.setLocale(
						CommonUtility.validateString(session.getAttribute("localeCode").toString().toUpperCase()));
				freightInput.setShipVia(selectedShipViaWL);
				freightInput.setWareHouseCode(wareHousecode);
				if (shipAddress != null && session.getAttribute("defaultShipAddress") != null) {
					shipAddress = (UsersModel) session.getAttribute("defaultShipAddress");
					if (shipAddress != null && shipAddress.getState() != null
							&& shipAddress.getState().trim().length() > 0) {
						freightInput.setState(shipAddress.getState().trim());
					}
				}
				freightValue = FreightCalculator.getFreightByTotal(freightInput);
				if (freightValue != null && freightValue.getFreightValue() > 0) {
					totalCartFrieghtCharges = freightValue.getFreightValue();
					total = total + freightValue.getFreightValue();
				}
			}
			double taxFromErp = 0;
			LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();
			SalesModel quoteResponse = null;
			if (!CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
					.equalsIgnoreCase("SO")) {
				SalesOrderManagement salesObj = new SalesOrderManagementImpl();

				defaultBillToId = CommonUtility.validateNumber(
						CommonUtility.validateParseIntegerToString(userDetail.getBillAddress().getAddressBookId()));
				defaultShipToId = CommonUtility.validateNumber(
						CommonUtility.validateParseIntegerToString(userDetail.getShipAddress().getAddressBookId()));

				HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
						defaultShipToId);
				if (userAddress != null) {
					if (userAddress.get("Bill") != null) {
						billEntityId = userAddress.get("Bill").getEntityId();
						billAddress = userAddress.get("Bill");

					}
					if (userAddress.get("Ship") != null) {
						shipEntityId = userAddress.get("Ship").getEntityId();
						shipAddress = userAddress.get("Ship");
					}

				}
				if (CommonUtility.customServiceUtility() != null) {
					CommonUtility.customServiceUtility().overrideAuAddress(userDetail, billAddress, shipAddress);
				}
				session.setAttribute("reqDate", userDetail.getReqDate());
				createQuoteInput.put("orderedBy", userDetail.getOrderedBy());
				createQuoteInput.put("orderType", CommonUtility.validateString(userDetail.getOrderType()));
				createQuoteInput.put("itemList", cartListData);
				createQuoteInput.put("userToken", userDetail.getUserToken());
				createQuoteInput.put("shipToEntity", userDetail.getContactId());
				createQuoteInput.put("orderNotes", userDetail.getOrderNotes());
				createQuoteInput.put("shippingInstruction", userDetail.getShippingInstruction());
				createQuoteInput.put("poNumber", userDetail.getPoNumber());
				createQuoteInput.put("reqDate", reqDate);
				createQuoteInput.put("shipVia", userDetail.getShipVia());
				createQuoteInput.put("selectedShipCodeOption", selectedShipCodeOption);
				createQuoteInput.put("billAddress", billAddress);
				createQuoteInput.put("shipAddress", shipAddress);
				createQuoteInput.put("defaultBillToId", defaultBillToId);
				createQuoteInput.put("defaultShipToId", defaultShipToId);
				createQuoteInput.put("customerId", userDetail.getUserToken());
				createQuoteInput.put("wareHousecode", CommonUtility.validateString(userDetail.getWareHouseCodeStr()));
				createQuoteInput.put("customerCountry", CommonUtility.validateString(userDetail.getCountry()));
				if (shipAddress != null) {
					createQuoteInput.put("customerName", CommonUtility.validateString(shipAddress.getCustomerName()));
				}
				createQuoteInput.put("customerReleaseNumber", customerReleaseNumber);
				createQuoteInput.put("discountValue", discountValue);
				createQuoteInput.put("discountType", discountType);
				createQuoteInput.put("buyingCompanyId",
						CommonUtility.validateParseIntegerToString(userDetail.getBuyingCompanyId()));
				createQuoteInput.put("selectedBranch", selectedBranch);
				createQuoteInput.put("selectedWillCallBranchCode",
						CommonUtility.validateString(selectedWillCallBranchCode));
				createQuoteInput.put("orderDiscountVal", orderDiscountVal);
				createQuoteInput.put("totalCartFrieghtCharges", totalCartFrieghtCharges);
				createQuoteInput.put("handlingListItems",
						CommonUtility.validateString(LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("handlingcharge.labels")));
				createQuoteInput.put("deliveryListItems",
						CommonUtility.validateString(LayoutLoader.getMessageProperties()
								.get(session.getAttribute("localeCode").toString().toUpperCase())
								.getProperty("deliverycharge.labels")));
				if (CommonUtility.validateString((String) session.getAttribute("wareHouseCode")).length() > 0) {
					createQuoteInput.put("wareHousecode", session.getAttribute("wareHouseCode"));
				}
				if (CommonUtility.validateString(userDetail.getPoNumber()).length() > 0) {
					createQuoteInput.put("poNumber", userDetail.getPoNumber());
				} else {
					createQuoteInput.put("poNumber", "");
				}
				if (userDetail.getEmailAddress() != null && userDetail.getEmailAddress().trim().length() > 0) {
					createQuoteInput.put("userEmailAddress", userDetail.getEmailAddress());
				}
				if (userDetail.getOfficePhone() != null && userDetail.getOfficePhone().trim().length() > 0) {
					createQuoteInput.put("userOfficePhone", userDetail.getOfficePhone());
				}
				if (customFieldVal != null) {
					createQuoteInput.put("customFieldVal", customFieldVal);
				}
				if (freightValue != null) {
					createQuoteInput.put("freight", freightValue.getFreightValue());
				}
				createQuoteInput.put("creditCardValue", creditCardValue);
				createQuoteInput.put("overrideShipAddress",
						(Cimm2BCentralClient.getInstance().userModelToAddressModel(shipAddress)));
				createQuoteInput.put("userId", userId);
				createQuoteInput.put("shipViaServiceCode", shipViaServiceCode);
				if (!(CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CREATE_QUOTE_CART"))
						.equalsIgnoreCase("Y"))) {
					if (CommonUtility.customServiceUtility() != null) {
						quoteResponse = CommonUtility.customServiceUtility().createQuote(createQuoteInput);
					}
					if (quoteResponse != null) {
						session.removeAttribute("quoteResponseCimm2BCentralShipVia");
						session.setAttribute("quoteResponseCimm2BCentralShipVia",
								quoteResponse.getCimm2BCentralShipVia());
					} else {
						quoteResponse = salesObj.createQuote(createQuoteInput);
					}
					taxFromErp = quoteResponse.getTax();
					if (totalCartFrieghtCharges != 0.0 && quoteResponse.getFreight() == 0) {
						quoteResponse.setFreight(totalCartFrieghtCharges);
					}
				} else {
					LinkedHashMap<String, Object> taxOutPutFromERP = salesObj.getTaxFromERP(createQuoteInput);
					if (taxOutPutFromERP != null && !taxOutPutFromERP.isEmpty()) {
						if (taxOutPutFromERP.get("TaxInfo").getClass().equals(ProductsModel.class)) {
							ProductsModel itemTaxOutPut = (ProductsModel) taxOutPutFromERP.get("TaxInfo");
							taxFromErp = itemTaxOutPut.getSalesTax();
							session.setAttribute("taxFromSFOEOrderTotLoadV2", Double.toString(taxFromErp));
						} else if (taxOutPutFromERP.get("TaxInfo").getClass().equals(SalesModel.class)) {
							SalesModel itemTaxOutPut = (SalesModel) taxOutPutFromERP.get("TaxInfo");
							taxFromErp = itemTaxOutPut.getTax();
							if (itemTaxOutPut.getCashDiscountAmount() > 0) {
								orderDiscountVal = itemTaxOutPut.getCashDiscountAmount();
							}
						}
					}
					if (CommonUtility.customServiceUtility() != null) {// CustomServiceProvider
						taxFromErp = CommonUtility.customServiceUtility().getTaxFromCIMM(shipAddress, taxFromErp,
								subTotal);
					}
				}
			} else if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("GROUP_ORDER_ITEMS"))
					.equalsIgnoreCase("Y")) {
				/**
				 * Below code Written is for Tyndale to group items based on ship methods
				 * *Reference- Chetan Sandesh
				 */
				createQuoteInput.put("itemList", cartListData);
				if (userDetail.getPoNumber() != null
						&& CommonUtility.validateString(userDetail.getPoNumber()).length() > 0) {
					createQuoteInput.put("poNumber", userDetail.getPoNumber());
				} else {
					createQuoteInput.put("poNumber", "");
				}
				if (CommonUtility.validateString((String) session.getAttribute("wareHouseCode")).length() > 0) {
					createQuoteInput.put("wareHousecode", session.getAttribute("wareHouseCode"));
				}
				if (CommonUtility.validateString(request.getParameter("customParameter")).length() > 0) {
					customParameter = CommonUtility.validateString(request.getParameter("customParameter"));
				}

				AddressModel shippingAdress = new AddressModel();
				shippingAdress.setShipToName(userDetail.getShipAddress().getShipToName());
				shippingAdress.setPhoneNo(userDetail.getShipAddress().getPhoneNo());
				shippingAdress.setAddress1(userDetail.getShipAddress().getAddress1());
				shippingAdress.setCity(userDetail.getShipAddress().getCity());
				shippingAdress.setState(userDetail.getShipAddress().getState());
				shippingAdress.setZipCode(userDetail.getShipAddress().getZipCode());
				shippingAdress.setCountry(userDetail.getShipAddress().getCountry());
				createQuoteInput.put("overrideShipAddress", shippingAdress);
				/*
				 * customServices customService= new customServices(); taxFromErp =
				 * customService.getGroupedTaxFrom(createQuoteInput,customParameter);
				 */

				// CustomServiceProvider
				if (CommonUtility.customServiceUtility() != null) {
					taxFromErp = CommonUtility.customServiceUtility().getGroupOfTax(createQuoteInput, customParameter);
				}
				// CustomServiceProvider
			} else {
				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("TAXABLE_STATE"))
						.equalsIgnoreCase(CommonUtility.validateString(userDetail.getShipAddress().getState()))) {
					UsersModel shipAddresstoERP = new UsersModel();
					shipAddresstoERP
							.setShipToId(CommonUtility.validateString(userDetail.getShipAddress().getShipToId()));
					shipAddresstoERP
							.setAddress1(CommonUtility.validateString(userDetail.getShipAddress().getAddress1()));
					shipAddresstoERP
							.setAddress2(CommonUtility.validateString(userDetail.getShipAddress().getAddress2()));
					shipAddresstoERP.setCity(CommonUtility.validateString(userDetail.getShipAddress().getCity()));
					shipAddresstoERP.setZipCodeStringFormat(
							CommonUtility.validateString(userDetail.getShipAddress().getZipCode()));
					shipAddresstoERP.setState(CommonUtility.validateString(userDetail.getShipAddress().getState()));
					shipAddresstoERP.setCountry(CommonUtility.validateString(userDetail.getShipAddress().getCountry()));
					createQuoteInput.put("customerId", userDetail.getUserToken());
					createQuoteInput.put("wareHousecode", userDetail.getWareHouseCodeStr());
					createQuoteInput.put("itemList", cartListData);
					createQuoteInput.put("shipAddress", shipAddresstoERP);
					createQuoteInput.put("orderDiscountVal", orderDiscountVal);
					SalesOrderManagement salesObj = new SalesOrderManagementImpl();
					LinkedHashMap<String, Object> taxOutPutFromERP = salesObj.getTaxFromERP(createQuoteInput);
					if (taxOutPutFromERP != null && !taxOutPutFromERP.isEmpty()) {
						ProductsModel itemTaxOutPut = (ProductsModel) taxOutPutFromERP.get("TaxInfo");
						taxFromErp = itemTaxOutPut.getSalesTax();
					}
				}
			}
			String quoteNumber = "";
			if (quoteResponse != null) {
				quoteNumber = CommonUtility.validateString(quoteResponse.getQuoteNumber());
				if (quoteNumber != null && !quoteNumber.trim().equalsIgnoreCase("")) {
					session.setAttribute("quoteNumber", quoteNumber);
				}
				session.setAttribute("quoteResponse", quoteResponse);
			}
			System.out.println("Req Date : " + reqDate);
			if (quoteResponse != null && quoteResponse.getOtherCharges() > 0) {
				orderTotal = total + taxFromErp - orderDiscountVal + quoteResponse.getOtherCharges();
				System.out.println("Other Charges : " + quoteResponse.getOtherCharges());
			} else {
				orderTotal = total + taxFromErp - orderDiscountVal + totalCartFrieghtCharges;
			}

			if (CommonUtility.customServiceUtility() != null) {
				orderTotal = CommonUtility.customServiceUtility().dontAddFreightoTotal(subTotal, taxFromErp,
						totalCartFrieghtCharges, orderTotal);
			}
			System.out.println("OrderTotal : " + orderTotal);
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			contentObject.put("reqDate", reqDate);
			contentObject.put("quoteNumber", quoteNumber);
			session.setAttribute("auUserDetails", userDetail);// ------ New
			contentObject.put("userDetails", userDetail);
			contentObject.put("billAddress", userDetail.getBillAddress());
			contentObject.put("shipAddress", userDetail.getShipAddress());
			contentObject.put("freightValue", freightValue);
			contentObject.put("cartListData", cartListData);
			contentObject.put("reqApprType", reqApprType);
			contentObject.put("customFieldVal", customFieldVal);
			contentObject.put("subTotal", subTotal);
			contentObject.put("orderTotal", orderTotal);
			contentObject.put("selectedShipCodeOption", selectedShipCodeOption);
			contentObject.put("totalCartFrieghtCharges", totalCartFrieghtCharges);
			contentObject.put("discountType", discountType);
			contentObject.put("discountAvailed", discountAvailed);
			contentObject.put("appliedDiscountCoupons", appliedlDiscounts);
			contentObject.put("orderItemsDiscount", orderItemsDiscountVal);
			contentObject.put("orderDiscount", orderDiscountVal);
			contentObject.put("totalSavings", totalSavingOnOrder);
			contentObject.put("orderTax", taxFromErp);
			contentObject.put("invalidCoupons", StringUtils.join(invalidCoupons, ","));
			contentObject.put("quoteResponse", quoteResponse);
			contentObject.put("nickName", CommonUtility.validateString(nickName));
			contentObject.put("cardHolder", CommonUtility.validateString(cardHolder));
			contentObject.put("streetAddress", CommonUtility.validateString(streetAddress));
			contentObject.put("postalCode", CommonUtility.validateString(postalCode));
			contentObject.put("additionalName", additionalName);
			contentObject.put("additionalPickupPerson", additionalPickupPerson);
			contentObject.put("custComments", custComments);
			contentObject.put("custCommentsShipToStore", custCommentsShipToStore);
			if (CommonUtility.customServiceUtility() != null) {
				CommonUtility.customServiceUtility().setOrderValuesFromQuoteResponse(quoteResponse, contentObject);
			}
			renderContent = LayoutGenerator.templateLoader("WLConfirmOrderPage", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;

	}

	public String authorizeCreditCard() {
		try {

			request = ServletActionContext.getRequest();

			String dataDescriptor = CommonUtility.validateString(request.getParameter("dataDescriptor"));
			String dataValue = CommonUtility.validateString(request.getParameter("dataValue"));
			double amount = CommonUtility
					.validateDoubleNumber(CommonUtility.validateString(request.getParameter("amount")));
			amount = CommonUtility.validateDoubleNumber(decimal2Fmt.format(amount));
			String name = CommonUtility.validateString(request.getParameter("name"));
			AddressModel CCbillAddress = new AddressModel();
			CCbillAddress.setAddress1(CommonUtility.validateString(request.getParameter("ccAddress")));
			CCbillAddress.setCity(CommonUtility.validateString(request.getParameter("ccCity")));
			CCbillAddress.setZipCode(CommonUtility.validateString(request.getParameter("ccZipCode")));
			CCbillAddress.setState(CommonUtility.validateString(request.getParameter("ccState")));
			CCbillAddress.setCountry(CommonUtility.validateString(request.getParameter("ccCountry")));

			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();

			SalesModel salesInputParameter = new SalesModel();
			salesInputParameter.setDataDescriptor(dataDescriptor);
			salesInputParameter.setDataValue(dataValue);
			salesInputParameter.setAmount(amount);
			salesInputParameter.setName(name);
			salesInputParameter.setBillAddress(CCbillAddress);
			SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();
			System.out.println("----------------connecting to Authorize payment in CIMM2BC----------------");

			SalesModel salesOutParameter = salesOrderSubmit.AuthorizeDotNetCardAuthentication(salesInputParameter);

			if (salesOutParameter != null) {
				contentObject.put("authorizationCode",
						CommonUtility.validateString(salesOutParameter.getAuthorizationCode()));
				contentObject.put("avsResultCode", CommonUtility.validateString(salesOutParameter.getAvsResultCode()));
				contentObject.put("cvvResultCode", CommonUtility.validateString(salesOutParameter.getCvvResultCode()));
				contentObject.put("cavvResultCode",
						CommonUtility.validateString(salesOutParameter.getCavvResultCode()));
				contentObject.put("transactionId", CommonUtility.validateString(salesOutParameter.getTransactionId()));
				contentObject.put("transactionHash",
						CommonUtility.validateString(salesOutParameter.getTransactionHash()));
				contentObject.put("transactionHash",
						CommonUtility.validateString(salesOutParameter.getTransactionHash()));
				contentObject.put("paymentStatus", CommonUtility.validateString(salesOutParameter.getPaymentStatus()));
				contentObject.put("description", CommonUtility.validateString(salesOutParameter.getDescription()));
			} else {
				salesOutParameter = new SalesModel();
				salesOutParameter.setTransactionId("");// Payment process Failed
				contentObject.put("transactionId", "");// Payment process Failed
			}
			contentObject.put("responseType", "AuthorizeDotNet");

			Gson gson = new Gson();
			renderContent = gson.toJson(salesOutParameter);
			// renderContent = LayoutGenerator.templateLoader("ResultLoaderPage",
			// contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String checkCustomerProfileId() {

		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		int userId = CommonUtility.validateNumber(sessionUserId);
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		String fromPage = request.getParameter("frPage");
		System.out.println("FromPage -" + fromPage);

		try {
			String customerProfileId = null;
			customerProfileId = UsersDAO.getCustomerProfileId(userId);
			session.setAttribute("customerProfileId", customerProfileId);
			renderContent = customerProfileId;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	// Create Customer Profile - API 1
	public String authorizeCreditCardSave() {
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		String errorDescription = "";
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();

			String dataDescriptor = CommonUtility.validateString(request.getParameter("dataDescriptor"));
			String dataValue = CommonUtility.validateString(request.getParameter("dataValue"));
			String customerErpId = (String) session.getAttribute("customerId");
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String customerProfileId = null;
			List<String> customerPaymentIdList = null;
			String name = CommonUtility.validateString(request.getParameter("name"));
			AddressModel CCbillAddress = new AddressModel();
			CCbillAddress.setAddress1(CommonUtility.validateString(request.getParameter("ccAddress")));
			CCbillAddress.setCity(CommonUtility.validateString(request.getParameter("ccCity")));
			CCbillAddress.setZipCode(CommonUtility.validateString(request.getParameter("ccZipCode")));
			CCbillAddress.setState(CommonUtility.validateString(request.getParameter("ccState")));
			CCbillAddress.setCountry(CommonUtility.validateString(request.getParameter("ccCountry")));

			SalesModel salesInputParameter = new SalesModel();
			salesInputParameter.setDataDescriptor(dataDescriptor);
			salesInputParameter.setDataValue(dataValue);
			salesInputParameter.setName(name);
			salesInputParameter.setBillAddress(CCbillAddress);
			salesInputParameter.setCustomerERPId(CommonUtility.validateParseIntegerToString(userId));

			SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();

			SalesModel salesOutParameter = salesOrderSubmit.AuthorizeDotNetSaveCardAuthentication(salesInputParameter);
			errorDescription = salesOutParameter.getStatusDescription();
			customerProfileId = CommonUtility.validateString(salesOutParameter.getCustomerProfileId());
			System.out.println("CUSTOMER PROFILE ID - " + customerProfileId);
			customerPaymentIdList = salesOutParameter.getCustomerPaymentIdList();
			if (customerProfileId != null && customerProfileId.length() > 0) {
				UsersDAO.updateCustomerProfileId(customerProfileId, userId);
			}

			contentObject.put("customerProfileId",
					CommonUtility.validateString(salesOutParameter.getCustomerProfileId()));
			contentObject.put("customerPaymentId", salesOutParameter.getCustomerPaymentIdList());
			contentObject.put("saveCard", salesOutParameter.isSaveCard());
			contentObject.put("responseType", "AuthorizeDotNet");
			// renderContent = LayoutGenerator.templateLoader("ResultLoaderPage",
			// contentObject, null, null, null);

			renderContent = salesOutParameter.getCustomerProfileId() + "|"
					+ salesOutParameter.getCustomerPaymentIdList().get(0);

		} catch (Exception e) {
			e.printStackTrace();
			renderContent = "|" + errorDescription;
		}

		return SUCCESS;
	}

	// Get Customer Profile - get creditCard Details
	public String authorizeGetCustomerProfile() {
		SalesModel salesOutParameter = new SalesModel();
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			String customerProfileId = request.getParameter("customerProfileId");
			String fromPage = request.getParameter("frPage");
			System.out.println("FromPage -" + fromPage);
			// String customerProfileId = "1501534629";
			List<String> custPaymentId = null;
			SalesModel salesInputParameter = new SalesModel();
			if (customerProfileId != null) {
				salesInputParameter.setCustomerProfileId(customerProfileId);
			}

			SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();
			salesOutParameter = salesOrderSubmit.AuthorizeDotNetGetCustomerProfile(salesInputParameter);
			ArrayList<CreditCardModel> cardDetails = new ArrayList<CreditCardModel>();
			if (salesOutParameter != null) {
				cardDetails = (ArrayList<CreditCardModel>) salesOutParameter.getCreditCardList();
				if (cardDetails != null && cardDetails.size() > 0) {
					for (CreditCardModel CCDetails : cardDetails) {
						custPaymentId = CCDetails.getCustomerPaymentId();
						System.out.println("CUSTOMER PAYMENT ACCOUNT ID - " + custPaymentId);
					}
				}
			}
			contentObject.put("custPaymentId", custPaymentId);
			contentObject.put("responseType", "cardDetails");
			contentObject.put("cardDetails", cardDetails);
			if (fromPage != null && fromPage.trim().length() > 0) {
				contentObject.put("fromPage", fromPage);
			}
			renderContent = LayoutGenerator.templateLoader("ResultLoaderPage", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String AuthorizeCustomerProfile() {
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String customerProfileId = request.getParameter("customerProfileId");
			String paymentAccountId = request.getParameter("customerPaymentId");
			double amount = CommonUtility
					.validateDoubleNumber(CommonUtility.validateString(request.getParameter("amount")));
			amount = CommonUtility.validateDoubleNumber(decimal2Fmt.format(amount));
			String cvv = request.getParameter("cvv");

			SalesModel salesInputParameter = new SalesModel();
			salesInputParameter.setCustomerProfileId(customerProfileId);
			;
			salesInputParameter.setPaymentAccountId(paymentAccountId);
			salesInputParameter.setAmount(amount);
			salesInputParameter.setCvv(cvv);

			SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();

			SalesModel salesOutParameter = salesOrderSubmit.AuthorizeCustomerProfileAuthentication(salesInputParameter);
			if (salesOutParameter != null) {
				contentObject.put("authorizationCode",
						CommonUtility.validateString(salesOutParameter.getAuthorizationCode()));
				contentObject.put("avsResultCode", CommonUtility.validateString(salesOutParameter.getAvsResultCode()));
				contentObject.put("cvvResultCode", CommonUtility.validateString(salesOutParameter.getCvvResultCode()));
				contentObject.put("cavvResultCode",
						CommonUtility.validateString(salesOutParameter.getCavvResultCode()));
				contentObject.put("transactionId", CommonUtility.validateString(salesOutParameter.getTransactionId()));
				contentObject.put("transactionHash",
						CommonUtility.validateString(salesOutParameter.getTransactionHash()));
				contentObject.put("transactionHash",
						CommonUtility.validateString(salesOutParameter.getTransactionHash()));
				contentObject.put("paymentStatus", CommonUtility.validateString(salesOutParameter.getPaymentStatus()));
				contentObject.put("description", CommonUtility.validateString(salesOutParameter.getDescription()));
			} else {
				salesOutParameter = new SalesModel();
				salesOutParameter.setTransactionId("");// Payment process Failed
				contentObject.put("transactionId", "");// Payment process Failed
			}
			contentObject.put("responseType", "AuthorizeDotNet");

			Gson gson = new Gson();
			renderContent = gson.toJson(salesOutParameter);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return SUCCESS;
	}

	public String createCustomerPaymentProfile() {
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		try {

			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String dataDescriptor = CommonUtility.validateString(request.getParameter("dataDescriptor"));
			String dataValue = CommonUtility.validateString(request.getParameter("dataValue"));
			// String customerProfileId = (String)session.getAttribute("customerProfileId");
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String customerProfileId = null;
			customerProfileId = UsersDAO.getCustomerProfileId(userId);
			String errorMsg = "";
			String customerPaymentId = "";
			System.out.println("Customer Payment Profile ID - " + customerProfileId);
			String name = CommonUtility.validateString(request.getParameter("name"));
			AddressModel CCbillAddress = new AddressModel();
			CCbillAddress.setAddress1(CommonUtility.validateString(request.getParameter("ccAddress")));
			CCbillAddress.setCity(CommonUtility.validateString(request.getParameter("ccCity")));
			CCbillAddress.setZipCode(CommonUtility.validateString(request.getParameter("ccZipCode")));
			CCbillAddress.setState(CommonUtility.validateString(request.getParameter("ccState")));
			CCbillAddress.setCountry(CommonUtility.validateString(request.getParameter("ccCountry")));
			SalesModel salesInputParameter = new SalesModel();
			salesInputParameter.setDataDescriptor(dataDescriptor);
			salesInputParameter.setDataValue(dataValue);
			salesInputParameter.setName(name);
			salesInputParameter.setBillAddress(CCbillAddress);
			if (customerProfileId != null) {
				salesInputParameter.setCustomerProfileId(customerProfileId);
			}

			SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();
			SalesModel salesOutParameter = salesOrderSubmit
					.AuthorizeDotNetCreateCustomerPaymentProfile(salesInputParameter);
			if (salesOutParameter.getCustomerPaymentId() != null
					&& salesOutParameter.getCustomerPaymentId().length() > 0) {
				customerPaymentId = salesOutParameter.getCustomerPaymentId();
			} else {
				System.err.println("Error Message Loop");
				errorMsg = salesOutParameter.getStatusDescription();
			}
			if (customerPaymentId.length() > 0) {
				result = LayoutLoader.getMessageProperties()
						.get(session.getAttribute("localeCode").toString().toUpperCase())
						.getProperty("addnewcreditcardsuccess");
			}
			contentObject.put("errorMsg", "errorMsg");
			contentObject.put("customerPaymentId", "customerPaymentId");
			if (customerPaymentId.length() > 0) {
				renderContent = customerPaymentId;
			} else {
				renderContent = errorMsg;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return SUCCESS;
	}

	public String deleteCustomerPaymentProfile() {
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		String message = null;
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String customerProfileId = request.getParameter("customerProfileId");
			String paymentAccountId = request.getParameter("customerPaymentId");
			System.out.println(
					"-- CUSTOMER PROFILE ID -- " + customerProfileId + " -- PAYMENT ACC ID -- " + paymentAccountId);

			SalesModel salesInputParameter = new SalesModel();
			salesInputParameter.setCustomerProfileId(customerProfileId);
			;
			salesInputParameter.setPaymentAccountId(paymentAccountId);

			SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();
			SalesModel salesOutParameter = salesOrderSubmit.AuthorizeDeleteCustomerPaymentProfile(salesInputParameter);
			if (salesOutParameter != null) {
				message = salesOutParameter.getDescription();
				System.out.println("MESSAGE -" + message);
			}
			renderContent = message;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String orderSubmit() {

		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		CallableStatement stmt = null;
		Double approAmount = 0.0;
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionId = session.getId();
			resultData = new ArrayList<ProductsModel>();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String sequencePoNum = CommonUtility.validateString(request.getParameter("po"));
			String listPrice = CommonUtility.validateString(request.getParameter("listPrices"));
			String carton = CommonUtility.validateString(request.getParameter("carton"));
			int activeTaxonomyId = CommonUtility
					.validateNumber(CommonDBQuery.getSystemParamtersList().get("TAXONOMY_ID"));
			String guestFlag = CommonUtility.validateString(request.getParameter("guestFlag"));
			String orderSource = CommonUtility.validateString(request.getParameter("orderSource"));
			UnilogFactoryInterface poNumServiceClass = UnilogEcommFactory.getInstance()
					.getData(PropertyAction.getVersionControl().get("CustomServiceProvider"));
			if (poNumServiceClass != null && sequencePoNum.length() <= 0) {
				String poNumberSeq = poNumServiceClass.getPoSequenceId("ADAPT_P0_SEQ");
				if (poNumberSeq != null) {
					sequencePoNum = poNumberSeq;
				}
			}
			boolean flag = false;
			String anonymous = "N";
			String orderTax = CommonUtility.validateString((String) request.getParameter("orderTax"));
			String userSelectedLocation = CommonUtility
					.validateString((String) request.getParameter("selectedLocation"));
			String tempSubset = CommonUtility.validateString((String) session.getAttribute("userSubsetId"));
			int subsetId = CommonUtility.validateNumber(tempSubset);
			String tempGeneralSubset = CommonUtility.validateString((String) session.getAttribute("generalCatalog"));
			String tempBuyingCompany = CommonUtility.validateString((String) session.getAttribute("buyingCompanyId"));
			String shipViaDescription = "";
			String erpUserContactID = "";
			String totalCartFrieghtCharges = "";
			totalCartFrieghtCharges = CommonUtility.validateString(request.getParameter("totalCartFrieghtCharges"));
			String shipToWarehouse = CommonUtility.validateString(request.getParameter("shipToWarehouse")).trim();
			String overrideBill = CommonUtility.validateString(request.getParameter("overrideBill")).trim();
			String shipViaServiceCode = CommonUtility.validateString(request.getParameter("shipViaServiceCode"));
			String pickUpWareHouseCode = CommonUtility.validateString(request.getParameter("pickUpWareHouseCode"));

			if (CommonUtility.customServiceUtility() != null) {
				CommonUtility.customServiceUtility().pickUpSelectedBranch(pickUpWareHouseCode);
			}
			if (CommonUtility.validateString(selectedBranch).trim().length() > 0) {
				session.setAttribute("salesLocationId", selectedBranch);
			}
			if (CommonUtility.validateString(userSelectedLocation).length() > 0) {
				String networkWarehouse = null;
				try {
					// CustomServiceProvider
					if (CommonUtility.customServiceUtility() != null) {
						networkWarehouse = CommonUtility.customServiceUtility()
								.getNetworkWarehouseCode(CommonUtility.validateString(userSelectedLocation));
					}
					// CustomServiceProvider
					if (networkWarehouse != null) {
						userSelectedLocation = CommonUtility.validateString(networkWarehouse).trim();
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			/*
			 * LinkedHashMap<String, String> userCustomFieldValue = (LinkedHashMap<String,
			 * String>) session.getAttribute("userCustomFieldValue");
			 * if(userCustomFieldValue!=null &&
			 * CommonUtility.validateString(userCustomFieldValue.get("CONTACT_ID")).length()
			 * >0){ erpUserContactID = userCustomFieldValue.get("CONTACT_ID"); }
			 */
			erpUserContactID = CommonUtility.validateString(UsersDAO.getContactID(userId));
			int buyingCompanyId = CommonUtility.validateNumber(tempBuyingCompany);
			if (!CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
					.equalsIgnoreCase("Y")) {
				if (CommonUtility.validateString((String) session.getAttribute("shipvia")).length() > 0) {
					shipVia = (String) session.getAttribute("shipvia");
				}

				if (CommonUtility.validateString(request.getParameter("shipViaDescription")).length() > 0) {
					shipViaDescription = CommonUtility.validateString(request.getParameter("shipViaDescription"));
				} else {
					if (session.getAttribute("shipViaMap") != null) {
						LinkedHashMap<String, String> shipViaMap = (LinkedHashMap<String, String>) session
								.getAttribute("shipViaMap");
						if (shipViaMap != null && !shipViaMap.isEmpty()) {
							shipViaDescription = shipViaMap.get(shipVia.toUpperCase());
						}
					}
				}
				String shipViaDisplay = null;
				if (session.getAttribute("shipViaMap") != null) {
					LinkedHashMap<String, String> shipViaMap = (LinkedHashMap<String, String>) session
							.getAttribute("shipViaMap");
					shipViaDisplay = shipViaMap.get(shipVia.toUpperCase());
				}
				System.out.println("shipViaDisplay------------" + shipViaDisplay);
			}
			if (CommonUtility.validateString(request.getParameter("shipViaDescription")).length() > 0) {
				shipViaDescription = CommonUtility.validateString(request.getParameter("shipViaDescription"));
			}
			AddressModel overrideShipAddress = (AddressModel) session.getAttribute("overrideShipAddress");
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			int orderId = 0;
			int cartCount = 0;
			session.setAttribute("creditCardFlag", "false");
			if (type != null && type.trim().equalsIgnoreCase("mobile") && mobileUserId != null) {
				sessionUserId = mobileUserId;
				session.removeAttribute("isReOrder");
				session.setAttribute("mobileUserName", mobileUserName);
				session.setAttribute("mobileUserId", mobileUserId);
				session.setAttribute(Global.USERID_KEY, mobileUserId);
				session.setAttribute(Global.USERNAME_KEY, mobileUserName);
			}
			if (type != null && type.trim().equalsIgnoreCase("mobile")) {
				if (session.getAttribute("mobileUserId") != null && session.getAttribute("mobileUserName") != null) {
					mobileUserId = (String) session.getAttribute("mobileUserId");
					session.setAttribute(Global.USERID_KEY, mobileUserId);
					mobileUserName = (String) session.getAttribute("mobileUserName");
					session.setAttribute(Global.USERNAME_KEY, mobileUserName);
					sessionUserId = mobileUserId;
				}
			}
			String overRideShipEmail = "";
			if (CommonUtility.validateString((String) session.getAttribute("overRideShipEmail")).trim().length() > 0) {
				overRideShipEmail = (String) session.getAttribute("overRideShipEmail");
				session.setAttribute("overRideShipEmail", overRideShipEmail);
			}
			String userToken = (String) session.getAttribute("userToken");
			String wareHousecode = (String) session.getAttribute("wareHouseCode");
			String customerCountry = (String) session.getAttribute("customerCountry");
			eclipseSessionId = userToken;
			String userName = (String) session.getAttribute(Global.USERNAME_KEY);
			String entityId = (String) session.getAttribute("entityId");
			String homeTerritory = (String) session.getAttribute("shipBranchId");
			ArrayList<String> partIdentifier = new ArrayList<String>();
			ArrayList<Integer> partIdentifierQuantity = new ArrayList<Integer>();
			String freeShipping = "no";
			String discountTypeCheck = "";
			String isApproveCart = (String) session.getAttribute("fromApproveCart");
			boolean nonCatalogItemFlag = false;
			boolean sendMailFlag = true;
			// Discount related values
			String discountCouponCode = null;
			double discountAmount = 0.0D;
			double orderTotalDiscountAmount = 0.0D;
			float discountInPercent = 0.00F;
			String discountCouponType = null;
			String checkAccount = null;
			StringBuilder orderDiscountCoupons = new StringBuilder();
			try {
				conn = ConnectionManager.getDBConnection();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			int siteId = 0;
			if (CommonDBQuery.getGlobalSiteId() > 0) {
				siteId = CommonDBQuery.getGlobalSiteId();
			}
			String cartSortByValue = "";
			String cartSortColumn = "";
			if (session.getAttribute("cartSortByValue") != null) {
				cartSortByValue = CommonUtility.validateString(session.getAttribute("cartSortByValue").toString());
				String[] sortCoumnArray = cartSortByValue.split(" ");
				if (sortCoumnArray != null && sortCoumnArray.length > 0) {
					cartSortColumn = CommonUtility.validateString(sortCoumnArray[0]);
				}
			}
			if (CommonUtility.validateString(poNumber).trim().length() < 1 && session != null
					&& session.getAttribute("poNumber") != null
					&& CommonUtility.validateString(session.getAttribute("poNumber").toString()).length() > 0) {
				poNumber = (String) session.getAttribute("poNumber");
			}
			session.removeAttribute("poNumber");
			session.removeAttribute("shippingInstruction");
			session.removeAttribute("orderNotes");
			session.removeAttribute("reqDate");
			session.removeAttribute("sortBy");
			session.removeAttribute("QuoteCartTotal");
			session.removeAttribute("QuoteCartCount");
			if (userId > 1) {
				String sql = "";
				if (ProductsDAO.getSubsetIdFromName(
						CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
					generalSubset = ProductsDAO
							.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
				}
				if (isReOrder != null && isReOrder.trim().equalsIgnoreCase("Y")) {
					sql = PropertyAction.SqlContainer.get("getQuoteCartItemDetailQuery");
					if (CommonUtility.validateString(cartSortColumn).length() > 0
							&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
						sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
					}
					pstmt = conn.prepareStatement(sql);
					pstmt.setString(1, sessionId);
					pstmt.setInt(2, subsetId);
					pstmt.setInt(3, activeTaxonomyId);
					pstmt.setString(4, sessionId);
					pstmt.setInt(5, generalSubset);
					pstmt.setInt(6, activeTaxonomyId);
					pstmt.setString(7, sessionId);
					pstmt.setInt(8, subsetId);
					rs = pstmt.executeQuery();
				} else {
					if (savedGroupId == 0 && isFromQC != null && isFromQC.trim().equalsIgnoreCase("Yes")) {
						// sessionId = sessionId+".QUICKCART";
						if (CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("PARTIAL_CART_CHECKOUT"))
								.length() > 0
								&& CommonDBQuery.getSystemParamtersList().get("PARTIAL_CART_CHECKOUT").trim()
										.equalsIgnoreCase("Y")) {
							sql = PropertyAction.SqlContainer.get("getPartialCartItemDetailQueryBySession");
						} else {
							sql = PropertyAction.SqlContainer.get("getCartItemDetailQueryBySession");
						}
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, siteId);
						pstmt.setInt(2, userId);
						pstmt.setString(3, sessionId);
						pstmt.setInt(4, subsetId);
						pstmt.setInt(5, siteId);
						pstmt.setInt(6, userId);
						pstmt.setString(7, sessionId);
						pstmt.setInt(8, subsetId);
						pstmt.setInt(9, siteId);
						pstmt.setInt(10, userId);
						pstmt.setString(1, sessionId);
						pstmt.setInt(12, subsetId);
						rs = pstmt.executeQuery();
					} else if (savedGroupId == 0) {
						if (CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("PARTIAL_CART_CHECKOUT"))
								.length() > 0
								&& CommonDBQuery.getSystemParamtersList().get("PARTIAL_CART_CHECKOUT").trim()
										.equalsIgnoreCase("Y")) {
							sql = PropertyAction.SqlContainer.get("getPartialCartItemDetailQuery");
						} else {
							sql = PropertyAction.SqlContainer.get("getCartItemDetailQuery");
						}

						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, siteId);
						pstmt.setInt(2, userId);
						pstmt.setInt(3, subsetId);
						pstmt.setInt(4, siteId);
						pstmt.setInt(5, userId);
						pstmt.setInt(6, generalSubset);
						pstmt.setInt(7, siteId);
						pstmt.setInt(8, userId);
						pstmt.setInt(9, subsetId);
						rs = pstmt.executeQuery();
					} else {
						sql = PropertyAction.SqlContainer.get("selectGroupItem");
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}

						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, savedGroupId);
						pstmt.setInt(2, userId);
						pstmt.setInt(3, buyingCompanyId);
						pstmt.setInt(4, subsetId);
						pstmt.setInt(5, activeTaxonomyId);
						pstmt.setInt(6, savedGroupId);
						pstmt.setInt(7, userId);
						pstmt.setInt(8, buyingCompanyId);
						pstmt.setInt(9, generalSubset);
						pstmt.setInt(10, activeTaxonomyId);
						pstmt.setInt(11, savedGroupId);
						pstmt.setInt(12, subsetId);

						rs = pstmt.executeQuery();
					}
				}

				HashMap<String, Integer> userAddressId = new HashMap<String, Integer>();
				if (type != null && type.trim().equalsIgnoreCase("mobile") && mobileUserId != null) {
					userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(mobileUserName);
				} else {
					userAddressId = UsersDAO
							.getDefaultAddressIdForBCAddressBook((String) session.getAttribute(Global.USERNAME_KEY));
				}
				defaultBillToId = userAddressId.get("Bill");
				defaultShipToId = userAddressId.get("Ship");
				session.setAttribute("defaultBillToId", "" + defaultBillToId);
				HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
						defaultShipToId);
				String shipBranch = (String) session.getAttribute("shipBranchId");
				String homeBranch = (String) session.getAttribute("homeBranchId");
				if (shipVia != null
						&& (shipVia.trim().toUpperCase().contains("WILL CALL")
								|| shipVia.trim().toUpperCase().contains("CUSTOMER PICK UP"))
						&& CommonUtility.validateString(shipBranch).length() > 0) {
					selectedBranch = shipBranch;
				} else if (CommonUtility.validateString(shipBranch).length() > 0 && CommonUtility
						.validateString(
								CommonDBQuery.getSystemParamtersList().get("DISABLE_HOME_BRANCH_ON_ORDERSUBMIT"))
						.equalsIgnoreCase("Y")) {
					selectedBranch = shipBranch;
				} else if (homeBranch != null && homeBranch.trim().length() > 0) {
					selectedBranch = homeBranch;
				} else {
					selectedBranch = "";
				}
				UsersModel userBillAddress = userAddress.get("Bill");
				userBillAddress.setShippingInstruction(shippingInstruction);
				userBillAddress.setOrderedBy(orderedBy);
				userBillAddress.setOrderNotes(orderNotes);
				userBillAddress.setReqDate(reqDate);
				if (session != null && session.getAttribute("overrideBillAddress") != null) {
					AddressModel overrideBillAddress = (AddressModel) session.getAttribute("overrideBillAddress");
					if (overrideBillAddress != null) {
						if (CommonUtility.validateString(userBillAddress.getEmailAddress()).length() < 1) {
							userBillAddress.setEmailAddress(
									CommonUtility.validateString(overrideBillAddress.getEmailAddress()));
						} else if (CommonUtility.validateString(overrideBill).trim().equalsIgnoreCase("Y")) {
							userBillAddress.setEmailAddress(
									CommonUtility.validateString(overrideBillAddress.getEmailAddress()));
						}
						if (CommonUtility.validateString(userBillAddress.getPhoneNo()).length() < 1) {
							userBillAddress.setPhoneNo(CommonUtility.validateString(overrideBillAddress.getPhoneNo()));
						}
						userBillAddress.setAddress1(overrideBillAddress.getAddress1());
						userBillAddress.setAddress2(overrideBillAddress.getAddress2());
						userBillAddress.setCity(overrideBillAddress.getCity());
						userBillAddress.setState(overrideBillAddress.getState());
						userBillAddress.setCountry(overrideBillAddress.getCountry());
						userBillAddress.setZipCode(overrideBillAddress.getZipCode());
						userBillAddress.setZipCodeStringFormat(overrideBillAddress.getZipCode());
						userBillAddress.setCustomerName(overrideBillAddress.getCompanyName());
					}
				}

				UsersModel userShipAddress = userAddress.get("Ship");
				if (CommonUtility.customServiceUtility() != null) {
					UsersModel userShipAddressforRetail = CommonUtility.customServiceUtility()
							.getUserContactAddress(userId, session);
					if (userShipAddressforRetail != null) {
						userShipAddress = userShipAddressforRetail;
					}
				}
				String shipTofirstName = CommonUtility.validateString(userShipAddress.getFirstName());
				String shipToLastName = CommonUtility.validateString(userShipAddress.getLastName());
				session.setAttribute("shipTofirstName", shipTofirstName);
				session.setAttribute("shipToLastName", shipToLastName);
				if (userShipAddress != null && CommonUtility.validateString(overRideShipEmail).trim().length() > 0) {
					userShipAddress.setEmailAddress(overRideShipEmail);
				}
				userShipAddress.setShippingInstruction(CommonUtility.validateString(shippingInstruction));
				userShipAddress.setOrderedBy(orderedBy);
				userShipAddress.setOrderNotes(orderNotes);
				userShipAddress.setReqDate(reqDate);
				userShipAddress.setFirstName((String) session.getAttribute("userFirstName"));
				userShipAddress.setLastName((String) session.getAttribute("userLastName"));
				if (overrideShipAddress != null) {
					userBillAddress.setCustomerName(CommonUtility.validateString(overrideShipAddress.getCompanyName()));// override
																														// company
																														// name
																														// ill
																														// be
																														// stored
																														// in
																														// orders
																														// and
																														// also
																														// send
																														// in
																														// mail.
					userShipAddress.setCompanyName(CommonUtility.validateString(overrideShipAddress.getCompanyName()));
					userShipAddress.setAddress1(CommonUtility.validateString(overrideShipAddress.getAddress1()));
					userShipAddress.setAddress2(CommonUtility.validateString(overrideShipAddress.getAddress2()));
					userShipAddress.setCity(CommonUtility.validateString(overrideShipAddress.getCity()));
					userShipAddress.setState(CommonUtility.validateString(overrideShipAddress.getState()));
					userShipAddress.setCountry(CommonUtility.validateString(overrideShipAddress.getCountry()));
					userShipAddress.setZipCode(CommonUtility.validateString(overrideShipAddress.getZipCode()));
					userShipAddress
							.setZipCodeStringFormat(CommonUtility.validateString(overrideShipAddress.getZipCode()));
					userShipAddress.setPhoneNo(CommonUtility.validateString(overrideShipAddress.getPhoneNo()));
					userShipAddress
							.setEmailAddress(CommonUtility.validateString(overrideShipAddress.getEmailAddress()));
					if (overrideShipAddress.getShipToId() != null && overrideShipAddress.getShipToId().length() > 0) {
						userShipAddress.setShipToId(overrideShipAddress.getShipToId());
					}
				}
				billEntityId = userAddress.get("Bill").getEntityId();
				shipEntityId = userAddress.get("Ship").getEntityId();
				UsersModel userDefaultAddress = new UsersModel();
				userDefaultAddress.setAddress1(address1);
				userDefaultAddress.setAddress2(address2);
				userDefaultAddress.setCity(city);
				userDefaultAddress.setState(state);
				userDefaultAddress.setZipCodeStringFormat(zipCode);
				userDefaultAddress.setCountry(country);
				userDefaultAddress.setPhoneNo(phoneNumber);
				userDefaultAddress.setOrderNotes(orderNotes);
				userDefaultAddress.setShippingInstruction(shippingInstruction);
				userDefaultAddress.setOrderedBy(orderedBy);
				userDefaultAddress.setOrderStatus(orderStatus);
				userDefaultAddress.setCustomerReleaseNumber(customerReleaseNumber);
				userDefaultAddress.setReqDate(reqDate);
				userDefaultAddress.setEmailAddress(email);
				userDefaultAddress.setShipToId(selectedShipId != null ? selectedShipId : "");

				ArrayList<ProductsModel> itemDetailObject = new ArrayList<ProductsModel>();
				LinkedHashMap<String, String> lineItemCommentList = new LinkedHashMap<String, String>();
				LinkedHashMap<String, Integer> UOMQTY = new LinkedHashMap<String, Integer>();
				ArrayList<ProductsModel> partIdentifiersList = new ArrayList<ProductsModel>();
				SalesModel defaultOrderDetail = new SalesModel();
				LinkedHashMap<String, Object> orderDetailsForDefault = new LinkedHashMap<String, Object>();
				double orderSubTotal = 0.0;
				if (request.getParameter("orderSubTotal") != null) {
					orderSubTotal = CommonUtility.validateDoubleNumber(request.getParameter("orderSubTotal"));
				}
				double orderGrandTotal = 0.0;
				String c = "";
				String idList = "";
				while (rs.next()) {
					cartCount++;

					if (rs.getInt("ITEM_ID") == CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						nonCatalogItemFlag = true;
					}
					if (cartCount == 1) {
						String paymentMethod = "Purchase Order";
						if ((CommonUtility.validateString(payPalToken).length() > 0
								&& CommonUtility.validateString(payPalPayerId).length() > 0)
								|| (CommonUtility.validateString(creditCardPayment).equalsIgnoreCase("Y")
										&& CommonUtility.validateString(ccTransactionId).length() > 0)) {
							String paymentGatewayType = "";
							if (session.getAttribute("PAYMENT_GATEWAY") != null
									&& session.getAttribute("PAYMENT_GATEWAY").toString().length() > 0) {
								paymentGatewayType = (String) session.getAttribute("PAYMENT_GATEWAY");
							} else {
								paymentGatewayType = CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY");
							}

							if (CommonUtility.validateString(payPalToken).length() > 0
									&& CommonUtility.validateString(payPalPayerId).length() > 0) {
								creditCardValue = new CreditCardModel();
								creditCardValue.setPayPalPayerId(CommonUtility.validateString(payPalPayerId));
								creditCardValue.setPayPalToken(CommonUtility.validateString(payPalToken));
								paymentMethod = "PayPal";
							} else {
								ccNumber = ccNumber.replaceAll("XXXX-", "");
								ccNumber = ccNumber.replaceAll("\\*", "");
								ccNumber = ccNumber.replaceAll("#", "");
								ccNumber = ccNumber.replaceAll("-", "");
								creditCardValue = new CreditCardModel();
								creditCardValue.setCardHolder(cardHolder);
								creditCardValue.setDate(ccExp);
								creditCardValue.setElementPaymentAccountId(ccTransactionId);
								creditCardValue.setAddress1(streetAddress);
								creditCardValue.setZipCode(postalCode);
								creditCardValue.setCreditCardAuthType(CommonUtility.validateString(
										CommonDBQuery.getSystemParamtersList().get("CreditCardAuthType")));

								creditCardValue.setPaymentGatewayType(paymentGatewayType);

								creditCardValue.setCreditCardResponseCode(ccResponseCode);
								creditCardValue.setCreditCardStatus(ccStatus);
								creditCardValue.setCreditCardHostRefNumber(ccHostRefNumber);
								creditCardValue.setCreditCardTaskID(ccTaskID);
								creditCardValue.setCreditCardAmount(ccAmount);
								creditCardValue.setCreditCardDeclineResponseReason(ccDeclineResponseReason);
								creditCardValue.setCreditCardCvv2VrfyCode(ccCvv2VrfyCode);
								creditCardValue.setCreditCardTip(ccTip);
								creditCardValue.setCreditCardTransTimeStamp(ccTransTimeStamp);
								creditCardValue.setCreditCardToken(ccToken);
								creditCardValue.setCreditCardApprovedAmount(ccApprovedAmount);
								creditCardValue.setCreditCardRequestedAmount(ccRequestedAmount);
								creditCardValue.setCreditCardHostResponseCode(ccHostResponseCode);
								creditCardValue.setCreditCardInvoice(ccInvoice);
								creditCardValue.setCreditCardApprovalCode(ccApprovalCode);
								creditCardValue.setCreditCardTransactionID(ccTransactionId);
								creditCardValue.setCreditCardServerTimestamp(ccServerTimestamp);
								if (CommonUtility
										.validateString(
												CommonDBQuery.getSystemParamtersList().get("P21_CREDIT_CARD_TYPES"))
										.equalsIgnoreCase("Y")) {
									if (!CommonUtility.validateString(ccType).equalsIgnoreCase("")) {
										List<CustomTable> creditCardType = CIMM2VelocityTool.getInstance()
												.getCusomTableData("Website", "CREDIT_CARD_TYPE");
										String credictCardCode = CIMM2VelocityTool.getInstance()
												.getCreditCardCode(creditCardType, ccType);
										if (credictCardCode != null) {
											creditCardValue.setCreditCardType(credictCardCode);
										} else {
											creditCardValue.setCreditCardType(ccType);
										}
									}
								} else {
									creditCardValue.setCreditCardType(ccType);
								}
								System.out.println("Credit card Type--------:" + ccType);
								creditCardValue.setCreditCardFee(ccFee);
								creditCardValue.setCreditCardExternalSessionID(ccExternalSessionID);
								creditCardValue.setCreditCardAddVrfyCode(ccAddVrfyCode);
								creditCardValue.setCreditCardTax(ccTax);
								creditCardValue.setCreditCardNewDomainKey(ccNewDomainKey);
								creditCardValue.setCreditCardNumber(ccNumber);
								creditCardValue.setCreditCardRefNumber(ccRefrenceCode);
								creditCardValue.setCreditCardActualOrderTotal(actualOrderTotal);
								creditCardValue.setCreditCardMerchantId(ccMerchantId);
								creditCardValue.setDataValue(dataValue);
								creditCardValue.setSaveCard(saveCard);
								paymentMethod = "Credit Card";
							}
							session.setAttribute("creditCardFlag", "true");
							if (ccOrderNumber != null && ccOrderNumber.trim().length() > 0) {
								orderId = CommonUtility.validateNumber(ccOrderNumber);
							}
							if (CommonUtility.validateString(
									CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION"))
									.length() > 0) {
								userBillAddress.setShippingInstruction(
										CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
												+ shippingInstruction);
								userShipAddress.setShippingInstruction(
										CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
												+ shippingInstruction);
								userDefaultAddress.setShippingInstruction(
										CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
												+ shippingInstruction);
								shippingInstruction = CommonDBQuery.getSystemParamtersList()
										.get("CREDITCARD_SHIPPINGINSTRUCTION") + shippingInstruction;
							}
						}
						System.out.println("ccTransID : " + ccTransactionId);
						String ipaddress = request.getHeader("X-Forwarded-For");

						if (ipaddress == null)
							ipaddress = request.getRemoteAddr();// userDefaultAddress

						String refKey = "";
						if (ccRefrenceCode != null && ccRefrenceCode.trim().length() > 0) {
							refKey = ccRefrenceCode;
						}
						String homeBranchId = (String) session.getAttribute("homeBranchId");
						String homeBranchName = (String) session.getAttribute("homeBranchName");
						String shipBranchId = (String) session.getAttribute("shipBranchId");
						String shipBranchName = (String) session.getAttribute("shipBranchName");

						LinkedHashMap<String, Object> orderDetails = new LinkedHashMap<String, Object>();
						orderDetails.put("homeBranchId", homeBranchId);
						orderDetails.put("homeBranchName", homeBranchName);
						orderDetails.put("shipBranchId", shipBranchId);
						orderDetails.put("shipBranchName", shipBranchName);
						orderDetails.put("wareHousecode", wareHousecode);
						orderDetails.put("gasPoNumber", gasPoNumber);
						if (orderId <= 0) {
							orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
						}
						userBillAddress.setSession(session);
						Discount orderShippingDiscount = getOrderShippingDiscount(session);
						if (orderShippingDiscount != null) {
							try {
								buyingCompanyId = Integer.parseInt(session.getAttribute("buyingCompanyId").toString());
								String website = (String) session.getAttribute("websiteName");
								if (orderId <= 0) {
									orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
								}
								orderDetails.put(SalesActionContantVariables.ORDER_ID, orderId);
								orderDetails.put(SalesActionContantVariables.USER_ID, userId);
								// save Order Level Discount
								SalesPromotionService salesPromo = SalesPromotionService.getInstance();
								if (orderShippingDiscount != null) {
									discountTypeCheck = orderShippingDiscount.getDiscountType().name();
									if (salesPromo.storeCouponUsed(orderShippingDiscount, String.valueOf(orderId),
											userId, buyingCompanyId, website)
											&& CommonUtility.validateString(discountTypeCheck).length() > 0
											&& discountTypeCheck.equals("FREE_SHIPPING")) {
										freeShipping = "yes";
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
												String.valueOf(orderShippingDiscount.getDiscountValue()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
												String.valueOf(orderShippingDiscount.getDiscountInPercent()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
												orderShippingDiscount.getDiscountCoupon().getCopounCode());
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
												orderShippingDiscount.getDiscountType().name());
										orderDetails.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
												SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
										orderDetails = SalesDAO.CouponDataCrud(orderDetails);

										// appending coupon codes
										orderDiscountCoupons.append(
												orderShippingDiscount.getDiscountCoupon().getCopounCode() + ";");
									}
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
						// Order Discount
						List<Discount> orderDiscounts = getOrderDiscount(session);
						if (orderDiscounts != null && orderDiscounts.size() > 0) {
							for (Discount orderDiscount : orderDiscounts) {

								try {
									buyingCompanyId = Integer
											.parseInt(session.getAttribute("buyingCompanyId").toString());
									String website = (String) session.getAttribute("websiteName");
									if (orderId <= 0) {
										orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
									}
									orderDetails.put(SalesActionContantVariables.ORDER_ID, orderId);
									orderDetails.put(SalesActionContantVariables.USER_ID, userId);
									// save Order Level Discount
									SalesPromotionService salesPromo = SalesPromotionService.getInstance();
									if (salesPromo.storeCouponUsed(orderDiscount, String.valueOf(orderId), userId,
											buyingCompanyId, website)) {
										orderTotalDiscountAmount += orderDiscount.getDiscountValue();
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
												decimal2Fmt.format(orderDiscount.getDiscountValue()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
												String.valueOf(orderDiscount.getDiscountInPercent()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
												orderDiscount.getDiscountCoupon().getCopounCode());
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
												orderDiscount.getDiscountType().name());
										orderDetails.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
												SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
										orderDetails = SalesDAO.CouponDataCrud(orderDetails);

										orderDiscountCoupons
												.append(orderDiscount.getDiscountCoupon().getCopounCode() + ";");
									}
								} catch (Exception e) {
									e.printStackTrace();
								}
							}
						}
						// setting order coupons to Order detials to save in orders table and total
						orderDetails.put("discountCouponCode", orderDiscountCoupons.toString());
						orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
								decimal2Fmt.format(orderTotalDiscountAmount));
						orderDetailsForDefault = orderDetails;
					}
					ProductsModel partIdentifiers = new ProductsModel();
					int packageQty = 1;
					int qty = rs.getInt("QTY");
					if (rs.getInt("PACKAGE_FLAG") > 0) {
						if (rs.getInt("PACKAGE_QTY") > 0) {
							packageQty = rs.getInt("PACKAGE_QTY");
						}
					}
					String lineComment = "";
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.validateString(rs.getString("ITEM_LEVEL_SHIPVIA")).length() > 0
								&& CommonUtility.validateString(shipVia).equals("MULTIPLE")) {
							lineComment = "Ship Method : " + rs.getString("ITEM_LEVEL_SHIPVIA");
						}
					}
					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("ITEM_LEVEL_SHIPVIA_REQUIREDBY_DATE"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.validateString(rs.getString("ITEMLEVEL_REQUIREDBYDATE")).length() > 0) {
							lineComment = "Required By Date : " + rs.getString("ITEMLEVEL_REQUIREDBYDATE");
						}
					}
					if (CommonUtility.validateString(rs.getString("LINE_ITEM_COMMENT")).length() > 0) {
						if (CommonUtility.validateString(lineComment).length() > 0) {
							lineComment = lineComment + " | " + "LineItemComment : "
									+ rs.getString("LINE_ITEM_COMMENT");
						} else {
							lineComment = rs.getString("LINE_ITEM_COMMENT");
						}
					}
					ProductsModel saveItems = new ProductsModel();
					saveItems.setCartId(rs.getInt("CART_ID"));
					saveItems.setItemId(rs.getInt("ITEM_ID"));
					saveItems.setInvoiceDesc(rs.getString("INVOICE_DESC"));
					saveItems.setSalesUom(rs.getString("SALES_UOM"));
					saveItems.setPackDesc(rs.getString("PACK_DESC"));
					saveItems.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
					saveItems.setItemLevelRequiredByDate(rs.getString("ITEMLEVEL_REQUIREDBYDATE"));
					saveItems.setCatalogId(rs.getString("CATALOG_ID"));
					saveItems.setShipViaCode(rs.getString("ITEM_LEVEL_SHIPVIA"));
					saveItems.setQty(qty);
					saveItems.setShortDesc(rs.getString("SHORT_DESC"));
					saveItems.setShipViaDesc(rs.getString("ITEM_LEVEL_SHIPVIA_DESC"));
					saveItems.setCustomerPartNumber("");
					if (CommonUtility.checkDBColumn(rs, "GET_PRICE_FROM")) {
						saveItems.setGetPriceFrom(rs.getString("GET_PRICE_FROM"));
						if (CommonUtility.validateString(rs.getString("GET_PRICE_FROM")).equalsIgnoreCase("CART")) {
							saveItems.setCustomerPrice(rs.getDouble("PRICE"));
							if (CommonUtility.customServiceUtility() != null) {
								CommonUtility.customServiceUtility().configOrderItemValues(saveItems, rs);
							}
						}
					}
					saveItems.setManufacturerName(rs.getString("MANUFACTURER_NAME"));
					if (rs.findColumn("UOM") > 0) {
						saveItems.setUom(rs.getString("UOM"));
					}
					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						saveItems.setPartNumber(rs.getString("PART_NUMBER"));
						saveItems.setShortDesc(rs.getString("SHORT_DESC"));
						saveItems.setUnitPrice(rs.getDouble("EXTPRICE") / rs.getInt("QTY"));
						saveItems.setExtendedPrice(rs.getDouble("EXTPRICE"));
						saveItems.setAltPartNumber1(rs.getString("ALT_PART_NUMBER1"));
						saveItems.setPrice(rs.getDouble("EXTPRICE"));
						partIdentifiers.setErpPartNumber(rs.getString("PART_NUMBER"));
						partIdentifiersList.add(partIdentifiers);
						UOMQTY.put(rs.getString("PART_NUMBER"), packageQty);
						lineItemCommentList.put(rs.getString("PART_NUMBER"), lineComment);
					} else {
						saveItems.setPartNumber(rs.getString("NC_PART_NUMBER"));
						saveItems.setShortDesc(rs.getString("SHORT_DESCRIPTION"));
						saveItems.setUnitPrice(rs.getDouble("PRICE"));
						saveItems.setExtendedPrice(rs.getDouble("PRICE") * rs.getInt("QTY"));
						saveItems.setPrice(rs.getDouble("PRICE") * rs.getInt("QTY"));
						saveItems.setShortDesc(rs.getString("SHORT_DESC"));
						saveItems.setBcAddressBookId(rs.getInt("BC_ADDRESS_BOOK_ID"));

						partIdentifiers.setErpPartNumber(rs.getString("NC_PART_NUMBER"));
						UOMQTY.put(rs.getString("NC_PART_NUMBER"), packageQty);
						lineItemCommentList.put(rs.getString("NC_PART_NUMBER"), lineComment);
					}
					if (CommonUtility.checkDBColumn(rs, "GET_PRICE_FROM")) {
						saveItems.setGetPriceFrom(rs.getString("GET_PRICE_FROM"));
						if (CommonUtility.validateString(rs.getString("GET_PRICE_FROM")).equalsIgnoreCase("CART")) {
							saveItems.setCustomerPrice(rs.getDouble("PRICE"));
							if (CommonUtility.customServiceUtility() != null) {
								CommonUtility.customServiceUtility().configOrderItemValues(saveItems, rs);
							}
						}
					}
					// Order Item discount updation
					Discount itemDiscount = getItemDiscount(session, rs.getInt("CART_ID"), rs.getString("PART_NUMBER"),
							rs.getInt("QTY"));

					if (itemDiscount != null) {
						try {
							buyingCompanyId = Integer.parseInt(session.getAttribute("buyingCompanyId").toString());
							String website = (String) session.getAttribute("websiteName");

							// save Item Level Discount
							SalesPromotionService salesPromo = SalesPromotionService.getInstance();
							if (salesPromo.storeCouponUsed(itemDiscount, String.valueOf(orderId), userId,
									buyingCompanyId, website)) {
								discountCouponCode = itemDiscount.getDiscountCoupon().getCopounCode();
								discountAmount = itemDiscount.getDiscountValue();
								discountInPercent = itemDiscount.getDiscountInPercent();
								discountCouponType = itemDiscount.getDiscountType().name();
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
					ProductsDAO.updatePopularity(rs.getInt("ITEM_ID"), 3);
					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						orderSubTotal = orderSubTotal + (rs.getDouble("EXTPRICE") - 0);
					} else {
						orderSubTotal = orderSubTotal + ((rs.getDouble("PRICE") * rs.getInt("QTY")) - 0);
					}
					// orderSubTotal = orderSubTotal+(rs.getDouble("EXTPRICE"));
					flag = true;

					ProductsModel itmVal = new ProductsModel();
					itmVal.setManufacturerName(rs.getString("MANUFACTURER_NAME"));
					itmVal.setCartId(saveItems.getCartId());
					itmVal.setItemId(rs.getInt("ITEM_ID"));
					itmVal.setOverRidePriceRule(rs.getString("OVERRIDE_PRICE_RULE"));
					itmVal.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
					itmVal.setPrice(rs.getDouble("PRICE"));
					itmVal.setAltPartNumber1(rs.getString("ALT_PART_NUMBER1"));
					itmVal.setAltPartNumber2(rs.getString("ALT_PART_NUMBER2"));
					if (CommonUtility.validateString(rs.getString("OVERRIDE_PRICE_RULE")).trim()
							.equalsIgnoreCase("Y")) {
						itmVal.setPrice(rs.getDouble("NET_PRICE"));
					}
					itmVal.setShortDesc(rs.getString("SHORT_DESC"));
					itmVal.setCustomerPrice(rs.getDouble("PRICE"));
					itmVal.setListPrice(rs.getDouble("PRICE"));

					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						itmVal.setPartNumber(rs.getString("PART_NUMBER"));
						itmVal.setUnitPrice(rs.getDouble("EXTPRICE") / rs.getInt("QTY"));

					} else {
						itmVal.setPartNumber(rs.getString("NC_PART_NUMBER"));
						itmVal.setUnitPrice(rs.getDouble("PRICE"));
						if (CommonUtility.validateString(rs.getString("OVERRIDE_PRICE_RULE")).trim()
								.equalsIgnoreCase("Y")) {
							itmVal.setUnitPrice(rs.getDouble("NET_PRICE"));
						}
					}
					if (CommonUtility.checkDBColumn(rs, "GET_PRICE_FROM")) {
						itmVal.setGetPriceFrom(rs.getString("GET_PRICE_FROM"));
						if (CommonUtility.validateString(rs.getString("GET_PRICE_FROM")).equalsIgnoreCase("CART")) {
							if (CommonUtility.customServiceUtility() != null) {
								CommonUtility.customServiceUtility().configOrderItemValues(itmVal, rs);
							}
						}
					}
					itmVal.setQty(rs.getInt("QTY"));

					if (discountAmount > 0) {
						itmVal.setDiscountType("$");
						itmVal.setDiscountValue("" + discountAmount);
					}
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.checkDBColumn(rs, "ITEM_LEVEL_SHIPVIA")) {
							itmVal.setMultipleShipVia(rs.getString("ITEM_LEVEL_SHIPVIA"));
						}
						if (CommonUtility.checkDBColumn(rs, "ITEM_LEVEL_SHIPVIA_DESC")) {
							itmVal.setMultipleShipViaDesc(rs.getString("ITEM_LEVEL_SHIPVIA_DESC"));
						}
					}

					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						idList = idList + c + rs.getInt("ITEM_ID");
						c = " OR ";
						partIdentifier.add(rs.getString("PART_NUMBER"));
					} else {
						partIdentifier.add(rs.getString("NC_PART_NUMBER"));
					}

					partIdentifierQuantity.add(rs.getInt("QTY"));
					if (rs.findColumn("UOM") > 0) {
						itmVal.setUom(rs.getString("UOM"));
					}

					if (rs.findColumn("manufacturer_part_number") > 0) {
						itmVal.setManufacturerPartNumber(rs.getString("manufacturer_part_number"));
					}

					/* This is for rockwell configurator items to override values */
					if (rs.getInt("ITEM_ID") == CommonUtility
							.validateNumber(CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID"))) {
						itmVal.setPartNumber(rs.getString("NC_PART_NUMBER"));
						itmVal.setUnitPrice(rs.getDouble("PRICE"));
						itmVal.setPrice(rs.getDouble("PRICE"));
						itmVal.setUom(rs.getString("SALES_UOM"));
						itmVal.setShortDesc(rs.getString("NC_PART_NUMBER") + " " + rs.getString("SHORT_DESCRIPTION"));
					}

					itmVal.setBcAddressBookId(rs.getInt("BC_ADDRESS_BOOK_ID"));

					if (CommonUtility.customServiceUtility() != null) {
						CommonUtility.customServiceUtility().orderItem(itmVal, rs.getString("PAGE_TITLE"), listPrice,
								carton);
					}
					itmVal.setAdditionalProperties(rs.getString("ADDITIONAL_PROPERTIES"));
					itmVal.setCategoryName(rs.getString("CATEGORY_NAME"));
					if (CommonUtility.checkDBColumn(rs, "GET_PRICE_FROM")) {
						itmVal.setGetPriceFrom(rs.getString("GET_PRICE_FROM"));
						if (CommonUtility.validateString(rs.getString("GET_PRICE_FROM")).equalsIgnoreCase("CART")) {
							if (CommonUtility.customServiceUtility() != null) {
								CommonUtility.customServiceUtility().configOrderItemValues(itmVal, rs);
							}
						}
					}
					itemDetailObject.add(itmVal);
				}

				LinkedHashMap<Integer, ArrayList<ProductsModel>> customerPartNumber = null;
				if (CommonUtility.validateString(idList).length() > 0) {
					customerPartNumber = ProductHunterSolr.getcustomerPartnumber(idList, buyingCompanyId,
							buyingCompanyId);
				}
				if (customerPartNumber != null && customerPartNumber.size() > 0) {
					for (ProductsModel item : itemDetailObject) {
						item.setCustomerPartNumberList(customerPartNumber.get(item.getItemId()));
					}
				}
				if (itemDetailObject != null && itemDetailObject.size() > 0 && eclipseSessionId != null
						&& !eclipseSessionId.trim().equalsIgnoreCase("")) {
					// Call erp for price
					ProductManagement priceInquiry = new ProductManagementImpl();
					ProductManagementModel priceInquiryInput = new ProductManagementModel();
					priceInquiryInput.setEntityId(CommonUtility.validateString(entityId));
					priceInquiryInput.setHomeTerritory(homeTerritory);
					priceInquiryInput.setPartIdentifier(itemDetailObject);
					priceInquiryInput.setPartIdentifierQuantity(partIdentifierQuantity);
					priceInquiryInput.setRequiredAvailabilty("Y");
					priceInquiryInput.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
					priceInquiryInput.setUserToken((String) session.getAttribute("userToken"));
					priceInquiryInput.setSession(session);
					itemDetailObject = priceInquiry.priceInquiry(priceInquiryInput, itemDetailObject);
					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("SAVE_LEADTIME_ON_ORDER_CONFIRMATION"))
							.equalsIgnoreCase("Y")) {
						ProductManagementModel leadInquiry = new ProductManagementModel();
						leadInquiry.setHomeTerritory(
								CommonUtility.validateString((String) session.getAttribute("wareHouseCode")));
						leadInquiry.setPartIdentifier(itemDetailObject);
						String leadTimeData = priceInquiry.ajaxBasePriceAndLeadTime(leadInquiry);
						Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
						ProductsModelArray gsonParsed = gson.fromJson("{\"products\":" + leadTimeData + "}",
								ProductsModelArray.class);
						for (ProductsModel eachItem : itemDetailObject) {
							for (ProductsModel eachLeadItem : gsonParsed.getProducts()) {
								if (eachItem.getPartNumber().equalsIgnoreCase(eachLeadItem.getPartNumber())) {
									if (eachItem.getHomeBranchavailablity() == 0) {
										if (eachLeadItem.getLeadTime() == 0) {
											eachItem.setLeadTime(5);
										} else {
											eachItem.setLeadTime(eachLeadItem.getLeadTime());
										}
									} else {
										eachItem.setLeadTime(-1);
									}
								}

							}
						}
					}
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("UMQTY_FROM_ERP"))
							.equalsIgnoreCase("Y")) {
						for (ProductsModel item : itemDetailObject) {
							// UOMQTY.put(item.getPartNumber(),CommonUtility.validateNumber(item.getQtyUOM()));
							UOMQTY.put(item.getPartNumber(), (item.getUomQty() > 0 ? item.getUomQty() : 1));
						}
					}
				}
				if (itemDetailObject != null && itemDetailObject.size() > 0
						&& CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("EnableCSPConfigurator"))
								.equalsIgnoreCase("Y")) {
					LogoCustomization logoCustomization = new LogoCustomization();
					buyingCompanyId = CommonUtility.validateNumber(session.getAttribute("buyingCompanyId").toString());
					itemDetailObject = logoCustomization.setDesignFeesItems(itemDetailObject, userId, buyingCompanyId,
							session);
					orderSubTotal = itemDetailObject.get(0).getCartTotal();
				}
				orderGrandTotal = orderSubTotal + CommonUtility.validateDoubleNumber(orderTax)
						+ CommonUtility.validateDoubleNumber(totalCartFrieghtCharges);
				System.out.println("orderGrandTotal----:" + orderGrandTotal);
				LinkedHashMap<Integer, ProductsModel> allItemsData = new LinkedHashMap<Integer, ProductsModel>();
				for (ProductsModel item : itemDetailObject) {
					allItemsData.put(item.getItemId(), item);
				}
				SalesModel erpOrderDetail = new SalesModel();

				int firstOrder = 0;
				UnilogFactoryInterface serviceClass = UnilogEcommFactory.getInstance()
						.getData(PropertyAction.getVersionControl().get("CustomServiceProvider"));
				if (serviceClass != null) {
					erpOrderDetail.setUserId(userId);
					erpOrderDetail.setShipToId(CommonUtility.validateString(userShipAddress.getShipToId()));
					firstOrder = serviceClass.getFirstOrders(erpOrderDetail);
				}
				if (flag) {
					String quoteNumber = (String) session.getAttribute("quoteNumber");
					orderGrandTotal = orderSubTotal;
					defaultOrderDetail.setSubtotal(orderSubTotal);
					defaultOrderDetail.setTotal(orderGrandTotal);
					defaultOrderDetail.setOrderedBy(orderedBy);
					defaultOrderDetail.setStatusDescription("Order Successfully Submitted");
					defaultOrderDetail.setOrderNotes(orderNotes);
					defaultOrderDetail.setShippingInstruction(shippingInstruction);
					defaultOrderDetail.setReqDate(reqDate);
					defaultOrderDetail.setShipViaID(shipVia);
					defaultOrderDetail.setShipViaDescription(shipViaDescription);
					defaultOrderDetail.setFreight(CommonUtility.validateDoubleNumber(orderFreight));
					defaultOrderDetail.setTax(CommonUtility.validateDoubleNumber(orderTax));
					AddressModel selectedShipAddress = new AddressModel();
					selectedShipAddress.setAddress1(address1);
					if (CommonUtility.validateString(shippingAccountNumber).length() > 0) {
						checkAccount = "Ship Acct No." + shippingAccountNumber;
					} else {
						checkAccount = "";
					}
					if (CommonUtility.validateString(address2).length() > 0) {
						selectedShipAddress.setAddress2(address2 + " " + checkAccount);
					} else {
						selectedShipAddress.setAddress2(checkAccount);
					}
					selectedShipAddress.setCity(city);
					selectedShipAddress.setState(CommonUtility.validateString(state));
				    selectedShipAddress.setCompanyName(CommonUtility.validateString(userShipAddress.getCompanyName()));
					selectedShipAddress.setZipCode(zipCode);
					selectedShipAddress.setCountry(country);
					selectedShipAddress.setPhoneNo(phoneNumber);
					selectedShipAddress.setEmailAddress(email != null ? email : overRideShipEmail);
					selectedShipAddress.setEntityId(userShipAddress.getEntityId());
					selectedShipAddress.setShipToId(CommonUtility.validateString(selectedShipId).length() > 0
							? CommonUtility.validateString(selectedShipId)
							: userShipAddress.getShipToId());
					if (CommonUtility.validateString(shipEntityId) != null) {
						selectedShipAddress.setEntityId(shipEntityId);
					} else {
						selectedShipAddress.setEntityId(userShipAddress.getEntityId());
					}
					selectedShipAddress.setAddressType(userShipAddress.getAddressType());
					if (CommonUtility.customServiceUtility() != null) {
						CommonUtility.customServiceUtility().setBillToShipToAddressFields(
								userShipAddress.getCompanyName(), userBillAddress, selectedShipAddress, session);
					}
					SalesOrderManagementModel salesOrderInput = new SalesOrderManagementModel();
					salesOrderInput.setShipViaServiceCode(shipViaServiceCode);
					salesOrderInput.setOrderDisposition(orderDisposition);
					salesOrderInput.setOrderItems(itemDetailObject);
					salesOrderInput.setAllItemData(allItemsData);
					SalesModel quoteResponse = null;
					if (session.getAttribute("quoteResponse") != null) {
						quoteResponse = new SalesModel();
						quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
						salesOrderInput.setQuoteResponse(quoteResponse);
					}
					salesOrderInput.setOrderType(orderingType);
					salesOrderInput.setShipVia(shipVia);
					salesOrderInput.setShipViaDescription(shipViaDescription);
					salesOrderInput.setShippingInstruction(shippingInstruction);
					salesOrderInput.setOrderNotes(orderNotes);
					salesOrderInput.setOrderedBy(orderedBy);
					salesOrderInput.setOrderStatus(orderStatus);
					salesOrderInput.setOrderStatusCode(orderStatusCode);
					salesOrderInput.setReqDate(reqDate);
					if (CommonUtility.validateString(guestFlag).length() > 0) {
						salesOrderInput.setGuestFlag(guestFlag);
					}
					if (CommonUtility.validateString(orderSource).length() > 0) {
						salesOrderInput.setOrderSource(orderSource);
					}
					salesOrderInput.setSession(session);
					salesOrderInput.setOrderId(orderId);
					salesOrderInput.setBillEntityId(billEntityId);
					salesOrderInput.setShipEntityId(shipEntityId);
					salesOrderInput.setUserToken(userToken);
					// salesOrderInput.setShipAddress(selectedShipAddress);
					salesOrderInput.setTaxExempt(taxExempt);
					salesOrderInput.setAnonymous(anonymous);
					salesOrderInput.setUserSelectedLocation(userSelectedLocation);
					salesOrderInput.setErpUserContactId(erpUserContactID);
					salesOrderInput.setBillEntityId(billEntityId);
					salesOrderInput.setShipEntityId(shipEntityId);
					salesOrderInput.setUserToken(userToken);
					salesOrderInput.setShipAddress(selectedShipAddress);
					salesOrderInput.setTaxExempt(taxExempt);
					if (CommonUtility.validateDoubleNumber(upsFrieghtCharges) > 0) {
						salesOrderInput.setFrieghtCharges(upsFrieghtCharges);
					} else {
						orderFreight = (String) request.getParameter("orderFreight");
						salesOrderInput.setFrieghtCharges(orderFreight);
					}
					salesOrderInput.setUserName(userName);
					salesOrderInput.setCreditCardValue(creditCardValue);
					salesOrderInput.setPurchaseOrderNumber(poNumber);
					salesOrderInput.setCustomerReleaseNumber(customerReleaseNumber);
					salesOrderInput.setJobId(CommonUtility.validateString(request.getParameter("jobId")));
					salesOrderInput.setSelectedBranch(selectedBranch);
					salesOrderInput.setLineItemCommentList(lineItemCommentList);
					salesOrderInput.setCountry(country);
					salesOrderInput.setCCType(ccType);
					salesOrderInput.setCCAuth(ccAuthCode);
					salesOrderInput.setOrderTax(CommonUtility.validateDoubleNumber(orderTax));
					salesOrderInput
							.setBillAddress(Cimm2BCentralClient.getInstance().userModelToAddressModel(userBillAddress));
					salesOrderInput.setShipViaMethod(shipVia);
					if (CommonUtility.validateString(ccApprovedAmount).length() > 0) {
						approAmount = Double.parseDouble(ccApprovedAmount);
					}
					salesOrderInput.setGasPoNumber(gasPoNumber);
					salesOrderInput.setCCAmount(approAmount);
					salesOrderInput.setCCToken(ccToken);
					salesOrderInput.setuOMQTY(UOMQTY);
					salesOrderInput.setPaymentTerms(paymentTermsCode);
					salesOrderInput.setNotesIndicator(CommonUtility.validateString(notesIndicator));
					salesOrderInput.setTransactionType(CommonUtility.validateString(transactionType));
					UnilogFactoryInterface salesOrderserviceClass = UnilogEcommFactory.getInstance()
							.getData(PropertyAction.getVersionControl().get("CustomServiceProvider"));
					if (salesOrderserviceClass != null) {
						salesOrderserviceClass.salesOrderdetail(salesOrderInput, shipTofirstName, shipToLastName,
								pageTitle, sequencePoNum, userShipAddress);
					}

					if (quoteNumber != null && !quoteNumber.trim().equalsIgnoreCase(""))
						salesOrderInput.setQuoteNumber(quoteNumber);

					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
							.equalsIgnoreCase("SO")
							|| CommonUtility.validateString(orderingType).equalsIgnoreCase("SO")) {
						if (CommonUtility
								.validateString(
										CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
								.equalsIgnoreCase(CommonUtility.validateString(orderingType))) {
							salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
						} else if (CommonUtility
								.validateString(
										CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
								.length() > 0) {
							salesOrderInput.setErpOrderType(CommonUtility.validateString(
									CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE")));
						} else if (CommonUtility.validateString(orderingType).equalsIgnoreCase("SO")) {
							salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
						}
					}
					salesOrderInput.setShippingAndHandlingFee(CommonUtility.validateString(totalCartFrieghtCharges));// PSS
																														// DFM
																														// shipping
																														// and
																														// handlingfg
					// salesOrderInput.setFrieghtCharges(upsFrieghtCharges);
					salesOrderInput.setOrderERPId(orderErpId);
					salesOrderInput.setAdditionalName(additionalName != null ? additionalName : "");
					salesOrderInput
							.setAdditionalPickupPerson(additionalPickupPerson != null ? additionalPickupPerson : "");
					salesOrderInput.setAdditionalComments(custComments != null ? custComments : "");
					salesOrderInput.setAdditionalCommentsShipToStore(
							custCommentsShipToStore != null ? custCommentsShipToStore : "");
					DecimalFormat df = CommonUtility.getPricePrecision(session);
					salesOrderInput.setDiscountAmount(
							CommonUtility.validateDoubleNumber(df.format((orderTotalDiscountAmount * 100.0) / 100.0)));
					if (CommonUtility.validateString(salesOrderInput.getErpOrderType()).equalsIgnoreCase("SO")) {
						String discountValue = (String) session.getAttribute("discountValue");
						String discountType = (String) session.getAttribute("discountType");
						String userEmailAddress = (String) session.getAttribute("userEmailAddress");
						String userOfficePhone = (String) session.getAttribute("userOfficePhone");
						double freight = 0.0;
						if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
								.equalsIgnoreCase("SHIPVIA_COST_TABLE")
								&& session.getAttribute("customerShipViaListJson") != null) {
							String shipCostTableJasonString = CommonUtility
									.validateString((String) session.getAttribute("customerShipViaListJson"));
							Gson gson = new Gson();
							// LinkedList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
							// new TypeToken<List<ShipVia>>(){}.getType());
							ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
									new TypeToken<List<ShipVia>>() {
									}.getType());
							if (shipCostTable != null && !shipCostTable.isEmpty()) {
								if (shipCostTable != null && !shipCostTable.isEmpty()) {
									if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
										session.removeAttribute("selectedShipCodeOption");
									} else {
										if (session.getAttribute("selectedShipCodeOption") != null)
											selectedShipCodeOption = CommonUtility.validateString(
													session.getAttribute("selectedShipCodeOption").toString());
									}
									if (freeShipping.equalsIgnoreCase("no")) {
										for (ShipVia shipViaObj : shipCostTable) {
											// if(shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)){
											if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
												if (shipViaObj.getShipCode().equalsIgnoreCase(selectedShipCodeOption)) {
													freight = shipViaObj.getShipCost();
													session.removeAttribute("selectedShipCodeOption");
													break;
												}
											} else {
												if (shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)) {
													freight = shipViaObj.getShipCost();
													break;
												}
											}
										}
									}
								}
							}
						}
						LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();
						createQuoteInput.put("session", session);
						createQuoteInput.put("orderedBy", orderedBy);
						createQuoteInput.put("itemList", itemDetailObject);
						createQuoteInput.put("userToken", userToken);
						createQuoteInput.put("shipToEntity", userToken);
						createQuoteInput.put("orderNotes", orderNotes);
						createQuoteInput.put("shippingInstruction", shippingInstruction);
						createQuoteInput.put("poNumber", poNumber);
						createQuoteInput.put("reqDate", reqDate);
						createQuoteInput.put("shipVia", shipVia);
						createQuoteInput.put("shipViaDescription", shipViaDescription);
						createQuoteInput.put("freight", freight);
						createQuoteInput.put("billAddress", userBillAddress);
						createQuoteInput.put("shipAddress", userShipAddress);
						createQuoteInput.put("defaultBillToId", defaultBillToId);
						createQuoteInput.put("defaultShipToId", defaultShipToId);
						createQuoteInput.put("customerId", userToken);
						createQuoteInput.put("wareHousecode", wareHousecode);
						createQuoteInput.put("customerCountry", customerCountry);
						createQuoteInput.put("customerName", userShipAddress.getCustomerName());
						createQuoteInput.put("customerReleaseNumber", customerReleaseNumber);
						createQuoteInput.put("discountValue", discountValue);
						createQuoteInput.put("discountType", discountType);
						createQuoteInput.put("itemDetailObject", itemDetailObject);
						createQuoteInput.put("totalCartFrieghtCharges", totalCartFrieghtCharges);
						createQuoteInput.put("handlingListItems",
								CommonUtility.validateString(LayoutLoader.getMessageProperties()
										.get(session.getAttribute("localeCode").toString().toUpperCase())
										.getProperty("handlingcharge.labels")));
						createQuoteInput.put("deliveryListItems",
								CommonUtility.validateString(LayoutLoader.getMessageProperties()
										.get(session.getAttribute("localeCode").toString().toUpperCase())
										.getProperty("deliverycharge.labels")));
						if (nonCatalogItemFlag) {
							createQuoteInput.put("ARIItem", "Y");
						} else {
							createQuoteInput.put("ARIItem", "N");
						}
						createQuoteInput.put("subsetId", subsetId);
						createQuoteInput.put("generalSubset", generalSubset);
						if (CommonUtility.validateString(userEmailAddress).length() > 0) {
							createQuoteInput.put("userEmailAddress", userEmailAddress);
						}
						if (CommonUtility.validateString(userOfficePhone).length() > 0) {
							createQuoteInput.put("userOfficePhone", userOfficePhone);
						}
						createQuoteInput.put("creditCardValue", creditCardValue);
						createQuoteInput.put("erpOrderType",
								CommonUtility.validateString(salesOrderInput.getErpOrderType()));
						if (orderTotalDiscountAmount > 0) {
							createQuoteInput.put("orderDiscountType", "$");
							createQuoteInput.put("discountAmount", orderTotalDiscountAmount);
							createQuoteInput.put("discountPercent", discountValue);
						} else {
							createQuoteInput.put("orderDiscountType", discountType);
							createQuoteInput.put("discountAmount", discountAmount);
							createQuoteInput.put("discountPercent", discountValue);
						}
						createQuoteInput.put("paymentTermsCode", CommonUtility.validateString(paymentTermsCode));
						salesOrderInput.setSalesOrderInput(createQuoteInput);
					}
					String includeApprovalType = CommonUtility
							.validateString((String) request.getParameter("includeApprovalType"));
					String approvalType = CommonUtility.validateString((String) request.getParameter("approvalType"));
					salesOrderInput.setIncludeApprovalType(includeApprovalType);
					salesOrderInput.setApprovalType(approvalType);
					if (CommonUtility.validateString(request.getParameter("couponInfo")).length() > 0) {
						salesOrderInput.setCouponInfo(CommonUtility.validateString(request.getParameter("couponInfo")));
					}
					if (CommonUtility.convertToBoolean(request.getParameter("isLocalDelivery"))) {
						salesOrderInput.setLocalDelivery(
								CommonUtility.convertToBoolean(request.getParameter("isLocalDelivery")));
					}
					if (CommonUtility.customServiceUtility() != null) {
						CommonUtility.customServiceUtility().setCustomSalesOrderInputValues(salesOrderInput, request);
					}
					SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();
					if (CommonUtility.customServiceUtility() != null) {
						erpOrderDetail = CommonUtility.customServiceUtility().submitOrderToERP(salesOrderInput);
					}
					if (erpOrderDetail == null) {
						erpOrderDetail = salesOrderSubmit.submitOrderToERP(salesOrderInput);
						if (erpOrderDetail.getExternalSystemId() != null) {
							orderId = erpOrderDetail.getOrderId();
						}
					}
					LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS"))
							.equalsIgnoreCase("Y") && CommonUtility.validateString(idList).length() > 0) {
						customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(subsetId, generalSubset, idList,
								"itemid");
						erpOrderDetail.setCustomFieldVal(customFieldVal);
					}
					if (erpOrderDetail != null && !CommonUtility.validateString(erpOrderDetail.getStatusDescription())
							.toUpperCase().contains("ERROR")) {

					} else {
						defaultOrderDetail.setOrderStatus("Error while submitting the order");
						defaultOrderDetail.setStatusDescription(
								erpOrderDetail.getStatusDescription() != null ? erpOrderDetail.getStatusDescription()
										: ".");
					}
					
					SalesModel otherDetail = new SalesModel();
					otherDetail.setSession(session);
					otherDetail.setSendmailToSalesRepOnly(sendmailToSalesRepOnly);
					erpOrderDetail.setSendmailToSalesRepOnly(sendmailToSalesRepOnly);
					boolean mailsent = false;
					if (sendMailFlag) {
						SendMailModel sendMailModel = null;
						sendMailModel = new SendMailModel();
						UsersModel userDetail = UsersDAO.getUserEmail(userId);
						SendMailUtility sendMailUtility = new SendMailUtility();
						sendMailModel = new SendMailModel();
						sendMailModel.setToEmailId(userDetail.getEmailAddress());
						sendMailModel.setAdditionalEmailNotification(
								CommonUtility.validateString(additionalEmailNotification));
						sendMailModel.setFirstName(userDetail.getFirstName());
						sendMailModel.setLastName(userDetail.getLastName());
						sendMailModel.setUserName(userDetail.getUserName());
						// Display CPN in order mail
						if (customerPartNumber != null && customerPartNumber.size() > 0) {
							erpOrderDetail.setCustomerPartNumberMap(customerPartNumber);
						}
						// first order eMail
						UnilogFactoryInterface firstOrderMailClass = UnilogEcommFactory.getInstance()
								.getData(PropertyAction.getVersionControl().get("CustomServiceProvider"));
						if (firstOrderMailClass != null) {
							firstOrderMailClass.sendFirstOrderMail(erpOrderDetail, sendMailModel, firstOrder);
						}
						if (CommonUtility.customServiceUtility() != null
								&& (CommonUtility.validateString(request.getParameter("sendmailToSalesRepOnly"))
										.equalsIgnoreCase("Y"))) {
							CommonUtility.customServiceUtility().setSendMailToSalesRep(erpOrderDetail, sendMailModel,
									mailsent);
						}
						sendMailModel.setMailSubject("Order Confirmation");
						if(CommonUtility.customServiceUtility() != null) {
							CommonUtility.customServiceUtility().setMailSubject(erpOrderDetail,sendMailModel,session);
						}
						sendMailModel.setAdditionalComments(custComments != null ? custComments : "");
						sendMailModel.setAdditionalName(additionalName != null ? additionalName : "");
						sendMailModel.setAdditionalPickupPerson(
								additionalPickupPerson != null ? additionalPickupPerson : "");
						mailsent = sendMailUtility.sendOrderMail(erpOrderDetail, sendMailModel);
					}
					if (mailsent) {
						sql = "update orders set email_sent = 'Y' where order_id = ?";
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, erpOrderDetail.getOrderId());
						rs = pstmt.executeQuery();
					}

					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CREDITCARD_SAVE"))
							.equalsIgnoreCase("Y")) {
						SalesDAO.deleteAllCreditCardInfo(userId);
					}

					stmt = conn.prepareCall("{call ORDER_KEYWORD_PROC(?)}");
					stmt.setInt(1, erpOrderDetail.getOrderId());
					stmt.execute();

				}
				orderConfirmationV2(erpOrderDetail);
				boolean deleteCartFlag = true;
				if(isApproveCart!=null && isApproveCart.trim().equalsIgnoreCase("Y") && orderId>0){
					  try {
                            System.out.println("approve cart will take 30 seconds to send notification");
                            Thread.sleep(30000);
                            SalesDAO.approveCartDao(session, savedGroupId, orderId);
                            deleteCartFlag = false;
                        } catch (InterruptedException e) {
                            System.out.println(e);
                        }
				}
				if(deleteCartFlag) {
					if(!CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_DELETE_CART_ON_ORDER_FAIL")).equalsIgnoreCase("Y") || CommonUtility.validateString(erpOrderDetail.getErpOrderNumber()).length()>0){
						deleteFromCart(conn, userId);
					}
				}				
				System.out.println("Order - Confirmed");
				target = SUCCESS;
			} else {
				target = "SESSIONEXPIRED";
			}
			session.removeAttribute("orderingType");
			session.removeAttribute("calculateTax");

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBStatement(stmt);
			ConnectionManager.closeDBConnection(conn);
		}
		return target;

	}

	public String multiOrderSubmit() {
		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		CallableStatement stmt = null;
		Double approAmount = 0.0;
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionId = session.getId();
			resultData = new ArrayList<ProductsModel>();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String sequencePoNum = CommonUtility.validateString(request.getParameter("po"));
			String listPrice = CommonUtility.validateString(request.getParameter("listPrices"));
			String carton = CommonUtility.validateString(request.getParameter("carton"));
			int activeTaxonomyId = CommonUtility
					.validateNumber(CommonDBQuery.getSystemParamtersList().get("TAXONOMY_ID"));

			UnilogFactoryInterface poNumServiceClass = UnilogEcommFactory.getInstance()
					.getData(PropertyAction.getVersionControl().get("CustomServiceProvider"));
			if (poNumServiceClass != null && sequencePoNum.length() <= 0) {
				String poNumberSeq = poNumServiceClass.getPoSequenceId("ADAPT_P0_SEQ");
				if (poNumberSeq != null) {
					sequencePoNum = poNumberSeq;
				}
			}
			boolean flag = false;
			String anonymous = "N";
			String orderTax = CommonUtility.validateString((String) request.getParameter("orderTax"));
			String userSelectedLocation = CommonUtility
					.validateString((String) request.getParameter("selectedLocation"));
			String tempSubset = CommonUtility.validateString((String) session.getAttribute("userSubsetId"));
			int subsetId = CommonUtility.validateNumber(tempSubset);
			String tempGeneralSubset = CommonUtility.validateString((String) session.getAttribute("generalCatalog"));
			String tempBuyingCompany = CommonUtility.validateString((String) session.getAttribute("buyingCompanyId"));
			String shipViaDescription = "";
			String erpUserContactID = "";
			String totalCartFrieghtCharges = "";
			totalCartFrieghtCharges = CommonUtility.validateString(request.getParameter("totalCartFrieghtCharges"));
			String shipToWarehouse = CommonUtility.validateString(request.getParameter("shipToWarehouse")).trim();
			String overrideBill = CommonUtility.validateString(request.getParameter("overrideBill")).trim();
			String multiOrderShipment = (String) session.getAttribute("multiOrderShipment");

			if (CommonUtility.validateString(selectedBranch).trim().length() > 0) {
				session.setAttribute("salesLocationId", selectedBranch);
			}
			if (CommonUtility.validateString(userSelectedLocation).length() > 0) {
				String networkWarehouse = null;
				try {
					// CustomServiceProvider
					if (CommonUtility.customServiceUtility() != null) {
						networkWarehouse = CommonUtility.customServiceUtility()
								.getNetworkWarehouseCode(CommonUtility.validateString(userSelectedLocation));
					}
					// CustomServiceProvider
					if (networkWarehouse != null) {
						userSelectedLocation = CommonUtility.validateString(networkWarehouse).trim();
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			/*
			 * LinkedHashMap<String, String> userCustomFieldValue = (LinkedHashMap<String,
			 * String>) session.getAttribute("userCustomFieldValue");
			 * if(userCustomFieldValue!=null &&
			 * CommonUtility.validateString(userCustomFieldValue.get("CONTACT_ID")).length()
			 * >0){ erpUserContactID = userCustomFieldValue.get("CONTACT_ID"); }
			 */
			erpUserContactID = CommonUtility.validateString(UsersDAO.getContactID(userId));
			int buyingCompanyId = CommonUtility.validateNumber(tempBuyingCompany);
			if (!CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
					.equalsIgnoreCase("Y")) {
				if (CommonUtility.validateString((String) session.getAttribute("shipvia")).length() > 0) {
					shipVia = (String) session.getAttribute("shipvia");
				}

				if (CommonUtility.validateString(request.getParameter("shipViaDescription")).length() > 0) {
					shipViaDescription = CommonUtility.validateString(request.getParameter("shipViaDescription"));
				} else {
					if (session.getAttribute("shipViaMap") != null) {
						LinkedHashMap<String, String> shipViaMap = (LinkedHashMap<String, String>) session
								.getAttribute("shipViaMap");
						if (shipViaMap != null && !shipViaMap.isEmpty()) {
							shipViaDescription = shipViaMap.get(shipVia.toUpperCase());
						}
					}
				}
				String shipViaDisplay = null;
				if (session.getAttribute("shipViaMap") != null) {
					LinkedHashMap<String, String> shipViaMap = (LinkedHashMap<String, String>) session
							.getAttribute("shipViaMap");
					shipViaDisplay = shipViaMap.get(shipVia.toUpperCase());
				}
				System.out.println("shipViaDisplay------------" + shipViaDisplay);
			}
			if (CommonUtility.validateString(request.getParameter("shipViaDescription")).length() > 0) {
				shipViaDescription = CommonUtility.validateString(request.getParameter("shipViaDescription"));
			}
			AddressModel overrideShipAddress = null;

			if (!CommonUtility.validateString(multiOrderShipment).equalsIgnoreCase("Y")) {
				overrideShipAddress = (AddressModel) session.getAttribute("overrideShipAddress");
			}

			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			int orderId = 0;
			int cartCount = 0;
			session.setAttribute("creditCardFlag", "false");
			if (type != null && type.trim().equalsIgnoreCase("mobile") && mobileUserId != null) {
				sessionUserId = mobileUserId;
				session.removeAttribute("isReOrder");
				session.setAttribute("mobileUserName", mobileUserName);
				session.setAttribute("mobileUserId", mobileUserId);
				session.setAttribute(Global.USERID_KEY, mobileUserId);
				session.setAttribute(Global.USERNAME_KEY, mobileUserName);
			}
			if (type != null && type.trim().equalsIgnoreCase("mobile")) {
				if (session.getAttribute("mobileUserId") != null && session.getAttribute("mobileUserName") != null) {
					mobileUserId = (String) session.getAttribute("mobileUserId");
					session.setAttribute(Global.USERID_KEY, mobileUserId);
					mobileUserName = (String) session.getAttribute("mobileUserName");
					session.setAttribute(Global.USERNAME_KEY, mobileUserName);
					sessionUserId = mobileUserId;
				}
			}
			String overRideShipEmail = "";
			if (CommonUtility.validateString((String) session.getAttribute("overRideShipEmail")).trim().length() > 0) {
				overRideShipEmail = (String) session.getAttribute("overRideShipEmail");
				session.setAttribute("overRideShipEmail", overRideShipEmail);
			}
			String userToken = (String) session.getAttribute("userToken");
			String wareHousecode = (String) session.getAttribute("wareHouseCode");
			String customerCountry = (String) session.getAttribute("customerCountry");
			eclipseSessionId = userToken;
			String userName = (String) session.getAttribute(Global.USERNAME_KEY);
			String entityId = (String) session.getAttribute("entityId");
			String homeTerritory = (String) session.getAttribute("shipBranchId");
			ArrayList<String> partIdentifier = new ArrayList<String>();
			ArrayList<Integer> partIdentifierQuantity = new ArrayList<Integer>();
			String freeShipping = "no";
			String discountTypeCheck = "";
			String isApproveCart = (String) session.getAttribute("fromApproveCart");
			boolean nonCatalogItemFlag = false;
			boolean sendMailFlag = true;
			// Discount related values
			String discountCouponCode = null;
			double discountAmount = 0.0D;
			double orderTotalDiscountAmount = 0.0D;
			float discountInPercent = 0.00F;
			String discountCouponType = null;
			String checkAccount = null;
			StringBuilder orderDiscountCoupons = new StringBuilder();
			try {
				conn = ConnectionManager.getDBConnection();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			int siteId = 0;
			if (CommonDBQuery.getGlobalSiteId() > 0) {
				siteId = CommonDBQuery.getGlobalSiteId();
			}
			String cartSortByValue = "";
			String cartSortColumn = "";
			if (session.getAttribute("cartSortByValue") != null) {
				cartSortByValue = CommonUtility.validateString(session.getAttribute("cartSortByValue").toString());
				String[] sortCoumnArray = cartSortByValue.split(" ");
				if (sortCoumnArray != null && sortCoumnArray.length > 0) {
					cartSortColumn = CommonUtility.validateString(sortCoumnArray[0]);
				}
			}
			if (CommonUtility.validateString(poNumber).trim().length() < 1 && session != null
					&& session.getAttribute("poNumber") != null
					&& CommonUtility.validateString(session.getAttribute("poNumber").toString()).length() > 0) {
				poNumber = (String) session.getAttribute("poNumber");
			}
			session.removeAttribute("poNumber");
			session.removeAttribute("shippingInstruction");
			session.removeAttribute("orderNotes");
			session.removeAttribute("reqDate");
			session.removeAttribute("sortBy");
			session.removeAttribute("QuoteCartTotal");
			session.removeAttribute("QuoteCartCount");

			if (userId > 1) {
				String sql = "";
				if (ProductsDAO.getSubsetIdFromName(
						CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
					generalSubset = ProductsDAO
							.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
				}
				if (isReOrder != null && isReOrder.trim().equalsIgnoreCase("Y")) {
					sql = PropertyAction.SqlContainer.get("getQuoteCartItemDetailQuery");
					if (CommonUtility.validateString(cartSortColumn).length() > 0
							&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
						sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
					}
					pstmt = conn.prepareStatement(sql);
					pstmt.setString(1, sessionId);
					pstmt.setInt(2, subsetId);
					pstmt.setInt(3, activeTaxonomyId);
					pstmt.setString(4, sessionId);
					pstmt.setInt(5, generalSubset);
					pstmt.setInt(6, activeTaxonomyId);
					pstmt.setString(7, sessionId);
					pstmt.setInt(8, subsetId);
					rs = pstmt.executeQuery();
				} else {
					if (savedGroupId == 0 && isFromQC != null && isFromQC.trim().equalsIgnoreCase("Yes")) {
						// sessionId = sessionId+".QUICKCART";
						sql = PropertyAction.SqlContainer.get("getCartItemDetailQueryBySession");
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, siteId);
						pstmt.setInt(2, userId);
						pstmt.setString(3, sessionId);
						pstmt.setInt(4, subsetId);
						pstmt.setInt(5, siteId);
						pstmt.setInt(6, userId);
						pstmt.setString(7, sessionId);
						pstmt.setInt(8, subsetId);
						pstmt.setInt(9, siteId);
						pstmt.setInt(10, userId);
						pstmt.setString(11, sessionId);
						pstmt.setInt(12, subsetId);
						rs = pstmt.executeQuery();
					} else if (savedGroupId == 0) {
						sql = PropertyAction.SqlContainer.get("getCartItemDetailQuery");
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, siteId);
						pstmt.setInt(2, userId);
						pstmt.setInt(3, subsetId);
						pstmt.setInt(4, siteId);
						pstmt.setInt(5, userId);
						pstmt.setInt(6, generalSubset);
						pstmt.setInt(7, siteId);
						pstmt.setInt(8, userId);
						pstmt.setInt(9, subsetId);
						rs = pstmt.executeQuery();
					} else {
						sql = PropertyAction.SqlContainer.get("selectGroupItem");
						if (CommonUtility.validateString(cartSortColumn).length() > 0
								&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
							sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
						}

						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, savedGroupId);
						pstmt.setInt(2, userId);
						pstmt.setInt(3, buyingCompanyId);
						pstmt.setInt(4, subsetId);
						pstmt.setInt(5, activeTaxonomyId);
						pstmt.setInt(6, savedGroupId);
						pstmt.setInt(7, userId);
						pstmt.setInt(8, buyingCompanyId);
						pstmt.setInt(9, generalSubset);
						pstmt.setInt(10, activeTaxonomyId);
						pstmt.setInt(11, savedGroupId);
						pstmt.setInt(12, subsetId);

						rs = pstmt.executeQuery();
					}
				}

				ArrayList<SalesModel> erpOrderDetailList = new ArrayList<>();
				SalesModel erpOrderDetail = null;
				HashMap<String, Integer> userAddressId = null;
				SalesModel defaultOrderDetail = null;

				// Submit Multiple Order with multiple shipping addresses in Adapt Pharma
				while (rs.next()) {
					cartCount++;

					// Before item loop
					if (type != null && type.trim().equalsIgnoreCase("mobile") && mobileUserId != null) {
						userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(mobileUserName);
					} else {
						userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(
								(String) session.getAttribute(Global.USERNAME_KEY));
					}
					defaultBillToId = userAddressId.get("Bill");
					session.setAttribute("defaultBillToId", "" + defaultBillToId);
					defaultShipToId = rs.getInt("BC_ADDRESS_BOOK_ID");
					if (defaultShipToId == 0) {
						defaultShipToId = CommonUtility
								.validateNumber((String) session.getAttribute("defaultShipToId"));
					}

					HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
							defaultShipToId);
					String shipBranch = (String) session.getAttribute("shipBranchId");
					String homeBranch = (String) session.getAttribute("homeBranchId");
					if (shipVia != null
							&& (shipVia.trim().toUpperCase().contains("WILL CALL")
									|| shipVia.trim().toUpperCase().contains("CUSTOMER PICK UP"))
							&& CommonUtility.validateString(shipBranch).length() > 0) {
						selectedBranch = shipBranch;
					} else if (CommonUtility.validateString(shipBranch).length() > 0 && CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("DISABLE_HOME_BRANCH_ON_ORDERSUBMIT"))
							.equalsIgnoreCase("Y")) {
						selectedBranch = shipBranch;
					} else if (homeBranch != null && homeBranch.trim().length() > 0) {
						selectedBranch = homeBranch;
					} else {
						selectedBranch = "";
					}
					UsersModel userBillAddress = userAddress.get("Bill");
					userBillAddress.setShippingInstruction(shippingInstruction);
					userBillAddress.setOrderedBy(orderedBy);
					userBillAddress.setOrderNotes(orderNotes);
					userBillAddress.setReqDate(reqDate);
					if (session != null && session.getAttribute("overrideBillAddress") != null) {
						AddressModel overrideBillAddress = (AddressModel) session.getAttribute("overrideBillAddress");
						if (overrideBillAddress != null) {
							if (CommonUtility.validateString(userBillAddress.getEmailAddress()).length() < 1) {
								userBillAddress.setEmailAddress(
										CommonUtility.validateString(overrideBillAddress.getEmailAddress()));
							} else if (CommonUtility.validateString(overrideBill).trim().equalsIgnoreCase("Y")) {
								userBillAddress.setEmailAddress(
										CommonUtility.validateString(overrideBillAddress.getEmailAddress()));
							}
							if (CommonUtility.validateString(userBillAddress.getPhoneNo()).length() < 1) {
								userBillAddress
										.setPhoneNo(CommonUtility.validateString(overrideBillAddress.getPhoneNo()));
							}
						}
					}

					UsersModel userShipAddress = userAddress.get("Ship");
					String shipTofirstName = userShipAddress.getFirstName();
					String shipToLastName = userShipAddress.getLastName();
					session.setAttribute("shipTofirstName", shipTofirstName);
					session.setAttribute("shipToLastName", shipToLastName);
					if (userShipAddress != null
							&& CommonUtility.validateString(overRideShipEmail).trim().length() > 0) {
						userShipAddress.setEmailAddress(overRideShipEmail);
					}
					userShipAddress.setShippingInstruction(CommonUtility.validateString(shippingInstruction));
					userShipAddress.setOrderedBy(orderedBy);
					userShipAddress.setOrderNotes(orderNotes);
					userShipAddress.setReqDate(reqDate);
					// userShipAddress.setFirstName((String)session.getAttribute("userFirstName"));
					// userShipAddress.setLastName((String)session.getAttribute("userLastName"));
					if (overrideShipAddress != null) {
						userBillAddress
								.setCustomerName(CommonUtility.validateString(overrideShipAddress.getCompanyName()));// override
																														// company
																														// name
																														// ill
																														// be
																														// stored
																														// in
																														// orders
																														// and
																														// also
																														// send
																														// in
																														// mail.
						userShipAddress
								.setCompanyName(CommonUtility.validateString(overrideShipAddress.getCompanyName()));
						userShipAddress.setAddress1(CommonUtility.validateString(overrideShipAddress.getAddress1()));
						userShipAddress.setAddress2(CommonUtility.validateString(overrideShipAddress.getAddress2()));
						userShipAddress.setCity(CommonUtility.validateString(overrideShipAddress.getCity()));
						userShipAddress.setState(CommonUtility.validateString(overrideShipAddress.getState()));
						userShipAddress.setCountry(CommonUtility.validateString(overrideShipAddress.getCountry()));
						userShipAddress.setZipCode(CommonUtility.validateString(overrideShipAddress.getZipCode()));
						userShipAddress
								.setZipCodeStringFormat(CommonUtility.validateString(overrideShipAddress.getZipCode()));
						userShipAddress.setPhoneNo(CommonUtility.validateString(overrideShipAddress.getPhoneNo()));
						userShipAddress
								.setEmailAddress(CommonUtility.validateString(overrideShipAddress.getEmailAddress()));
						if (overrideShipAddress.getShipToId() != null
								&& overrideShipAddress.getShipToId().length() > 0) {
							userShipAddress.setShipToId(overrideShipAddress.getShipToId());
						}
					}
					billEntityId = userAddress.get("Bill").getEntityId();
					shipEntityId = userAddress.get("Ship").getEntityId();
					UsersModel userDefaultAddress = new UsersModel();
					userDefaultAddress.setAddress1(address1);
					userDefaultAddress.setAddress2(address2);
					userDefaultAddress.setCity(city);
					userDefaultAddress.setState(state);
					userDefaultAddress.setZipCodeStringFormat(zipCode);
					userDefaultAddress.setCountry(country);
					userDefaultAddress.setPhoneNo(phoneNumber);
					userDefaultAddress.setOrderNotes(orderNotes);
					userDefaultAddress.setShippingInstruction(shippingInstruction);
					userDefaultAddress.setOrderedBy(orderedBy);
					userDefaultAddress.setOrderStatus(orderStatus);
					userDefaultAddress.setCustomerReleaseNumber(customerReleaseNumber);
					userDefaultAddress.setReqDate(reqDate);
					userDefaultAddress.setEmailAddress(email);

					ArrayList<ProductsModel> itemDetailObject = new ArrayList<ProductsModel>();
					LinkedHashMap<String, String> lineItemCommentList = new LinkedHashMap<String, String>();
					LinkedHashMap<String, Integer> UOMQTY = new LinkedHashMap<String, Integer>();
					ArrayList<ProductsModel> partIdentifiersList = new ArrayList<ProductsModel>();

					defaultOrderDetail = new SalesModel();
					LinkedHashMap<String, Object> orderDetailsForDefault = new LinkedHashMap<String, Object>();
					double orderSubTotal = 0.0;
					if (request.getParameter("orderSubTotal") != null) {
						orderSubTotal = CommonUtility.validateDoubleNumber(request.getParameter("orderSubTotal"));
					}

					double orderGrandTotal = 0.0;
					String c = "";
					String idList = "";
					// Before item loop

					// Item list loop start from here
					if (rs.getInt("ITEM_ID") == CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						nonCatalogItemFlag = true;
					}
					if (cartCount == 1) {
						String paymentMethod = "Purchase Order";
						if ((CommonUtility.validateString(payPalToken).length() > 0
								&& CommonUtility.validateString(payPalPayerId).length() > 0)
								|| (CommonUtility.validateString(creditCardPayment).equalsIgnoreCase("Y")
										&& CommonUtility.validateString(ccTransactionId).length() > 0)) {
							String paymentGatewayType = "";
							if (session.getAttribute("PAYMENT_GATEWAY") != null
									&& session.getAttribute("PAYMENT_GATEWAY").toString().length() > 0) {
								paymentGatewayType = (String) session.getAttribute("PAYMENT_GATEWAY");
							} else {
								paymentGatewayType = CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY");
							}

							if (CommonUtility.validateString(payPalToken).length() > 0
									&& CommonUtility.validateString(payPalPayerId).length() > 0) {
								creditCardValue = new CreditCardModel();
								creditCardValue.setPayPalPayerId(CommonUtility.validateString(payPalPayerId));
								creditCardValue.setPayPalToken(CommonUtility.validateString(payPalToken));
								paymentMethod = "PayPal";
							} else {
								ccNumber = ccNumber.replaceAll("XXXX-", "");
								ccNumber = ccNumber.replaceAll("\\*", "");
								ccNumber = ccNumber.replaceAll("#", "");
								ccNumber = ccNumber.replaceAll("-", "");
								creditCardValue = new CreditCardModel();
								creditCardValue.setCardHolder(cardHolder);
								creditCardValue.setDate(ccExp);
								creditCardValue.setElementPaymentAccountId(ccTransactionId);
								creditCardValue.setAddress1(streetAddress);
								creditCardValue.setZipCode(postalCode);

								creditCardValue.setPaymentGatewayType(paymentGatewayType);

								creditCardValue.setCreditCardResponseCode(ccResponseCode);
								creditCardValue.setCreditCardStatus(ccStatus);
								creditCardValue.setCreditCardHostRefNumber(ccHostRefNumber);
								creditCardValue.setCreditCardTaskID(ccTaskID);
								creditCardValue.setCreditCardAmount(ccAmount);
								creditCardValue.setCreditCardDeclineResponseReason(ccDeclineResponseReason);
								creditCardValue.setCreditCardCvv2VrfyCode(ccCvv2VrfyCode);
								creditCardValue.setCreditCardTip(ccTip);
								creditCardValue.setCreditCardTransTimeStamp(ccTransTimeStamp);
								creditCardValue.setCreditCardToken(ccToken);
								creditCardValue.setCreditCardApprovedAmount(ccApprovedAmount);
								creditCardValue.setCreditCardRequestedAmount(ccRequestedAmount);
								creditCardValue.setCreditCardHostResponseCode(ccHostResponseCode);
								creditCardValue.setCreditCardInvoice(ccInvoice);
								creditCardValue.setCreditCardApprovalCode(ccApprovalCode);
								creditCardValue.setCreditCardTransactionID(ccTransactionId);
								creditCardValue.setCreditCardServerTimestamp(ccServerTimestamp);
								if (CommonUtility
										.validateString(
												CommonDBQuery.getSystemParamtersList().get("P21_CREDIT_CARD_TYPES"))
										.equalsIgnoreCase("Y")) {
									if (!CommonUtility.validateString(ccType).equalsIgnoreCase("")) {
										List<CustomTable> creditCardType = CIMM2VelocityTool.getInstance()
												.getCusomTableData("Website", "CREDIT_CARD_TYPE");
										String credictCardCode = CIMM2VelocityTool.getInstance()
												.getCreditCardCode(creditCardType, ccType);
										if (credictCardCode != null) {
											creditCardValue.setCreditCardType(credictCardCode);
										} else {
											creditCardValue.setCreditCardType(ccType);
										}
									}
								} else {
									creditCardValue.setCreditCardType(ccType);
								}
								System.out.println("Credit card Type--------:" + ccType);
								creditCardValue.setCreditCardFee(ccFee);
								creditCardValue.setCreditCardExternalSessionID(ccExternalSessionID);
								creditCardValue.setCreditCardAddVrfyCode(ccAddVrfyCode);
								creditCardValue.setCreditCardTax(ccTax);
								creditCardValue.setCreditCardNewDomainKey(ccNewDomainKey);
								creditCardValue.setCreditCardNumber(ccNumber);
								creditCardValue.setCreditCardRefNumber(ccRefrenceCode);
								creditCardValue.setCreditCardActualOrderTotal(actualOrderTotal);
								creditCardValue.setCreditCardMerchantId(ccMerchantId);
								creditCardValue.setSaveCard(saveCard);
								paymentMethod = "Credit Card";
							}
							session.setAttribute("creditCardFlag", "true");
							if (ccOrderNumber != null && ccOrderNumber.trim().length() > 0) {
								orderId = CommonUtility.validateNumber(ccOrderNumber);
							}
							if (CommonUtility.validateString(
									CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION"))
									.length() > 0) {
								userBillAddress.setShippingInstruction(
										CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
												+ shippingInstruction);
								userShipAddress.setShippingInstruction(
										CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
												+ shippingInstruction);
								userDefaultAddress.setShippingInstruction(
										CommonDBQuery.getSystemParamtersList().get("CREDITCARD_SHIPPINGINSTRUCTION")
												+ shippingInstruction);
								shippingInstruction = CommonDBQuery.getSystemParamtersList()
										.get("CREDITCARD_SHIPPINGINSTRUCTION") + shippingInstruction;
							}
						}
						System.out.println("ccTransID : " + ccTransactionId);
						String ipaddress = request.getHeader("X-Forwarded-For");

						if (ipaddress == null)
							ipaddress = request.getRemoteAddr();// userDefaultAddress

						String refKey = "";
						if (ccRefrenceCode != null && ccRefrenceCode.trim().length() > 0) {
							refKey = ccRefrenceCode;
						}
						String homeBranchId = (String) session.getAttribute("homeBranchId");
						String homeBranchName = (String) session.getAttribute("homeBranchName");
						String shipBranchId = (String) session.getAttribute("shipBranchId");
						String shipBranchName = (String) session.getAttribute("shipBranchName");

						LinkedHashMap<String, Object> orderDetails = new LinkedHashMap<String, Object>();
						orderDetails.put("homeBranchId", homeBranchId);
						orderDetails.put("homeBranchName", homeBranchName);
						orderDetails.put("shipBranchId", shipBranchId);
						orderDetails.put("shipBranchName", shipBranchName);
						orderDetails.put("wareHousecode", wareHousecode);
						orderDetails.put("gasPoNumber", gasPoNumber);
						userBillAddress.setSession(session);
						Discount orderShippingDiscount = getOrderShippingDiscount(session);
						if (orderShippingDiscount != null) {
							try {
								buyingCompanyId = Integer.parseInt(session.getAttribute("buyingCompanyId").toString());
								String website = (String) session.getAttribute("websiteName");
								if (orderId <= 0) {
									orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
								}
								orderDetails.put(SalesActionContantVariables.ORDER_ID, orderId);
								orderDetails.put(SalesActionContantVariables.USER_ID, userId);
								// save Order Level Discount
								SalesPromotionService salesPromo = SalesPromotionService.getInstance();
								if (orderShippingDiscount != null) {
									discountTypeCheck = orderShippingDiscount.getDiscountType().name();
									if (salesPromo.storeCouponUsed(orderShippingDiscount, String.valueOf(orderId),
											userId, buyingCompanyId, website)
											&& CommonUtility.validateString(discountTypeCheck).length() > 0
											&& discountTypeCheck.equals("FREE_SHIPPING")) {
										freeShipping = "yes";
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
												String.valueOf(orderShippingDiscount.getDiscountValue()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
												String.valueOf(orderShippingDiscount.getDiscountInPercent()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
												orderShippingDiscount.getDiscountCoupon().getCopounCode());
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
												orderShippingDiscount.getDiscountType().name());
										orderDetails.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
												SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
										orderDetails = SalesDAO.CouponDataCrud(orderDetails);

										// appending coupon codes
										orderDiscountCoupons.append(
												orderShippingDiscount.getDiscountCoupon().getCopounCode() + ";");
									}
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
						// Order Discount
						List<Discount> orderDiscounts = getOrderDiscount(session);
						if (orderDiscounts != null && orderDiscounts.size() > 0) {
							for (Discount orderDiscount : orderDiscounts) {

								try {
									buyingCompanyId = Integer
											.parseInt(session.getAttribute("buyingCompanyId").toString());
									String website = (String) session.getAttribute("websiteName");
									if (orderId <= 0) {
										orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
									}
									orderDetails.put(SalesActionContantVariables.ORDER_ID, orderId);
									orderDetails.put(SalesActionContantVariables.USER_ID, userId);
									// save Order Level Discount
									SalesPromotionService salesPromo = SalesPromotionService.getInstance();
									if (salesPromo.storeCouponUsed(orderDiscount, String.valueOf(orderId), userId,
											buyingCompanyId, website)) {
										orderTotalDiscountAmount += orderDiscount.getDiscountValue();
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
												decimal2Fmt.format(orderDiscount.getDiscountValue()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
												String.valueOf(orderDiscount.getDiscountInPercent()));
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
												orderDiscount.getDiscountCoupon().getCopounCode());
										orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
												orderDiscount.getDiscountType().name());
										orderDetails.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
												SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
										orderDetails = SalesDAO.CouponDataCrud(orderDetails);

										orderDiscountCoupons
												.append(orderDiscount.getDiscountCoupon().getCopounCode() + ";");
									}
								} catch (Exception e) {
									e.printStackTrace();
								}
							}
						}
						// setting order coupons to Order detials to save in orders table and total
						orderDetails.put("discountCouponCode", orderDiscountCoupons.toString());
						orderDetails.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
								decimal2Fmt.format(orderTotalDiscountAmount));
						orderDetailsForDefault = orderDetails;
					}
					ProductsModel partIdentifiers = new ProductsModel();
					int packageQty = 1;
					int qty = rs.getInt("QTY");
					if (rs.getInt("PACKAGE_FLAG") > 0) {
						if (rs.getInt("PACKAGE_QTY") > 0) {
							packageQty = rs.getInt("PACKAGE_QTY");
						}
					}
					String lineComment = "";
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.validateString(rs.getString("ITEM_LEVEL_SHIPVIA")).length() > 0
								&& CommonUtility.validateString(shipVia).equals("MULTIPLE")) {
							lineComment = "Ship Method : " + rs.getString("ITEM_LEVEL_SHIPVIA");
						}
					}
					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("ITEM_LEVEL_SHIPVIA_REQUIREDBY_DATE"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.validateString(rs.getString("ITEMLEVEL_REQUIREDBYDATE")).length() > 0) {
							lineComment = "Required By Date : " + rs.getString("ITEMLEVEL_REQUIREDBYDATE");
						}
					}
					if (CommonUtility.validateString(rs.getString("LINE_ITEM_COMMENT")).length() > 0) {
						if (CommonUtility.validateString(lineComment).length() > 0) {
							lineComment = lineComment + " | " + "LineItemComment : "
									+ rs.getString("LINE_ITEM_COMMENT");
						} else {
							lineComment = rs.getString("LINE_ITEM_COMMENT");
						}
					}
					ProductsModel saveItems = new ProductsModel();
					saveItems.setCartId(rs.getInt("CART_ID"));
					saveItems.setItemId(rs.getInt("ITEM_ID"));
					saveItems.setInvoiceDesc(rs.getString("INVOICE_DESC"));
					saveItems.setSalesUom(rs.getString("SALES_UOM"));
					saveItems.setPackDesc(rs.getString("PACK_DESC"));
					saveItems.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
					saveItems.setItemLevelRequiredByDate(rs.getString("ITEMLEVEL_REQUIREDBYDATE"));
					saveItems.setCatalogId(rs.getString("CATALOG_ID"));
					saveItems.setShipViaCode(rs.getString("ITEM_LEVEL_SHIPVIA"));
					saveItems.setQty(qty);
					saveItems.setShortDesc(rs.getString("SHORT_DESC"));
					saveItems.setShipViaDesc(rs.getString("ITEM_LEVEL_SHIPVIA_DESC"));
					saveItems.setCustomerPartNumber("");
					if (CommonUtility.checkDBColumn(rs, "GET_PRICE_FROM")) {
						saveItems.setGetPriceFrom(rs.getString("GET_PRICE_FROM"));
						if (CommonUtility.validateString(rs.getString("GET_PRICE_FROM")).equalsIgnoreCase("CART")) {
							saveItems.setCustomerPrice(rs.getDouble("PRICE"));
						}
					}
					saveItems.setManufacturerName(rs.getString("MANUFACTURER_NAME"));
					if (rs.findColumn("UOM") > 0) {
						saveItems.setUom(rs.getString("UOM"));
					}
					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						saveItems.setPartNumber(rs.getString("PART_NUMBER"));
						saveItems.setShortDesc(rs.getString("SHORT_DESC"));
						saveItems.setUnitPrice(rs.getDouble("EXTPRICE") / rs.getInt("QTY"));
						saveItems.setExtendedPrice(rs.getDouble("EXTPRICE"));
						saveItems.setAltPartNumber1(rs.getString("ALT_PART_NUMBER1"));
						saveItems.setPrice(rs.getDouble("EXTPRICE"));
						partIdentifiers.setErpPartNumber(rs.getString("PART_NUMBER"));
						partIdentifiersList.add(partIdentifiers);
						UOMQTY.put(rs.getString("PART_NUMBER"), packageQty);
						lineItemCommentList.put(rs.getString("PART_NUMBER"), lineComment);
					} else {
						saveItems.setPartNumber(rs.getString("NC_PART_NUMBER"));
						saveItems.setShortDesc(rs.getString("SHORT_DESCRIPTION"));
						saveItems.setUnitPrice(rs.getDouble("PRICE"));
						saveItems.setExtendedPrice(rs.getDouble("PRICE") * rs.getInt("QTY"));
						saveItems.setPrice(rs.getDouble("PRICE") * rs.getInt("QTY"));
						saveItems.setShortDesc(rs.getString("SHORT_DESC"));
						saveItems.setBcAddressBookId(rs.getInt("BC_ADDRESS_BOOK_ID"));

						partIdentifiers.setErpPartNumber(rs.getString("NC_PART_NUMBER"));
						UOMQTY.put(rs.getString("NC_PART_NUMBER"), packageQty);
						lineItemCommentList.put(rs.getString("NC_PART_NUMBER"), lineComment);
					}
					// Order Item discount updation
					Discount itemDiscount = getItemDiscount(session, rs.getInt("CART_ID"), rs.getString("PART_NUMBER"),
							rs.getInt("QTY"));

					if (itemDiscount != null) {
						try {
							buyingCompanyId = Integer.parseInt(session.getAttribute("buyingCompanyId").toString());
							String website = (String) session.getAttribute("websiteName");

							// save Item Level Discount
							SalesPromotionService salesPromo = SalesPromotionService.getInstance();
							if (salesPromo.storeCouponUsed(itemDiscount, String.valueOf(orderId), userId,
									buyingCompanyId, website)) {
								discountCouponCode = itemDiscount.getDiscountCoupon().getCopounCode();
								discountAmount = itemDiscount.getDiscountValue();
								discountInPercent = itemDiscount.getDiscountInPercent();
								discountCouponType = itemDiscount.getDiscountType().name();
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
					ProductsDAO.updatePopularity(rs.getInt("ITEM_ID"), 3);
					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						orderSubTotal = orderSubTotal + (rs.getDouble("EXTPRICE") - 0);
					} else {
						orderSubTotal = orderSubTotal + ((rs.getDouble("PRICE") * rs.getInt("QTY")) - 0);
					}
					// orderSubTotal = orderSubTotal+(rs.getDouble("EXTPRICE"));
					flag = true;

					ProductsModel itmVal = new ProductsModel();
					itmVal.setItemId(rs.getInt("ITEM_ID"));
					itmVal.setOverRidePriceRule(rs.getString("OVERRIDE_PRICE_RULE"));
					itmVal.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
					itmVal.setPrice(rs.getDouble("PRICE"));
					itmVal.setAltPartNumber1(rs.getString("ALT_PART_NUMBER1"));
					itmVal.setAltPartNumber2(rs.getString("ALT_PART_NUMBER2"));
					if (CommonUtility.validateString(rs.getString("OVERRIDE_PRICE_RULE")).trim()
							.equalsIgnoreCase("Y")) {
						itmVal.setPrice(rs.getDouble("NET_PRICE"));
					}
					itmVal.setShortDesc(rs.getString("SHORT_DESC"));
					itmVal.setCustomerPrice(rs.getDouble("PRICE"));
					itmVal.setListPrice(rs.getDouble("PRICE"));
					itmVal.setQty(rs.getInt("QTY"));

					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						itmVal.setPartNumber(rs.getString("PART_NUMBER"));
						itmVal.setUnitPrice(rs.getDouble("EXTPRICE") / rs.getInt("QTY"));
					} else {
						itmVal.setPartNumber(rs.getString("NC_PART_NUMBER"));
						itmVal.setUnitPrice(rs.getDouble("PRICE"));
						if (CommonUtility.validateString(rs.getString("OVERRIDE_PRICE_RULE")).trim()
								.equalsIgnoreCase("Y")) {
							itmVal.setUnitPrice(rs.getDouble("NET_PRICE"));
						}
					}
					if (CommonUtility.checkDBColumn(rs, "GET_PRICE_FROM")) {
						itmVal.setGetPriceFrom(rs.getString("GET_PRICE_FROM"));
					}

					if (discountAmount > 0) {
						itmVal.setDiscountType("$");
						itmVal.setDiscountValue("" + discountAmount);
					}
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.checkDBColumn(rs, "ITEM_LEVEL_SHIPVIA")) {
							itmVal.setMultipleShipVia(rs.getString("ITEM_LEVEL_SHIPVIA"));
						}
						if (CommonUtility.checkDBColumn(rs, "ITEM_LEVEL_SHIPVIA_DESC")) {
							itmVal.setMultipleShipViaDesc(rs.getString("ITEM_LEVEL_SHIPVIA_DESC"));
						}
					}

					if (rs.getInt("ITEM_ID") != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						idList = idList + c + rs.getInt("ITEM_ID");
						c = " OR ";
						partIdentifier.add(rs.getString("PART_NUMBER"));
					} else {
						partIdentifier.add(rs.getString("NC_PART_NUMBER"));
					}

					partIdentifierQuantity.add(rs.getInt("QTY"));
					if (rs.findColumn("UOM") > 0) {
						itmVal.setUom(rs.getString("UOM"));
					}
					itmVal.setBcAddressBookId(rs.getInt("BC_ADDRESS_BOOK_ID"));

					if (CommonUtility.customServiceUtility() != null) {
						CommonUtility.customServiceUtility().orderItem(itmVal, rs.getString("PAGE_TITLE"),
								String.valueOf(itmVal.getPrice()), carton);
					}

					itemDetailObject.add(itmVal);

					// Loop end for Multiple Items here --- Continuing from here from multiple
					// Shipping Address Order

					LinkedHashMap<Integer, ArrayList<ProductsModel>> customerPartNumber = null;
					if (CommonUtility.validateString(idList).length() > 0) {
						customerPartNumber = ProductHunterSolr.getcustomerPartnumber(idList, buyingCompanyId,
								buyingCompanyId);
					}
					if (customerPartNumber != null && customerPartNumber.size() > 0) {
						for (ProductsModel item : itemDetailObject) {
							item.setCustomerPartNumberList(customerPartNumber.get(item.getItemId()));
						}
					}
					if (itemDetailObject != null && itemDetailObject.size() > 0 && eclipseSessionId != null
							&& !eclipseSessionId.trim().equalsIgnoreCase("")) {
						// Call erp for price
						ProductManagement priceInquiry = new ProductManagementImpl();
						ProductManagementModel priceInquiryInput = new ProductManagementModel();
						priceInquiryInput.setEntityId(CommonUtility.validateString(entityId));
						priceInquiryInput.setHomeTerritory(homeTerritory);
						priceInquiryInput.setPartIdentifier(itemDetailObject);
						priceInquiryInput.setPartIdentifierQuantity(partIdentifierQuantity);
						priceInquiryInput.setRequiredAvailabilty("Y");
						priceInquiryInput.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
						priceInquiryInput.setUserToken((String) session.getAttribute("userToken"));
						priceInquiryInput.setSession(session);
						itemDetailObject = priceInquiry.priceInquiry(priceInquiryInput, itemDetailObject);
						if (CommonUtility.validateString(
								CommonDBQuery.getSystemParamtersList().get("SAVE_LEADTIME_ON_ORDER_CONFIRMATION"))
								.equalsIgnoreCase("Y")) {
							ProductManagementModel leadInquiry = new ProductManagementModel();
							leadInquiry.setHomeTerritory(
									CommonUtility.validateString((String) session.getAttribute("wareHouseCode")));
							leadInquiry.setPartIdentifier(itemDetailObject);
							String leadTimeData = priceInquiry.ajaxBasePriceAndLeadTime(leadInquiry);
							Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
							ProductsModelArray gsonParsed = gson.fromJson("{\"products\":" + leadTimeData + "}",
									ProductsModelArray.class);
							for (ProductsModel eachItem : itemDetailObject) {
								for (ProductsModel eachLeadItem : gsonParsed.getProducts()) {
									if (eachItem.getPartNumber().equalsIgnoreCase(eachLeadItem.getPartNumber())) {
										if (eachItem.getHomeBranchavailablity() == 0) {
											if (eachLeadItem.getLeadTime() == 0) {
												eachItem.setLeadTime(5);
											} else {
												eachItem.setLeadTime(eachLeadItem.getLeadTime());
											}
										} else {
											eachItem.setLeadTime(-1);
										}
									}

								}
							}
						}
						if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("UMQTY_FROM_ERP"))
								.equalsIgnoreCase("Y")) {
							for (ProductsModel item : itemDetailObject) {
								// UOMQTY.put(item.getPartNumber(),CommonUtility.validateNumber(item.getQtyUOM()));
								UOMQTY.put(item.getPartNumber(), (item.getUomQty() > 0 ? item.getUomQty() : 1));
							}
						}
					}
					orderGrandTotal = orderSubTotal + CommonUtility.validateDoubleNumber(orderTax)
							+ CommonUtility.validateDoubleNumber(orderFreight);
					System.out.println("orderGrandTotal----:" + orderGrandTotal);
					LinkedHashMap<Integer, ProductsModel> allItemsData = new LinkedHashMap<Integer, ProductsModel>();
					for (ProductsModel item : itemDetailObject) {
						allItemsData.put(item.getItemId(), item);
					}

					erpOrderDetail = new SalesModel();

					if (flag) {
						String quoteNumber = (String) session.getAttribute("quoteNumber");
						orderGrandTotal = orderSubTotal;
						defaultOrderDetail.setSubtotal(orderSubTotal);
						defaultOrderDetail.setTotal(orderGrandTotal);
						defaultOrderDetail.setOrderedBy(orderedBy);
						defaultOrderDetail.setStatusDescription("Order Successfully Submitted");
						defaultOrderDetail.setOrderNotes(orderNotes);
						defaultOrderDetail.setShippingInstruction(shippingInstruction);
						defaultOrderDetail.setReqDate(reqDate);
						defaultOrderDetail.setShipViaID(shipVia);
						defaultOrderDetail.setShipViaDescription(shipViaDescription);
						defaultOrderDetail.setFreight(CommonUtility.validateDoubleNumber(orderFreight));
						defaultOrderDetail.setTax(CommonUtility.validateDoubleNumber(orderTax));

						AddressModel selectedShipAddress = new AddressModel();
						if (CommonUtility.validateString(multiOrderShipment).equalsIgnoreCase("Y")) {
							if (userShipAddress != null
									&& CommonUtility.validateString(overRideShipEmail).trim().length() > 0) {
								selectedShipAddress.setEmailAddress(overRideShipEmail);
							} else {
								selectedShipAddress.setEmailAddress(userShipAddress.getEmailAddress());
							}
							selectedShipAddress.setAddress1(userShipAddress.getAddress1());
							if (CommonUtility.validateString(shippingAccountNumber).length() > 0) {
								checkAccount = "Ship Acct No." + shippingAccountNumber;
							} else {
								checkAccount = "";
							}
							if (CommonUtility.validateString(userShipAddress.getAddress2()).length() > 0) {
								selectedShipAddress.setAddress2(userShipAddress.getAddress2() + " " + checkAccount);
							} else {
								selectedShipAddress.setAddress2(checkAccount);
							}
							selectedShipAddress.setCity(userShipAddress.getCity());
							selectedShipAddress.setState(userShipAddress.getState());
							selectedShipAddress.setZipCode(userShipAddress.getZipCode());
							selectedShipAddress.setCountry(userShipAddress.getCountry());
							selectedShipAddress.setPhoneNo(userShipAddress.getPhoneNo());
							selectedShipAddress.setEntityId(userShipAddress.getEntityId());
							selectedShipAddress.setShipToId(userShipAddress.getShipToId());
						} else {
							selectedShipAddress.setAddress1(address1);
							if (CommonUtility.validateString(shippingAccountNumber).length() > 0) {
								checkAccount = "Ship Acct No." + shippingAccountNumber;
							} else {
								checkAccount = "";
							}
							if (CommonUtility.validateString(address2).length() > 0) {
								selectedShipAddress.setAddress2(address2 + " " + checkAccount);
							} else {
								selectedShipAddress.setAddress2(checkAccount);
							}
							selectedShipAddress.setCity(city);
							selectedShipAddress.setState(state);
							selectedShipAddress.setZipCode(zipCode);
							selectedShipAddress.setCountry(country);
							selectedShipAddress.setPhoneNo(phoneNumber);
							selectedShipAddress.setEmailAddress(email != null ? email : overRideShipEmail);
							selectedShipAddress.setEntityId(userShipAddress.getEntityId());
							selectedShipAddress.setShipToId(userShipAddress.getShipToId());
							if (CommonUtility.validateString(shipEntityId) != null) {
								selectedShipAddress.setEntityId(shipEntityId);
							} else {
								selectedShipAddress.setEntityId(userShipAddress.getEntityId());
							}
						}

						SalesOrderManagementModel salesOrderInput = new SalesOrderManagementModel();
						salesOrderInput.setOrderDisposition(orderDisposition);
						salesOrderInput.setOrderItems(itemDetailObject);
						salesOrderInput.setAllItemData(allItemsData);
						SalesModel quoteResponse = null;
						if (session.getAttribute("quoteResponse") != null) {
							quoteResponse = new SalesModel();
							quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
							salesOrderInput.setQuoteResponse(quoteResponse);
						}
						salesOrderInput.setOrderType(orderingType);
						salesOrderInput.setShipVia(shipVia);
						salesOrderInput.setShipViaDescription(shipViaDescription);
						salesOrderInput.setShippingInstruction(shippingInstruction);
						salesOrderInput.setOrderNotes(orderNotes);
						salesOrderInput.setOrderedBy(orderedBy);
						salesOrderInput.setOrderStatus(orderStatus);
						salesOrderInput.setOrderStatusCode(orderStatusCode);
						salesOrderInput.setReqDate(reqDate);
						salesOrderInput.setSession(session);
						salesOrderInput.setOrderId(orderId);
						salesOrderInput.setBillEntityId(billEntityId);
						salesOrderInput.setShipEntityId(shipEntityId);
						salesOrderInput.setUserToken(userToken);
						salesOrderInput.setShipAddress(selectedShipAddress);
						salesOrderInput.setTaxExempt(taxExempt);
						salesOrderInput.setAnonymous(anonymous);
						salesOrderInput.setUserSelectedLocation(userSelectedLocation);
						salesOrderInput.setErpUserContactId(erpUserContactID);
						salesOrderInput.setBillEntityId(billEntityId);
						salesOrderInput.setShipEntityId(shipEntityId);
						salesOrderInput.setUserToken(userToken);
						salesOrderInput.setTaxExempt(taxExempt);
						if (CommonUtility.validateDoubleNumber(upsFrieghtCharges) > 0) {
							salesOrderInput.setFrieghtCharges(upsFrieghtCharges);
						} else {
							orderFreight = (String) request.getParameter("orderFreight");
							salesOrderInput.setFrieghtCharges(orderFreight);
						}
						salesOrderInput.setUserName(userName);
						salesOrderInput.setCreditCardValue(creditCardValue);
						salesOrderInput.setPurchaseOrderNumber(poNumber);
						salesOrderInput.setCustomerReleaseNumber(customerReleaseNumber);
						salesOrderInput.setSelectedBranch(selectedBranch);
						salesOrderInput.setLineItemCommentList(lineItemCommentList);
						salesOrderInput.setCountry(country);
						salesOrderInput.setCCType(ccType);
						salesOrderInput.setCCAuth(ccAuthCode);
						salesOrderInput.setOrderTax(CommonUtility.validateDoubleNumber(orderTax));
						salesOrderInput.setBillAddress(
								Cimm2BCentralClient.getInstance().userModelToAddressModel(userBillAddress));
						salesOrderInput.setShipViaMethod(shipVia);
						if (CommonUtility.validateString(ccApprovedAmount).length() > 0) {
							approAmount = Double.parseDouble(ccApprovedAmount);
						}
						salesOrderInput.setGasPoNumber(gasPoNumber);
						salesOrderInput.setCCAmount(approAmount);
						salesOrderInput.setCCToken(ccToken);
						salesOrderInput.setuOMQTY(UOMQTY);
						salesOrderInput.setPaymentTerms(paymentTermsCode);

						if (CommonUtility.customServiceUtility() != null) {
							CommonUtility.customServiceUtility().salesOrderdetail(salesOrderInput, shipTofirstName,
									shipToLastName, pageTitle, sequencePoNum, userShipAddress);
						}

						if (quoteNumber != null && !quoteNumber.trim().equalsIgnoreCase(""))
							salesOrderInput.setQuoteNumber(quoteNumber);

						if (CommonUtility
								.validateString(
										CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
								.equalsIgnoreCase("SO")
								|| (CommonUtility.validateString(orderingType).length() > 0
										&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO"))) {
							if (CommonUtility
									.validateString(
											CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
									.equalsIgnoreCase(CommonUtility.validateString(orderingType))) {
								salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
							} else if (CommonUtility.validateString(orderingType).length() > 0
									&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO")) {
								salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
							} else if (CommonUtility
									.validateString(
											CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
									.length() > 0) {
								salesOrderInput.setErpOrderType(CommonUtility.validateString(
										CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE")));
							}
						}
						salesOrderInput
								.setShippingAndHandlingFee(CommonUtility.validateString(totalCartFrieghtCharges));// PSS
																													// DFM
																													// shipping
																													// and
																													// handlingfg
						// salesOrderInput.setFrieghtCharges(upsFrieghtCharges);
						salesOrderInput.setOrderERPId(orderErpId);
						salesOrderInput.setAdditionalName(additionalName != null ? additionalName : "");
						salesOrderInput.setAdditionalPickupPerson(
								additionalPickupPerson != null ? additionalPickupPerson : "");
						salesOrderInput.setAdditionalComments(custComments != null ? custComments : "");
						salesOrderInput.setAdditionalCommentsShipToStore(
								custCommentsShipToStore != null ? custCommentsShipToStore : "");
						if (CommonUtility.validateString(salesOrderInput.getErpOrderType()).equalsIgnoreCase("SO")) {
							String discountValue = (String) session.getAttribute("discountValue");
							String discountType = (String) session.getAttribute("discountType");
							String userEmailAddress = (String) session.getAttribute("userEmailAddress");
							String userOfficePhone = (String) session.getAttribute("userOfficePhone");
							double freight = 0.0;
							if (CommonUtility
									.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
									.equalsIgnoreCase("SHIPVIA_COST_TABLE")
									&& session.getAttribute("customerShipViaListJson") != null) {
								String shipCostTableJasonString = CommonUtility
										.validateString((String) session.getAttribute("customerShipViaListJson"));
								Gson gson = new Gson();
								// LinkedList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
								// new TypeToken<List<ShipVia>>(){}.getType());
								ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
										new TypeToken<List<ShipVia>>() {
										}.getType());
								if (shipCostTable != null && !shipCostTable.isEmpty()) {
									if (shipCostTable != null && !shipCostTable.isEmpty()) {
										if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
											session.removeAttribute("selectedShipCodeOption");
										} else {
											if (session.getAttribute("selectedShipCodeOption") != null)
												selectedShipCodeOption = CommonUtility.validateString(
														session.getAttribute("selectedShipCodeOption").toString());
										}
										if (freeShipping.equalsIgnoreCase("no")) {
											for (ShipVia shipViaObj : shipCostTable) {
												// if(shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)){
												if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
													if (shipViaObj.getShipCode()
															.equalsIgnoreCase(selectedShipCodeOption)) {
														freight = shipViaObj.getShipCost();
														session.removeAttribute("selectedShipCodeOption");
														break;
													}
												} else {
													if (shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)) {
														freight = shipViaObj.getShipCost();
														break;
													}
												}
											}
										}
									}
								}
							}
							LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();
							createQuoteInput.put("session", session);
							createQuoteInput.put("orderedBy", orderedBy);
							createQuoteInput.put("itemList", itemDetailObject);
							createQuoteInput.put("userToken", userToken);
							createQuoteInput.put("shipToEntity", userToken);
							createQuoteInput.put("orderNotes", orderNotes);
							createQuoteInput.put("shippingInstruction", shippingInstruction);
							createQuoteInput.put("poNumber", poNumber);
							createQuoteInput.put("reqDate", reqDate);
							createQuoteInput.put("shipVia", shipVia);
							createQuoteInput.put("shipViaDescription", shipViaDescription);
							createQuoteInput.put("freight", freight);
							createQuoteInput.put("billAddress", userBillAddress);
							createQuoteInput.put("shipAddress", userShipAddress);
							createQuoteInput.put("defaultBillToId", defaultBillToId);
							createQuoteInput.put("defaultShipToId", defaultShipToId);
							createQuoteInput.put("customerId", userToken);
							createQuoteInput.put("wareHousecode", wareHousecode);
							createQuoteInput.put("customerCountry", customerCountry);
							createQuoteInput.put("customerName", userShipAddress.getCustomerName());
							createQuoteInput.put("customerReleaseNumber", customerReleaseNumber);
							createQuoteInput.put("discountValue", discountValue);
							createQuoteInput.put("discountType", discountType);
							createQuoteInput.put("itemDetailObject", itemDetailObject);
							createQuoteInput.put("totalCartFrieghtCharges", totalCartFrieghtCharges);
							createQuoteInput.put("handlingListItems",
									CommonUtility.validateString(LayoutLoader.getMessageProperties()
											.get(session.getAttribute("localeCode").toString().toUpperCase())
											.getProperty("handlingcharge.labels")));
							createQuoteInput.put("deliveryListItems",
									CommonUtility.validateString(LayoutLoader.getMessageProperties()
											.get(session.getAttribute("localeCode").toString().toUpperCase())
											.getProperty("deliverycharge.labels")));
							if (nonCatalogItemFlag) {
								createQuoteInput.put("ARIItem", "Y");
							} else {
								createQuoteInput.put("ARIItem", "N");
							}
							createQuoteInput.put("subsetId", subsetId);
							createQuoteInput.put("generalSubset", generalSubset);
							if (CommonUtility.validateString(userEmailAddress).length() > 0) {
								createQuoteInput.put("userEmailAddress", userEmailAddress);
							}
							if (CommonUtility.validateString(userOfficePhone).length() > 0) {
								createQuoteInput.put("userOfficePhone", userOfficePhone);
							}
							createQuoteInput.put("creditCardValue", creditCardValue);
							createQuoteInput.put("erpOrderType",
									CommonUtility.validateString(salesOrderInput.getErpOrderType()));
							if (orderTotalDiscountAmount > 0) {
								createQuoteInput.put("orderDiscountType", "$");
								createQuoteInput.put("discountAmount", orderTotalDiscountAmount);
								createQuoteInput.put("discountPercent", discountValue);
							} else {
								createQuoteInput.put("orderDiscountType", discountType);
								createQuoteInput.put("discountAmount", discountAmount);
								createQuoteInput.put("discountPercent", discountValue);
							}
							createQuoteInput.put("paymentTermsCode", CommonUtility.validateString(paymentTermsCode));
							salesOrderInput.setSalesOrderInput(createQuoteInput);
						}
						salesOrderInput.setIncludeApprovalType(request.getParameter("includeApprovalType"));
						salesOrderInput.setApprovalType(request.getParameter("approvalType"));
						SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();
						erpOrderDetail = salesOrderSubmit.submitOrderToERP(salesOrderInput);

						if (erpOrderDetail != null && erpOrderDetail.getOrderId() > 0) {
							stmt = conn.prepareCall("{call ORDER_KEYWORD_PROC(?)}");
							stmt.setInt(1, erpOrderDetail.getOrderId());
							stmt.execute();
						}

						// Adding placed order to LinkedHashMap
						erpOrderDetail.setUserId(userId);
						erpOrderDetail.setBcAddressBookId(defaultShipToId);
						int firstOrder = 0;
						if (CommonUtility.customServiceUtility() != null) {
							erpOrderDetail.setShipToId(CommonUtility.validateString(userShipAddress.getShipToId()));
							firstOrder = CommonUtility.customServiceUtility().getFirstOrders(erpOrderDetail);
							erpOrderDetail.setFirstOrder(firstOrder);
						}

						erpOrderDetailList.add(erpOrderDetail);
					}
				}
				// Multiple Order with multiple shipping addresses in AP

				if (flag) {
					if (erpOrderDetail != null && !CommonUtility.validateString(erpOrderDetail.getStatusDescription())
							.toUpperCase().contains("ERROR")) {

					} else {
						defaultOrderDetail.setOrderStatus("Error while submitting the order");
						defaultOrderDetail.setStatusDescription(
								erpOrderDetail.getStatusDescription() != null ? erpOrderDetail.getStatusDescription()
										: ".");
					}
					if (isApproveCart != null && isApproveCart.trim().equalsIgnoreCase("Y")
							&& erpOrderDetailList != null && erpOrderDetailList.size() > 0) {
						SalesDAO.approveCartDao(session, savedGroupId, erpOrderDetailList.get(0).getOrderId());
					}

					// Empty Cart
					deleteFromCart(conn, userId);

					SalesModel otherDetail = new SalesModel();
					otherDetail.setSession(session);
					otherDetail.setSendmailToSalesRepOnly(sendmailToSalesRepOnly);

					HashMap<String, ArrayList<UsersModel>> userAddressList = new UserManagementImpl()
							.getAddressListFromBCAddressBook(buyingCompanyId, userId);
					billAddressList = userAddressList.get("Bill");
					shipAddressList = userAddressList.get("Ship");
					if (CommonUtility.customServiceUtility() != null && shipAddressList != null) {
						ArrayList<UsersModel> shipList = CommonUtility.customServiceUtility()
								.addShipAddressList(shipAddressList);
						if (shipList != null) {
							shipAddressList = shipList;
						}
					}

					boolean mailsent = false;
					if (sendMailFlag) {
						SendMailModel sendMailModel = null;
						sendMailModel = new SendMailModel();
						UsersModel userDetail = UsersDAO.getUserEmail(userId);
						sendMailModel = new SendMailModel();
						sendMailModel.setToEmailId(userDetail.getEmailAddress());
						sendMailModel.setFirstName(userDetail.getFirstName());
						sendMailModel.setLastName(userDetail.getLastName());

						// First Order Email
						if (CommonUtility.customServiceUtility() != null) {
							mailsent = CommonUtility.customServiceUtility().sendFirstMultiOrderMail(erpOrderDetailList,
									sendMailModel);
						}

						// Order Confirmation Email
						sendMailModel.setMailSubject("Order Confirmation");
						sendMailModel.setAdditionalComments(custComments != null ? custComments : "");
						sendMailModel.setAdditionalName(additionalName != null ? additionalName : "");
						sendMailModel.setAdditionalPickupPerson(
								additionalPickupPerson != null ? additionalPickupPerson : "");

						if (CommonUtility.customServiceUtility() != null) {
							mailsent = CommonUtility.customServiceUtility().sendMultiOrderMail(erpOrderDetailList,
									sendMailModel, false);
						}
					}

					if (mailsent) {
						if (erpOrderDetailList != null) {
							for (SalesModel erpOrder : erpOrderDetailList) {
								sql = "update orders set email_sent = 'Y' where order_id = ?";
								pstmt = conn.prepareStatement(sql);
								pstmt.setInt(1, erpOrder.getOrderId());
								rs = pstmt.executeQuery();
							}
						}
					}

					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CREDITCARD_SAVE"))
							.equalsIgnoreCase("Y")) {
						SalesDAO.deleteAllCreditCardInfo(userId);
					}
				}

				// Order Confirmation Page for multiple orders
				if (CommonUtility.customServiceUtility() != null) {
					renderContent = CommonUtility.customServiceUtility().orderConfirmationV2AP(erpOrderDetailList);
				}
				// orderConfirmationV2(erpOrderDetail);
				System.out.println("Order - Confirmed");
				target = SUCCESS;
			} else {
				target = "SESSIONEXPIRED";
			}
			session.removeAttribute("orderingType");
			session.removeAttribute("calculateTax");

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBStatement(stmt);
			ConnectionManager.closeDBConnection(conn);
		}
		return target;
	}

	public String guestOrderSubmit() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		boolean exceptionFlag = false;
		String orderTax = (String) request.getParameter("orderTax");
		String paymentTermsCode = (String) request.getParameter("reqTypeCode");
		String ipAddress = request.getHeader("X-Forwarded-For");
		String upsFrieghtCharges = (String) request.getParameter("orderFreight");
		String shipViaServiceCode = CommonUtility.validateString(request.getParameter("shipViaServiceCode"));
		String orderFreight = (String) request.getParameter("orderFreight");
		if (ipAddress == null) {
			ipAddress = request.getRemoteAddr();
		}
		int orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
		UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
		String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
		String tempSubset = (String) session.getAttribute("userSubsetId");
		double total = 0;
		int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
		int subsetId = CommonUtility.validateNumber(tempSubset);
		Connection conn = null;
		ResultSet rs = null;
		CallableStatement stmt = null;
		PreparedStatement pstmt = null;
		double discountAmount = 0.0D;
		double orderTotalDiscountAmount = 0.0D;
		String freeShipping = "no";
		String anonymous = "Y";
		String discountTypeCheck = "";
		String erpOverrideFlag = CommonUtility.validateString(request.getParameter("erpOverrideFlag"));
		String extraParam = CommonUtility.validateString(request.getParameter("extraParam"));
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		String erpUserContactID = "";
		try {
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("GUSTE_CHECKOUT_USER_NAME"))
					.length() > 0) {
				auEmail = CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("GUSTE_CHECKOUT_USER_NAME"));
				HashMap<String, String> userDetailsFromDB = UsersDAO.getUserPasswordAndUserId(auEmail, "Y");
				int userId = CommonUtility.validateNumber(userDetailsFromDB.get("userId"));
				userDetail.setUserId(userId);
			}

			if (ProductsDAO
					.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME")) > 0) {
				generalSubset = ProductsDAO
						.getSubsetIdFromName(CommonDBQuery.getSystemParamtersList().get("EXT_SEARCH_SUBSET_NAME"));
			}

			conn = ConnectionManager.getDBConnection();
			UsersModel billAddress = new UsersModel();
			billAddress.setFirstName(userDetail.getBillAddress().getFirstName());
			billAddress.setLastName(userDetail.getBillAddress().getLastName());
			billAddress.setAddress1(userDetail.getBillAddress().getAddress1());
			billAddress.setAddress2(userDetail.getBillAddress().getAddress2());
			billAddress.setCity(userDetail.getBillAddress().getCity());
			billAddress.setState(userDetail.getBillAddress().getState());
			billAddress.setZipCodeStringFormat(userDetail.getBillAddress().getZipCode());
			billAddress.setZipCode(userDetail.getBillAddress().getZipCode());
			billAddress.setCountry(userDetail.getBillAddress().getCountry());
			billAddress.setPhoneNo(userDetail.getBillAddress().getPhoneNo());
			billAddress.setCompanyName(userDetail.getBillAddress().getCompanyName());
			billAddress.setCustomerName(userDetail.getBillAddress().getCompanyName());
			billAddress.setEmailAddress(userDetail.getUserName());
			billAddress.setEntityId(CommonUtility.validateString(userDetail.getBillAddress().getEntityId()));
			billAddress.setEntityName(userDetail.getBillAddress().getCompanyName());
			billAddress.setUserToken(userDetail.getUserToken());
			billAddress.setUserId(userDetail.getUserId());
			billAddress.setSession(session);
			billAddress.setAddressBookId(userDetail.getBillAddress().getAddressBookId());
			billAddress.setErpOverrideFlag(erpOverrideFlag);
			billAddress.setExtraParam(extraParam);

			UsersModel shipAddress = new UsersModel();
			shipAddress.setShipToId(userDetail.getShipAddress().getShipToId());
			shipAddress.setFirstName(userDetail.getShipAddress().getFirstName());
			shipAddress.setLastName(userDetail.getShipAddress().getLastName());
			shipAddress.setCompanyName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setCustomerName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setAddress1(userDetail.getShipAddress().getAddress1());
			shipAddress.setAddress2(userDetail.getShipAddress().getAddress2());
			shipAddress.setCity(userDetail.getShipAddress().getCity());
			shipAddress.setState(userDetail.getShipAddress().getState());
			shipAddress.setZipCodeStringFormat(userDetail.getShipAddress().getZipCode());
			shipAddress.setZipCode(userDetail.getShipAddress().getZipCode());
			shipAddress.setCountry(userDetail.getShipAddress().getCountry());
			shipAddress.setPhoneNo(userDetail.getShipAddress().getPhoneNo());
			shipAddress.setOrderNotes(userDetail.getOrderNotes());
			shipAddress.setShippingInstruction(userDetail.getShippingInstruction());
			shipAddress.setEntityId(CommonUtility.validateString(userDetail.getShipAddress().getEntityId()));
			shipAddress.setEntityName(userDetail.getShipAddress().getCompanyName());
			shipAddress.setUserToken(userDetail.getUserToken());
			shipAddress.setEmailAddress(userDetail.getUserName());
			shipAddress.setUserId(userDetail.getUserId());
			shipAddress.setSession(session);
			shipAddress.setAddressBookId(userDetail.getShipAddress().getAddressBookId());

			UserManagement userUpdate = new UserManagementImpl();
			if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("UPDATE_CUSTOMER_API"))
					.length() > 0) {
				userUpdate.editBillingAddress(billAddress);
			}
			userUpdate.editShippingAddress(shipAddress);

			ArrayList<CreditCardModel> creditCardList = SalesDAO.getCreditCardDetails(userDetail.getUserId());
			CreditCardModel CCard = new CreditCardModel();
			if (creditCardList != null && creditCardList.size() > 0) {

				for (CreditCardModel CcardDetail : creditCardList) {
					ccNumber = CcardDetail.getCreditCardNumber();
					ccNumber = ccNumber.replaceAll("XXXX-", "");
					ccNumber = ccNumber.replaceAll("\\*", "");
					ccNumber = ccNumber.replaceAll("#", "");
					ccNumber = ccNumber.replaceAll("-", "");
					CcardDetail.setCreditCardNumber(ccNumber);
					CcardDetail.setCreditCardAuthType(CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("CreditCardAuthType")));
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("CreditCardTypeCode"))
							.equalsIgnoreCase("Y") && CommonDBQuery.getCreditCardErpCode() != null) {
						LinkedHashMap<String, String> creditCardErpCode = CommonDBQuery.getCreditCardErpCode();
						for (Map.Entry<String, String> entry : creditCardErpCode.entrySet()) {
							String key = entry.getKey();
							String value = entry.getValue();
							if (CommonUtility.validateString(key).replaceAll(" ", "").equalsIgnoreCase(CommonUtility
									.validateString(CcardDetail.getCreditCardType()).replaceAll(" ", ""))) {
								CcardDetail.setCreditCardType(CommonUtility.validateString(value));
								break;
							}
						}
					}
					CCard = CcardDetail;
				}
			} else {

				// -------- Sx
				// if(creditCardPayment!=null && creditCardPayment.trim().equalsIgnoreCase("Y")
				// && ccTransactionId!=null && ccTransactionId.trim().length()>0){
				if ((CommonUtility.validateString(payPalToken).length() > 0
						&& CommonUtility.validateString(payPalPayerId).length() > 0)
						|| (CommonUtility.validateString(creditCardPayment).equalsIgnoreCase("Y")
								&& CommonUtility.validateString(ccTransactionId).length() > 0)) {
					String paymentGatewayType = "";
					if (session.getAttribute("PAYMENT_GATEWAY") != null
							&& session.getAttribute("PAYMENT_GATEWAY").toString().length() > 0) {
						paymentGatewayType = (String) session.getAttribute("PAYMENT_GATEWAY");
					} else {
						paymentGatewayType = CommonDBQuery.getSystemParamtersList().get("PAYMENT_GATEWAY");
					}

					if (CommonUtility.validateString(payPalToken).length() > 0
							&& CommonUtility.validateString(payPalPayerId).length() > 0) {
						CCard = new CreditCardModel();
						CCard.setPayPalPayerId(CommonUtility.validateString(payPalPayerId));
						CCard.setPayPalToken(CommonUtility.validateString(payPalToken));
					} else {
						ccNumber = ccNumber.replaceAll("XXXX-", "");
						ccNumber = ccNumber.replaceAll("\\*", "");
						ccNumber = ccNumber.replaceAll("#", "");
						ccNumber = ccNumber.replaceAll("-", "");

						CCard = new CreditCardModel();
						CCard.setCreditCardAuthType(CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("CreditCardAuthType")));
						CCard.setCardHolder(cardHolder);
						CCard.setDate(ccExp);
						CCard.setExpDate(ccExp);
						CCard.setElementPaymentAccountId(ccTransactionId);
						CCard.setAddress1(streetAddress);
						CCard.setZipCode(postalCode);
						CCard.setPaymentGatewayType(paymentGatewayType);
						CCard.setCreditCardResponseCode(ccResponseCode);
						CCard.setCreditCardStatus(ccStatus);
						CCard.setCreditCardHostRefNumber(ccHostRefNumber);
						CCard.setCreditCardTaskID(ccTaskID);
						CCard.setCreditCardAmount(ccAmount);
						CCard.setCreditCardDeclineResponseReason(ccDeclineResponseReason);
						CCard.setCreditCardCvv2VrfyCode(ccCvv2VrfyCode);
						CCard.setCreditCardTip(ccTip);
						CCard.setCreditCardTransTimeStamp(ccTransTimeStamp);
						CCard.setCreditCardToken(ccToken);
						CCard.setCreditCardApprovedAmount(ccApprovedAmount);
						CCard.setCreditCardRequestedAmount(ccRequestedAmount);
						CCard.setCreditCardHostResponseCode(ccHostResponseCode);
						CCard.setCreditCardInvoice(ccInvoice);
						CCard.setCreditCardApprovalCode(ccApprovalCode);
						CCard.setCreditCardTransactionID(ccTransactionId);
						CCard.setCreditCardServerTimestamp(ccServerTimestamp);
						if (CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("CreditCardTypeCode"))
								.equalsIgnoreCase("Y") && CommonDBQuery.getCreditCardErpCode() != null) {
							LinkedHashMap<String, String> creditCardErpCode = CommonDBQuery.getCreditCardErpCode();
							for (Map.Entry<String, String> entry : creditCardErpCode.entrySet()) {
								String key = entry.getKey();
								String value = entry.getValue();
								if (CommonUtility.validateString(key).replaceAll(" ", "")
										.equalsIgnoreCase(CommonUtility.validateString(ccType).replaceAll(" ", ""))) {
									ccType = CommonUtility.validateString(value);
								}
							}
						}
						CCard.setCreditCardType(ccType);
						if (CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("P21_CREDIT_CARD_TYPES"))
								.equalsIgnoreCase("Y")) {

							if (!CommonUtility.validateString(ccType).equalsIgnoreCase("")) {
								List<CustomTable> creditCardType = CIMM2VelocityTool.getInstance()
										.getCusomTableData("Website", "CREDIT_CARD_TYPE");
								String credictCardCode = CIMM2VelocityTool.getInstance()
										.getCreditCardCode(creditCardType, ccType);
								if (credictCardCode != null) {
									CCard.setCreditCardType(credictCardCode);
								} else {
									CCard.setCreditCardType(ccType);
								}
							}
						} else {
							CCard.setCreditCardType(ccType);
						}
						CCard.setCreditCardFee(ccFee);
						CCard.setCreditCardExternalSessionID(ccExternalSessionID);
						CCard.setCreditCardAddVrfyCode(ccAddVrfyCode);
						CCard.setCreditCardTax(ccTax);
						CCard.setCreditCardNewDomainKey(ccNewDomainKey);
						CCard.setCreditCardNumber(ccNumber);
						CCard.setCreditCardRefNumber(ccRefrenceCode);
						CCard.setCreditCardMerchantId(ccMerchantId);
						CCard.setDataValue(dataValue);
					}
					if (ccOrderNumber != null && ccOrderNumber.trim().length() > 0) {
						orderId = CommonUtility.validateNumber(ccOrderNumber);
					}

				}
				// -------- Sx
			}
			String homeBranchId = (String) session.getAttribute("homeBranchId");
			String homeBranchName = (String) session.getAttribute("homeBranchName");
			String shipBranchId = (String) session.getAttribute("shipBranchId");
			String shipBranchName = (String) session.getAttribute("shipBranchName");
			erpUserContactID = CommonUtility
					.validateString(UsersDAO.getContactID(CommonUtility.validateNumber(sessionUserId)));
			LinkedHashMap<String, Object> orderDetail = new LinkedHashMap<String, Object>();
			orderDetail.put("homeBranchId", homeBranchId);
			orderDetail.put("homeBranchName", homeBranchName);
			orderDetail.put("shipBranchId", shipBranchId);
			orderDetail.put("shipBranchName", shipBranchName);
			billAddress.setSession(session);
			String discountValue = (String) session.getAttribute("discountValue");
			String discountType = (String) session.getAttribute("discountType");
			Discount orderShippingDiscount = getOrderShippingDiscount(session);
			if (orderShippingDiscount != null) {
				try {
					String website = userDetail.getWebsite();
					if (orderId <= 0) {
						orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
					}
					orderDetail.put(SalesActionContantVariables.ORDER_ID, orderId);
					orderDetail.put(SalesActionContantVariables.USER_ID, userDetail.getUserId());
					// save Order Level Discount
					SalesPromotionService salesPromo = SalesPromotionService.getInstance();
					if (orderShippingDiscount != null) {
						discountTypeCheck = orderShippingDiscount.getDiscountType().name();
						if (salesPromo.storeCouponUsed(orderShippingDiscount, String.valueOf(orderId),
								userDetail.getUserId(), userDetail.getBuyingCompanyId(), website)
								&& CommonUtility.validateString(discountTypeCheck).length() > 0
								&& discountTypeCheck.equals("FREE_SHIPPING")) {
							freeShipping = "yes";
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
									String.valueOf(orderShippingDiscount.getDiscountValue()));
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
									String.valueOf(orderShippingDiscount.getDiscountInPercent()));
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
									orderShippingDiscount.getDiscountCoupon().getCopounCode());
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
									orderShippingDiscount.getDiscountType().name());
							orderDetail.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
									SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
							orderDetail = SalesDAO.CouponDataCrud(orderDetail);
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			// Order Discount
			List<Discount> orderDiscounts = getOrderDiscount(session);
			if (orderDiscounts != null && orderDiscounts.size() > 0) {
				for (Discount orderDiscount : orderDiscounts) {
					try {
						String website = userDetail.getWebsite();
						if (orderId <= 0) {
							orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
						}
						orderDetail.put(SalesActionContantVariables.ORDER_ID, orderId);
						orderDetail.put(SalesActionContantVariables.USER_ID, userDetail.getUserId());
						// save Order Level Discount
						SalesPromotionService salesPromo = SalesPromotionService.getInstance();
						if (salesPromo.storeCouponUsed(orderDiscount, String.valueOf(orderId), userDetail.getUserId(),
								userDetail.getBuyingCompanyId(), website)
								&& CommonUtility.validateString(discountTypeCheck).length() > 0
								&& discountTypeCheck.equals("FREE_SHIPPING")) {
							orderTotalDiscountAmount = orderDiscount.getDiscountValue();
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_AMOUNT_KEY,
									String.valueOf(orderDiscount.getDiscountValue()));
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_PERCENTAGE_KEY,
									String.valueOf(orderDiscount.getDiscountInPercent()));
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_COUPONCODE_KEY,
									orderDiscount.getDiscountCoupon().getCopounCode());
							orderDetail.put(SalesActionContantVariables.COUPONS_DISCOUNT_TYPE_KEY,
									orderDiscount.getDiscountType().name());
							orderDetail.put(SalesActionContantVariables.COUPONS_CRUD_KEY,
									SalesActionContantVariables.COUPONS_CRUD_CREATE_VALUE);
							orderDetail = SalesDAO.CouponDataCrud(orderDetail);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			// orderId = saveOrder(conn, userDetail.getUserId(), orderId, billAddress,
			// shipAddress, userDetail.getReqDate(), tempGeneralSubset,
			// CCard.getCreditCardRefNumber(), "Credit Card", CCard.getCreditCardNumber(),
			// CCard.getExpDate(), CCard.getCardHolder(), userDetail.getPobox(), ipAddress,
			// CCard, customerReleaseNumber,orderDetail);
			// orderId = saveOrder(conn, userId, orderId, userBillAddress, userShipAddress,
			// "webOrder",taxExempt,refKey,paymentMethod,ccNumber,ccExp,cardHolder,poNumber,ipaddress,creditCardValue,
			// customerReleaseNumber,orderDetails);
			ProductsModel saveItems = new ProductsModel();
			cartListData = new ArrayList<ProductsModel>();
			cartListData = SalesDAO.getOrderDetails(1, 1, userDetail.getSubsetId(), generalSubset, session,
					"auSubmitOrder");
			SalesModel erpOrderDetail = new SalesModel();
			if (cartListData.size() > 0) {
				LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
				if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
						.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
					ArrayList<Integer> itemList = new ArrayList<Integer>();
					if (cartListData != null && cartListData.size() > 0) {
						for (ProductsModel pModel : cartListData) {
							itemList.add(pModel.getItemId());
						}
					}
					customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(userDetail.getSubsetId(),
							generalSubset, StringUtils.join(itemList, " OR "), "itemid");
				}
				double orderSubTotal = 0.0;
				double orderGrandTotal = 0.0;

				LinkedHashMap<String, String> lineItemCommentList = new LinkedHashMap<String, String>();
				LinkedHashMap<String, Integer> UOMQTY = new LinkedHashMap<String, Integer>();
				for (ProductsModel itemPrice : cartListData) {
					total = itemPrice.getCartTotal();
					String lineComment = "";
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ITEMLEVELSHIPVIA"))
							.equalsIgnoreCase("Y")) {
						if (CommonUtility.validateString(itemPrice.getMultipleShipVia()).length() > 0
								&& CommonUtility.validateString(userDetail.getShipVia()).equals("MULTIPLE")) {
							lineComment = "Ship Method : " + itemPrice.getMultipleShipVia();
						}
					}
					if (CommonUtility.validateString(itemPrice.getLineItemComment()).length() > 0) {
						if (CommonUtility.validateString(lineComment).length() > 0) {
							lineComment = lineComment + " | " + "LineItemComment : " + itemPrice.getLineItemComment();
						} else {
							lineComment = itemPrice.getLineItemComment();
						}
						lineItemCommentList.put(itemPrice.getPartNumber(), lineComment);
					}
					int packageQty = 1;
					if (itemPrice.getPackageFlag() > 0 && itemPrice.getPackageQty() > 0) {
						packageQty = itemPrice.getPackageQty();
					}
					orderSubTotal = orderSubTotal + (itemPrice.getTotal());
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("UMQTY_FROM_ERP"))
							.equalsIgnoreCase("Y")) {
						for (ProductsModel item : cartListData) {
							UOMQTY.put(item.getPartNumber(), CommonUtility.validateNumber(item.getQtyUOM()));
						}
					} else {
						UOMQTY.put(itemPrice.getPartNumber(), packageQty);
					}

					Discount itemDiscount = getItemDiscount(session, itemPrice.getProductListId(),
							itemPrice.getPartNumber(), itemPrice.getQty());

					if (itemDiscount != null) {
						try {
							// save Item Level Discount
							SalesPromotionService salesPromo = SalesPromotionService.getInstance();
							if (salesPromo.storeCouponUsed(itemDiscount, String.valueOf(orderId),
									userDetail.getUserId(), userDetail.getBuyingCompanyId(), userDetail.getWebsite())) {
								discountAmount = itemDiscount.getDiscountValue();
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
					saveItems.setItemId(itemPrice.getItemId());
					saveItems.setPartNumber(itemPrice.getPartNumber());
					saveItems.setInvoiceDesc(itemPrice.getInvoiceDesc());
					saveItems.setSalesUom(itemPrice.getSalesUom());
					saveItems.setPackDesc(itemPrice.getPackDesc());
					saveItems.setLineItemComment(itemPrice.getLineItemComment());
					saveItems.setItemLevelRequiredByDate(itemPrice.getItemLevelRequiredByDate());
					saveItems.setCatalogId(itemPrice.getCatalogId());
					saveItems.setShipViaCode(itemPrice.getMultipleShipVia());
					saveItems.setQty(itemPrice.getQty());
					saveItems.setShipViaDesc(itemPrice.getMultipleShipViaDesc());
					saveItems.setCustomerPartNumber("");
					saveItems.setShortDesc(itemPrice.getShortDesc());
				}
				if (cartListData != null && cartListData.size() > 0 && session.getAttribute("userToken") != null
						&& !session.getAttribute("userToken").toString().trim().equalsIgnoreCase("")
						&& CommonDBQuery.getSystemParamtersList().get("ERP") != null
						&& !CommonDBQuery.getSystemParamtersList().get("ERP").trim().equalsIgnoreCase("defaults")) {

					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("SAVE_LEADTIME_ON_ORDER_CONFIRMATION"))
							.equalsIgnoreCase("Y")) {
						ProductManagement priceInquiry = new ProductManagementImpl();
						ProductManagementModel leadInquiry = new ProductManagementModel();
						leadInquiry.setHomeTerritory(
								CommonUtility.validateString((String) session.getAttribute("wareHouseCode")));
						leadInquiry.setPartIdentifier(cartListData);
						String leadTimeData = priceInquiry.ajaxBasePriceAndLeadTime(leadInquiry);
						Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
						ProductsModelArray gsonParsed = gson.fromJson("{\"products\":" + leadTimeData + "}",
								ProductsModelArray.class);
						for (ProductsModel eachItem : cartListData) {
							for (ProductsModel eachLeadItem : gsonParsed.getProducts()) {
								if (eachItem.getPartNumber().equalsIgnoreCase(eachLeadItem.getPartNumber())) {
									if (eachItem.getHomeBranchavailablity() == 0) {
										if (eachLeadItem.getLeadTime() == 0) {
											eachItem.setLeadTime(5);
										} else {
											eachItem.setLeadTime(eachLeadItem.getLeadTime());
										}
									} else {
										eachItem.setLeadTime(-1);
									}
								}

							}
						}
					}
				}
				String shipBranch = (String) session.getAttribute("shipBranchId");
				String homeBranch = (String) session.getAttribute("homeBranchId");
				shipVia = userDetail.getShipVia();
				if (CommonUtility.customServiceUtility() != null) {
					shipVia = CommonUtility.customServiceUtility().setShipViaCodeToShipVia(shipVia, request);
				}
				String shipViaDisplay = null;
				if (userDetail.getShipViaDescription() != null) {
					shipViaDisplay = userDetail.getShipViaDescription();
				} else if (userDetail.getShipViaMethod() != null) {
					shipViaDisplay = userDetail.getShipViaMethod();
				} else if (CommonUtility.validateString(shipViaDescription).length() > 0) {
					shipViaDisplay = CommonUtility.validateString(shipViaDescription);
				}
				System.out.println("shipViaDisplay------------" + shipViaDisplay);
				if (CommonUtility.validateString(shipBranch).length() > 0
						&& (CommonUtility.validateString(shipVia).toUpperCase().contains("WILL CALL")
								|| CommonUtility.validateString(shipVia).toUpperCase().contains("CUSTOMER PICK UP"))) {
					selectedBranch = shipBranch;
				} else if (homeBranch != null && homeBranch.trim().length() > 0) {
					selectedBranch = homeBranch;
				} else {
					selectedBranch = "";
				}
				SalesModel defaultOrderDetail = new SalesModel();
				String quoteNumber = (String) session.getAttribute("quoteNumber");
				orderGrandTotal = orderSubTotal;
				defaultOrderDetail.setSubtotal(orderSubTotal);
				defaultOrderDetail.setTotal(orderGrandTotal);
				defaultOrderDetail.setOrderedBy(userDetail.getOrderedBy());
				defaultOrderDetail.setStatusDescription("Order Successfully Submitted");
				defaultOrderDetail.setOrderNotes(userDetail.getOrderNotes());
				defaultOrderDetail.setShippingInstruction(userDetail.getShippingInstruction());
				defaultOrderDetail.setReqDate(userDetail.getReqDate());
				defaultOrderDetail.setShipViaID(shipVia);
				SalesOrderManagementModel salesOrderInput = new SalesOrderManagementModel();
				SalesModel quoteResponse = null;
				if (session.getAttribute("quoteResponse") != null) {
					quoteResponse = new SalesModel();
					quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
					salesOrderInput.setQuoteResponse(quoteResponse);
				}
				salesOrderInput.setErpUserContactId(erpUserContactID);
				salesOrderInput.setOrderType(orderingType);
				salesOrderInput.setShipVia(shipVia);
				salesOrderInput.setShippingInstruction(userDetail.getShippingInstruction());
				salesOrderInput.setOrderNotes(userDetail.getOrderNotes());
				salesOrderInput.setOrderedBy(userDetail.getOrderedBy());
				salesOrderInput.setReqDate(userDetail.getReqDate());
				salesOrderInput.setSession(session);
				salesOrderInput.setOrderId(orderId);
				salesOrderInput
						.setBillEntityId(CommonUtility.validateString(userDetail.getBillAddress().getEntityId()));
				salesOrderInput
						.setShipEntityId(CommonUtility.validateString(userDetail.getShipAddress().getEntityId()));
				salesOrderInput.setUserToken(userDetail.getUserToken());
				salesOrderInput.setShipAddress(userDetail.getShipAddress());
				salesOrderInput.setBillAddress(userDetail.getBillAddress());
				salesOrderInput.setTaxExempt(taxExempt);
				salesOrderInput.setUserName(userDetail.getUserName());
				salesOrderInput.setCreditCardValue(CCard);
				salesOrderInput.setAnonymous(anonymous);
				/*
				 * if(userDetail.getCreditCardList()!=null &&
				 * userDetail.getCreditCardList().size()>0){
				 * salesOrderInput.setCreditCardValue(CCard); }
				 */
				salesOrderInput.setSubTotal(orderSubTotal);
				salesOrderInput.setPurchaseOrderNumber(userDetail.getPobox());
				salesOrderInput.setSelectedBranch(selectedBranch);
				salesOrderInput.setPaymentTerms(paymentTermsCode);
				salesOrderInput.setLineItemCommentList(lineItemCommentList);
				salesOrderInput.setCountry(userDetail.getBillAddress().getCountry());
				salesOrderInput.setuOMQTY(UOMQTY);
				salesOrderInput.setOrderStatus(userDetail.getOrderStatus());
				salesOrderInput.setOrderStatusCode(userDetail.getOrderStatusCode());
				salesOrderInput.setFrieghtCharges(orderFreight);// CPE
				if (CommonUtility.validateDoubleNumber(orderTax) > 0) {
					salesOrderInput.setOrderTax(CommonUtility.validateDoubleNumber(orderTax));
				}
				salesOrderInput.setShipViaMethod(shipViaDisplay);
				salesOrderInput.setOrderItems(cartListData);
				System.out.println("shipViaDisplay----------:" + shipViaDisplay);
				System.out.println("cartListData----------:" + cartListData.size());
				salesOrderInput.setOrderStatusCode(userDetail.getOrderStatusCode());
				if (quoteNumber != null && !quoteNumber.trim().equalsIgnoreCase("")) {
					salesOrderInput.setQuoteNumber(quoteNumber);
				} else {
					if (CommonUtility.validateString(orderingType).length() > 0) {
						salesOrderInput.setErpOrderType(orderingType);
					} else {
						salesOrderInput.setErpOrderType("SO");// -------- Sx /// Check and Confirm
					}
				}
				if (CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
						.equalsIgnoreCase("SO")
						|| (CommonUtility.validateString(orderingType).length() > 0
								&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO"))) {
					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
							.equalsIgnoreCase(CommonUtility.validateString(orderingType))) {
						salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
					} else if (CommonUtility.validateString(orderingType).length() > 0
							&& CommonUtility.validateString(orderingType).equalsIgnoreCase("SO")) {
						salesOrderInput.setErpOrderType(CommonUtility.validateString(orderingType));
					} else if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE"))
							.length() > 0) {
						salesOrderInput.setErpOrderType(CommonUtility.validateString(
								CommonDBQuery.getSystemParamtersList().get("ORDERING_DEFAULT_ORDER_TYPE")));
					}
				}
				salesOrderInput.setFrieghtCharges(upsFrieghtCharges);
				salesOrderInput.setShippingAndHandlingFee(CommonUtility.validateString(upsFrieghtCharges));

				FreightCalculatorModel freightValue = null;
				if (total > 0) {
					FreightCalculatorModel freightInput = new FreightCalculatorModel();
					freightInput.setCartTotal(total);
					freightInput.setCountry(userDetail.getCountry());
					freightInput.setCustomerNumber(userDetail.getUserToken());
					freightInput.setLocale(
							CommonUtility.validateString(session.getAttribute("localeCode").toString().toUpperCase()));

					if (customFieldVal != null
							&& CommonDBQuery.getSystemParamtersList().get("OVERSIZE_ITEM_FREIGHT_RULE") != null
							&& CommonDBQuery.getSystemParamtersList().get("OVERSIZE_ITEM_FREIGHT_RULE").trim()
									.equalsIgnoreCase("Y")) {
						for (Map.Entry<Integer, LinkedHashMap<String, Object>> entry : customFieldVal.entrySet()) {
							if (entry != null && entry.getValue() != null
									&& entry.getValue().toString().contains("custom_OverSize=Y")) {
								freightInput.setOverSize("Y");
								break;
							} else {
								freightInput.setOverSize("N");
							}
						}
					}

					if (session.getAttribute("itemleveShip") != null) {
					}
					freightInput.setShipVia(shipVia);
					freightInput.setWareHouseCode(userDetail.getWareHouseCodeStr());
					if (shipAddress != null && shipAddress.getState() != null
							&& shipAddress.getState().trim().length() > 0) {
						freightInput.setState(shipAddress.getState().trim());
					}
					freightValue = FreightCalculator.getFreightByTotal(freightInput);
					if (freightValue != null) {
					}
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("SHIP_VIA_QUERY"))
							.equalsIgnoreCase("SHIPVIA_COST_TABLE")
							&& session.getAttribute("customerShipViaListJson") != null) {
						String shipCostTableJasonString = CommonUtility
								.validateString((String) session.getAttribute("customerShipViaListJson"));
						Gson gson = new Gson();
						ArrayList<ShipVia> shipCostTable = gson.fromJson(shipCostTableJasonString,
								new TypeToken<List<ShipVia>>() {
								}.getType());
						if (shipCostTable != null && !shipCostTable.isEmpty()) {

							if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
								session.removeAttribute("selectedShipCodeOption");
							} else {
								if (session.getAttribute("selectedShipCodeOption") != null)
									selectedShipCodeOption = CommonUtility
											.validateString(session.getAttribute("selectedShipCodeOption").toString());
							}
							if (shipCostTable != null && !shipCostTable.isEmpty()) {
								if (freeShipping.equalsIgnoreCase("no")) {
									for (ShipVia shipViaObj : shipCostTable) {
										if (CommonUtility.validateString(selectedShipCodeOption).length() > 0) {
											if (shipViaObj.getShipCode().equalsIgnoreCase(selectedShipCodeOption)) {
												freightValue = new FreightCalculatorModel();
												freightValue.setFreightValue(shipViaObj.getShipCost());
												session.setAttribute("selectedShipCodeOption", selectedShipCodeOption);
												break;
											}
										} else {
											if (shipViaObj.getShipViaID().equalsIgnoreCase(shipVia)) {
												freightValue = new FreightCalculatorModel();
												freightValue.setFreightValue(shipViaObj.getShipCost());
												break;
											}
										}
									}
								}
							}

						}
						if (freightValue != null) {
							total = total + freightValue.getFreightValue();
						}
					}

				}
				String userOfficePhone = (String) session.getAttribute("userOfficePhone");
				LinkedHashMap<String, Object> createQuoteInput = new LinkedHashMap<String, Object>();
				boolean nonCatalogItem = false;
				for (ProductsModel eachItem : cartListData) {
					if (eachItem.getItemId() == CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						nonCatalogItem = true;
						break;
					}
				}
				if (nonCatalogItem) {
					createQuoteInput.put("ARIItem", "Y");
				} else {
					createQuoteInput.put("ARIItem", "N");
				}

				createQuoteInput.put("orderedBy", orderedBy);
				createQuoteInput.put("itemList", cartListData);
				createQuoteInput.put("userToken", userDetail.getUserToken());
				createQuoteInput.put("shipToEntity", userDetail.getUserToken());
				createQuoteInput.put("orderNotes", orderNotes);
				createQuoteInput.put("shippingInstruction", shippingInstruction);
				createQuoteInput.put("poNumber", poNumber);
				createQuoteInput.put("reqDate", reqDate);
				createQuoteInput.put("shipVia", shipVia);
				createQuoteInput.put("billAddress", billAddress);
				createQuoteInput.put("shipAddress", shipAddress);
				createQuoteInput.put("defaultBillToId", userDetail.getBillAddress().getAddressBookId());
				createQuoteInput.put("defaultShipToId", userDetail.getShipAddress().getAddressBookId());
				createQuoteInput.put("customerId", userDetail.getUserToken());
				String wareHousecode = "UTIC";
				if (CommonUtility.validateString(shipVia).length() > 0 && shipVia.contains("PK")) {
					wareHousecode = userDetail.getWareHouseCodeStr();
					if (shipVia.equals("PKAA")) {
						wareHousecode = "ANN";
					} else if (shipVia.equals("PKCS")) {
						wareHousecode = "CEDA";
					} else if (shipVia.equals("PKCL")) {
						wareHousecode = "WATE";
					} else if (shipVia.equals("PKFM")) {
						wareHousecode = "FARM";
					} else if (shipVia.equals("PKUT")) {
						wareHousecode = "UTIC";
					}
					createQuoteInput.put("wareHousecode", wareHousecode);
				} else {
					if (userDetail.getWareHouseCodeStr() != "" && userDetail.getWareHouseCodeStr() != null)
						createQuoteInput.put("wareHousecode", userDetail.getWareHouseCodeStr());
					else {
						wareHousecode = CommonDBQuery.getSystemParamtersList().get("DEFAULT_WAREHOUSE_CODE_STR");
						createQuoteInput.put("wareHousecode", wareHousecode);
					}

				}
				createQuoteInput.put("customerCountry", userDetail.getCountry());
				createQuoteInput.put("customerName", shipAddress.getCustomerName());
				createQuoteInput.put("customerReleaseNumber", customerReleaseNumber);
				createQuoteInput.put("discountValue", discountValue);
				createQuoteInput.put("discountType", discountType);
				createQuoteInput.put("subsetId", subsetId);
				createQuoteInput.put("generalSubset", generalSubset);
				if (orderTotalDiscountAmount > 0) {
					createQuoteInput.put("orderDiscountType", "$");
					createQuoteInput.put("discountAmount", orderTotalDiscountAmount);
					createQuoteInput.put("discountPercent", discountValue);
				} else {
					createQuoteInput.put("orderDiscountType", discountType);
					createQuoteInput.put("discountAmount", discountAmount);
					createQuoteInput.put("discountPercent", discountValue);

				}

				if (CommonUtility.validateString(userDetail.getEmailAddress()).length() > 0) {
					createQuoteInput.put("userEmailAddress", userDetail.getEmailAddress());
				}
				if (CommonUtility.validateString(userOfficePhone).length() > 0) {
					createQuoteInput.put("userOfficePhone", userOfficePhone);
				}
				if (customFieldVal != null) {
					createQuoteInput.put("customFieldVal", customFieldVal);
				}
				if (freightValue != null) {
					createQuoteInput.put("freight", freightValue.getFreightValue());
				}
				createQuoteInput.put("creditCardValue", CCard);
				createQuoteInput.put("erpOrderType", salesOrderInput.getErpOrderType());
				createQuoteInput.put("totalCartFrieghtCharges", salesOrderInput.getErpOrderType());
				salesOrderInput.setSalesOrderInput(createQuoteInput);
				salesOrderInput.setShipViaServiceCode(shipViaServiceCode);
				salesOrderInput.setAdditionalName(additionalName != null ? additionalName : "");
				salesOrderInput.setAdditionalPickupPerson(additionalPickupPerson != null ? additionalPickupPerson : "");
				salesOrderInput.setAdditionalComments(custComments != null ? custComments : "");
				salesOrderInput.setAdditionalCommentsShipToStore(
						custCommentsShipToStore != null ? custCommentsShipToStore : "");
				SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();
				if (CommonUtility.customServiceUtility() != null) {
					erpOrderDetail = CommonUtility.customServiceUtility().submitOrderToERP(salesOrderInput);
				}
				if (erpOrderDetail == null) {
					erpOrderDetail = salesOrderSubmit.submitOrderToERP(salesOrderInput);
				}
				session.removeAttribute("selectedShipCodeOption");

				if (erpOrderDetail != null && !CommonUtility.validateString(erpOrderDetail.getStatusDescription())
						.toUpperCase().contains("ERROR")) {

				} else {
					defaultOrderDetail.setOrderStatus("Error while submitting the order");
					defaultOrderDetail.setStatusDescription(erpOrderDetail.getStatusDescription());
				}

				stmt = conn.prepareCall("{call ORDER_KEYWORD_PROC(?)}");
				stmt.setInt(1, erpOrderDetail.getOrderId());
				stmt.execute();
				ProductsDAO.clearCartBySessionId(1, session.getId());
				SalesModel otherDetail = new SalesModel();
				otherDetail.setSession(session);
				boolean mailsent = false;
				SendMailModel sendMailModel = null;
				sendMailModel = new SendMailModel();
				SendMailUtility sendMailUtility = new SendMailUtility();
				sendMailModel = new SendMailModel();
				sendMailModel.setToEmailId(userDetail.getEmailAddress());
				sendMailModel.setFirstName(userDetail.getFirstName());
				sendMailModel.setLastName(userDetail.getLastName());
				sendMailModel.setMailSubject("Order Confirmation");
				sendMailModel.setAdditionalComments(custComments != null ? custComments : "");
				sendMailModel.setAdditionalName(additionalName != null ? additionalName : "");
				sendMailModel.setAdditionalPickupPerson(additionalPickupPerson != null ? additionalPickupPerson : "");
				mailsent = sendMailUtility.sendOrderMail(erpOrderDetail, sendMailModel);

				if (mailsent) {
					String sql = "update orders set email_sent = 'Y' where order_id = ?";
					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1, erpOrderDetail.getOrderId());
					rs = pstmt.executeQuery();
				}
			}
			orderConfirmationV2(erpOrderDetail);
			System.out.println("Order - Confirmed");
			target = SUCCESS;

		} catch (SQLException e) {
			e.printStackTrace();
			exceptionFlag = true;
		} catch (Exception e) {
			e.printStackTrace();
			exceptionFlag = true;
		} finally {
			ConnectionManager.closeDBResultSet(rs);
			ConnectionManager.closeDBStatement(stmt);
			ConnectionManager.closeDBPreparedStatement(pstmt);
			ConnectionManager.closeDBConnection(conn);
		}
		if (exceptionFlag) {
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			contentObject.put("errorFlag", "Y");
			renderContent = LayoutGenerator.templateLoader("OrderConfirmation", contentObject, null, null, null);
		}
		return SUCCESS;

	}

	public String orderConfirmationV2(SalesModel orderDetails) {

		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		session.removeAttribute("cartCountSession");
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		String buyingCompanyId = (String) session.getAttribute("buyingCompanyId");
		String discountValue = (String) session.getAttribute("discountValue");
		String promotionCode = (String) session.getAttribute("promotionCode");
		String requestType = (String) session.getAttribute("requestType");
		String shipViaDisplay = CommonUtility.validateString(orderDetails.getShipViaDescription());
		String orderError = "";
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		HashMap<String, Integer> userAddressId;
		if (requestType != null && requestType.trim().equalsIgnoreCase("mobile")) {
			userAddressId = UsersDAO
					.getDefaultAddressIdForBCAddressBook((String) session.getAttribute("mobileUserName"));
			sessionUserId = (String) session.getAttribute("mobileUserId");
		} else {
			userAddressId = UsersDAO
					.getDefaultAddressIdForBCAddressBook((String) session.getAttribute(Global.USERNAME_KEY));
		}
		UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
		String auUser = (String) session.getAttribute("auUserLogin");

		int userId = 1;
		if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
			userId = userDetail.getUserId();
		} else if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("GUSTE_CHECKOUT_USER_NAME"))
				.length() > 0 && auUser != null) {
			auEmail = CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("GUSTE_CHECKOUT_USER_NAME"));
			HashMap<String, String> userDetailsFromDB = UsersDAO.getUserPasswordAndUserId(auEmail, "Y");
			userId = CommonUtility.validateNumber(userDetailsFromDB.get("userId"));
			userDetail.setUserId(userId);
		} else {
			userId = CommonUtility.validateNumber(sessionUserId);
		}

		List<Discount> appliedlDiscounts = new ArrayList<Discount>();
		if (userId > 1) {
			try {
				ArrayList<Integer> itemList = new ArrayList<Integer>();
				int subsetId = 0;
				int generalSubset = 0;
				if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y")) {
					subsetId = userDetail.getSubsetId();
					String tempGeneralSubset = CommonDBQuery.getSystemParamtersList().get("GENERALCATALOGID");
					generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
				} else {
					String tempSubset = (String) session.getAttribute("userSubsetId");
					subsetId = CommonUtility.validateNumber(tempSubset);
					String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
					generalSubset = CommonUtility.validateNumber(tempGeneralSubset);

					if (type != null && type.equalsIgnoreCase("mobile")) {
						userAddressId = UsersDAO
								.getDefaultAddressIdForBCAddressBook((String) session.getAttribute("mobileUserName"));
						userId = CommonUtility.validateNumber((String) session.getAttribute("mobileUserId"));
					} else {
						userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(
								(String) session.getAttribute(Global.USERNAME_KEY));
					}

					defaultBillToId = userAddressId.get("Bill");
					String defaultShiptoId = (String) session.getAttribute("defaultShipToId");

					// HashMap<String, UsersModel> userAddress =
					// UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,CommonUtility.validateNumber(defaultShiptoId));
					UserManagement userObj = new UserManagementImpl();
					HashMap<String, UsersModel> userAddress = userObj.getUserAddressFromBCAddressBook(defaultBillToId,
							CommonUtility.validateNumber(defaultShiptoId));

					UsersModel userBillAddress = userAddress.get("Bill");
					UsersModel userShipAddress = userAddress.get("Ship");

					if (userBillAddress.getCustomerName() != null) {
						billEntityName = userBillAddress.getCustomerName();
					} else {
						billEntityName = userBillAddress.getFirstName() + " " + userBillAddress.getLastName();
					}

					if (userShipAddress.getCustomerName() != null) {
						shipEntityName = userShipAddress.getCustomerName();
					} else {
						shipEntityName = userShipAddress.getFirstName() + " " + userShipAddress.getLastName();
					}

				}
				if (CommonUtility.validateString(promotionCode) != ""
						&& CommonUtility.validateString(promotionCode).length() > 0) {
					int counter = SalesDAO.updateCouponUse(buyingCompanyId, promotionCode, discountValue);
					if (counter > 0) {
						System.out.println("COUPONS UPDATED WITH ORDER DISCOUNT");
						session.removeAttribute("discountType");
						session.removeAttribute("discountValue");
						session.removeAttribute("discountValueToERP");
					}
				}
				String cartSortByValue = "";
				if (session.getAttribute("cartSortByValue") != null) {
					cartSortByValue = CommonUtility.validateString(session.getAttribute("cartSortByValue").toString());
					String[] sortCoumnArray = cartSortByValue.split(" ");
					if (sortCoumnArray != null && sortCoumnArray.length > 0) {
					}
				}
				LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
				if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
						.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
					customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(subsetId, generalSubset,
							StringUtils.join(itemList, " OR "), "itemid");
				}

				/**
				 * Below code Written is for Tyndale to group items based on shipMethods.
				 * *Reference- Chetan Sandesh
				 */
				LinkedHashMap<String, ArrayList<SalesModel>> orderItemGroupList = new LinkedHashMap<String, ArrayList<SalesModel>>();
				// CustomServiceProvider
				if (CommonUtility.customServiceUtility() != null) {
					orderItemGroupList = CommonUtility.customServiceUtility()
							.getGroupedItemsInSalesData(orderDetails.getOrderList());
					contentObject.put("orderItemGroupList", orderItemGroupList);
				}
				// CustomServiceProvider

				contentObject.put("orderTotal", orderDetails.getTotal());
				contentObject.put("orderItemList", orderDetails.getOrderList());
				contentObject.put("orderDetail", orderDetails);
				// contentObject.put("handling", orderDetail.getHandling());
				contentObject.put("billEntityName", billEntityName);
				contentObject.put("shipEntityName", shipEntityName);
				contentObject.put("discountValue", discountValue);
				contentObject.put("shipViaDisplay", shipViaDisplay);
				contentObject.put("customFieldVal", customFieldVal);
				contentObject.put("orderId", orderDetails.getOrderId());
				contentObject.put("userId", orderDetails.getUserId());
				contentObject.put("fullItemDetails", orderDetails.getOrderList());
				contentObject.put("appliedDiscountCoupons", appliedlDiscounts);
				contentObject.put("orderError", orderError);
				contentObject.put("designFees", orderDetails.getDesignFeesModel());
				contentObject.put("webReferenceNumber", orderDetails.getUniqueWebReferenceNumber());
				contentObject.put("additionalEmailNotification", additionalEmailNotification);
				renderContent = LayoutGenerator.templateLoader("OrderConfirmation", contentObject, null, null, null);
				if (CommonUtility.validateString(auUser).equalsIgnoreCase("Y") && !CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("ENABLE_BRONTO_ORDER_MODULE"))
						.equalsIgnoreCase("Y")) {
					session.removeAttribute("auUserDetails");
					session.removeAttribute("auUserLogin");
					session.removeAttribute("fromPage");
				}
				session.removeAttribute("cartSortByValue");
				if (session.getAttribute("fromApproveCart") != null) {
					session.removeAttribute("fromApproveCart");
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				ConnectionManager.closeDBResultSet(rs);
				ConnectionManager.closeDBPreparedStatement(pstmt);
				ConnectionManager.closeDBConnection(conn);
			}

			if (type == null) {
				type = "";
			}
			if (type.equalsIgnoreCase("")) {
				return renderContent;
			} else {
				return "orderSubApp";
			}
		} else {
			return "SESSIONEXPIRED";
		}
	}

	public String triggerEmailFromNotification() {
		String emailTemplateData = "";
		boolean flag = false;
		request = ServletActionContext.getRequest();
		String orderNum = request.getParameter("orderNum");
		String orderFlag = request.getParameter("orderFlag");
		String batchId = request.getParameter("batchId");
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		try {
			if (CommonUtility.validateString(orderFlag).equalsIgnoreCase("Y")) {
				flag = true;
			}
			if (CommonUtility.validateString(batchId).length() > 0) {
				emailTemplateData = CommonUtility.validateString(
						CommonDBQuery.getSystemParamtersList().get("EMAILTEMPLATE_NONSTOCK_PROCESS")) + batchId;
			} else if (CommonUtility.validateString(orderFlag).length() > 0
					&& CommonUtility.validateString(orderNum).length() > 0) {
				emailTemplateData = CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("EMAIL_TEMPLATE_STOCK")) + orderNum
						+ "?orderFlag=" + flag;
			} else {
				if (CommonUtility.validateString(orderNum).length() > 0) {
					emailTemplateData = CommonUtility.validateString(
							CommonDBQuery.getSystemParamtersList().get("EMAILTEMPLATE_ORDERPICKUP")) + orderNum;
				}
			}
			Cimm2BCentralResponseEntity orderResponseEntity = Cimm2BCentralClient.getInstance()
					.getDataObject(emailTemplateData, HttpMethod.PUT, null, Cimm2BCentralStatus.class);
			if (orderResponseEntity != null && orderResponseEntity.getStatus().getCode() == 200) {
				contentObject.put("batchId", batchId);
				contentObject.put("orderNum", orderNum);
				contentObject.put("orderFlag", orderFlag);
			} else {
				contentObject.put("result", orderResponseEntity.getStatus().getMessage());
			}
			renderContent = LayoutGenerator.templateLoader("emailConfirmation", contentObject, null, null, null);
			target = "success";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String mtrSearch() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		String heatNo = "";
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		heatNo = (String) request.getParameter("heatNo");
		String userName = CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("FTP_USERNAME"));
		String Password = CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("FTP_PASSWORD"));
		String host = CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("FTP_HOST_URL"));
		String folder = CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("FTP_DIRECTORY"));
		String serverpath = CommonUtility
				.validateString(CommonDBQuery.getSystemParamtersList().get("FTP_DOWNLOAD_PATH"));
		String searchFile = CommonUtility.validateString(heatNo);
		ArrayList<String> fileNames = new ArrayList<String>();

		System.out.println(request.getParameter("heatNo") + "heatNo = =" + searchFile);
		try {

			// new ftp client
			FTPClient ftp = new FTPClient();
			// try to connect
			ftp.connect(host, 21);
			// login to server
			if (!ftp.login(userName, Password)) {
				ftp.logout();
			}
			int reply = ftp.getReplyCode();
			// FTPReply stores a set of constants for FTP reply codes.
			if (!FTPReply.isPositiveCompletion(reply)) {
				ftp.disconnect();
			}

			// enter passive mode
			ftp.enterLocalPassiveMode();
			// get system name
			// System.out.println("Remote system is " + ftp.getSystemType());
			// change current directory
			ftp.changeWorkingDirectory(folder);
			System.out.println("Current directory is " + ftp.printWorkingDirectory());

			// get list of filenames
			FTPFile[] ftpFiles = ftp.listFiles();
			requestType = "MTRSEARCH";
			OutputStream output = null;
			if (ftpFiles != null && ftpFiles.length > 0) {
				System.out.println(ftpFiles);
				// loop thru files
				for (FTPFile file : ftpFiles) {
					System.out.println("File is " + file.getName());
					if (file.getName().toUpperCase().contains(searchFile.toUpperCase())) {
						System.out.println("File is " + file.getName());
						// get output stream
						output = new FileOutputStream(serverpath + "/" + file.getName());
						// get the file from the remote system
						ftp.retrieveFile(file.getName(), output);
						fileNames.add(file.getName());
						System.out.println("file downloading" + file.getName());
					}
					// close output stream
					/*
					 * PrintWriter out = response.getWriter(); ServletOutputStream out =
					 * response.getOutputStream();
					 * response.setContentType("application/force-download");
					 * response.setContentLength((int)f.length());
					 * response.setHeader("Content-Transfer-Encoding", "binary");
					 * response.setHeader("Content-Disposition","attachment; filename=\"" +
					 * "xxx\"");//fileName);
					 */ // delete the file
						// ftp.deleteFile(file.getName());
					if (output != null) {
						System.out.println("output" + output);
						output.close();
					}
				}

			}
			contentObject.put("files", fileNames);
			contentObject.put("responseType", requestType);
			renderContent = LayoutGenerator.templateLoader("AjaxResultPage", contentObject, null, null, null);
			target = "success";
			ftp.logout();
			ftp.disconnect();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return target;
	}

	public String calculateTaxAndFreight() {
		try {

			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String customerNumber = (String) session.getAttribute("customerId");
			int defaultBillToId = Integer.parseInt(session.getAttribute("defaultBillToId").toString());
			int defaultShipToId = Integer.parseInt(request.getParameter("shipAddressBookId"));
			double orderTax = Double.parseDouble(request.getParameter("orderTax"));
			double totalCartFrieghtCharges = 0, subTotal = 0;
			String wareHouseCode = session.getAttribute("wareHouseCode").toString();// request.getParameter("pickUpWareHouseCode");
			// String buyingCompanyId = (String) session.getAttribute("buyingCompanyId");
			String shipViaCode = request.getParameter("shipViaCode");
			int userId = CommonUtility.validateNumber(session.getAttribute(Global.USERID_KEY).toString());
			String pickUpWareHouseCode = CommonUtility.validateString(request.getParameter("pickUpWareHouseCode"));

			int subsetId = CommonUtility.validateNumber(session.getAttribute("userSubsetId").toString());
			int generalSubset = CommonUtility.validateNumber(session.getAttribute("generalCatalog").toString());

			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			ArrayList<ProductsModel> cartDetails = new ArrayList<>();

			if (isReOrder != null && isReOrder.trim().equalsIgnoreCase("Y")) {
				session.setAttribute("isReOrder", isReOrder);
				cartDetails = SalesDAO.getOrderDetailsQuote(session);
			} else {
				session.setAttribute("isReOrder", "N");
				cartDetails = SalesDAO.getOrderDetails(savedGroupId, userId, subsetId, generalSubset, session,
						"confirmOrder");
			}

			if (cartDetails != null && cartDetails.size() > 0) {
				subTotal = cartDetails.get(0).getCartTotal();
			}

			HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
					defaultShipToId);
			UsersModel shippingAddress = userAddress.get("Ship");
			UsersModel billingAddress = userAddress.get("Bill");
			Map<String, Object> details = new LinkedHashMap<>();
			details.put("wareHouseCode", wareHouseCode);
			details.put("customerERPId", customerNumber);
			details.put("pickUpWareHouseCode", pickUpWareHouseCode);

			session.removeAttribute("overrideShipAddress");
			if (CommonUtility.validateString(request.getParameter("overrideShip")).equalsIgnoreCase("Y")
					&& shippingAddress != null) {
				shippingAddress.setAddress1(shipAddress1);
				shippingAddress.setAddress2(shipAddress2);
				shippingAddress.setCity(shipCity);
				shippingAddress.setState(shipState);
				if (CommonUtility.validateString(shipCountry).equalsIgnoreCase("USA")) {
					shipCountry = "US";
				} else {
					shippingAddress.setCountry(shipCountry);
				}
				shippingAddress.setZipCode(shipZipcode);
				AddressModel overrideShipAddress = new AddressModel();
				overrideShipAddress.setCompanyName(shippingAddress.getCompanyName());
				overrideShipAddress.setAddress1(shipAddress1);
				overrideShipAddress.setAddress2(shipAddress2);
				overrideShipAddress.setCity(shipCity);
				overrideShipAddress.setState(shipState);
				if (CommonUtility.validateString(shipCountry).equalsIgnoreCase("USA")) {
					shipCountry = "US";
				} else {
					overrideShipAddress.setCountry(shipCountry);
				}
				overrideShipAddress.setZipCode(shipZipcode);
				overrideShipAddress.setPhoneNo(CommonUtility.validateString(shipPhoneNo).length() > 0 ? shipPhoneNo
						: shippingAddress.getPhoneNo());
				overrideShipAddress.setEmailAddress(CommonUtility.validateString(shipEmail).length() > 0 ? shipEmail
						: shippingAddress.getEmailAddress());
				if (shippingAddress.getShipToId() != null) {
					overrideShipAddress.setShipToId(shippingAddress.getShipToId());
				}
				session.setAttribute("overrideShipAddress", overrideShipAddress);
			}

			if (Boolean.parseBoolean(request.getParameter("calculateFreight"))) {
				double totalCartFrieght = SalesDAO.getTotalCartWeight(cartDetails);
				WarehouseModel wareHouseDetail = CommonUtility.getWarehousesAsMap(UsersDAO.getWareHouses())
						.get(wareHouseCode);
				ShipVia selectedShipVia = CommonUtility.getShipViaByCode(CommonDBQuery.getSiteShipViaList(),
						shipViaCode);

				if (selectedShipVia.getServiceProvider().equalsIgnoreCase("UPS")
						&& !CommonUtility.validateString(selectedShipVia.getType()).equalsIgnoreCase("COLLECT")
						&& CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("UPS_FEDEX_CONFIGURED"))
								.equals("Y")) {

					totalCartFrieghtCharges = new UpsFreightService().getFreightCharges(shippingAddress,
							wareHouseDetail, cartDetails, selectedShipVia.getShipCode(),
							selectedShipVia.getDescription());

					if (totalCartFrieghtCharges > 0 && CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("ADDITIONAL_FREIGHT_CHARGES"))
							.length() > 0) {
						totalCartFrieghtCharges += totalCartFrieghtCharges * CommonUtility.validateDoubleNumber(
								CommonDBQuery.getSystemParamtersList().get("ADDITIONAL_FREIGHT_CHARGES"));
					}
				} else if (selectedShipVia.getServiceProvider().equalsIgnoreCase("FEDEX")
						&& !CommonUtility.validateString(selectedShipVia.getType()).equalsIgnoreCase("COLLECT")
						&& CommonUtility
								.validateString(CommonDBQuery.getSystemParamtersList().get("UPS_FEDEX_CONFIGURED"))
								.equals("Y")) {
					ProductsModel totalCartDimensions = new ProductsModel();
					totalCartDimensions = SalesDAO.getTotalDimensions(cartDetails);
					int totalCartLength = (int) totalCartDimensions.getLength();
					int totalCartHeight = (int) totalCartDimensions.getHeight();
					int totalCartWidth = (int) totalCartDimensions.getWidth();
					String fedExCartDimensionUom = (CommonDBQuery.getSystemParamtersList()
							.get("FEDEX_FRIEGHT_DIMENSION") != null
									? CommonDBQuery.getSystemParamtersList().get("FEDEX_FRIEGHT_DIMENSION")
									: "CM");
					String fedExCartWeightUom = (CommonDBQuery.getSystemParamtersList().get("FEDEX_FRIEGHT_UOM") != null
							? CommonDBQuery.getSystemParamtersList().get("FEDEX_FRIEGHT_DIMENSION")
							: "LB");
					PackageDimension fedExCartDimension = new PackageDimension(fedExCartDimensionUom, totalCartHeight,
							totalCartWidth, totalCartLength);
					PackageInfo packageInfo = new PackageInfo(fedExCartWeightUom,
							CommonUtility.validateParseDoubleToString(totalCartFrieght));

					totalCartFrieghtCharges = new FedExFreightSerivce().getFedExCharges(shippingAddress,
							wareHouseDetail, packageInfo, fedExCartDimension, "REGULAR_PICKUP",
							selectedShipVia.getShipCode(), "YOUR_PACKAGING", cartDetails);
				} else {
					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("HAS_RESTRICTION_OVER_SHIPPING_COST"))
							.equals("Y")) {
						// CustomServiceProvider
						if (CommonUtility.customServiceUtility() != null) {
							totalCartFrieghtCharges = CommonUtility.customServiceUtility().verifyAndExtractShippingCost(
									selectedShipVia, shippingAddress.getZipCode(), billingAddress.getZipCode());
						}
						// CustomServiceProvider
					} else {
						totalCartFrieghtCharges = selectedShipVia.getShipCost();
					}
				}
			}
			if (Boolean.parseBoolean(request.getParameter("calculateTax"))) {
				details.put("otherCharges", totalCartFrieghtCharges);
				SalesModel createdShellOrder = com.erp.service.cimm2bcentral.action.SalesOrderManagementAction
						.createShellOrder(shippingAddress, billingAddress, cartDetails, details);
				contentObject.put("createdShellOrder", createdShellOrder);
				orderTax = createdShellOrder.getTax();
			}
			contentObject.put("totalCartFrieghtCharges", totalCartFrieghtCharges);
			contentObject.put("subTotal", subTotal);
			contentObject.put("orderTax", orderTax);
			contentObject.put("grandTotal", (orderTax + totalCartFrieghtCharges + subTotal));
			renderContent = new Gson().toJson(contentObject);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String processCcorderRes() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			TrustCommerceService.setRequestFromSession(session, request);
			contentObject.put("request", request);
			renderContent = LayoutGenerator.templateLoader("SubmitCreditCardDetailsPage", contentObject, null, null,
					null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String CardConnectPaymentResponse() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		try {
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String outStandingPayment = "N";
			if (session.getAttribute("outStandingPayment") != null) {
				outStandingPayment = CommonUtility.validateString((String) session.getAttribute("outStandingPayment"));
			}
			String userTransactionType = "";
			if (session != null && session.getAttribute("auUserLogin") != null) {
				userTransactionType = CommonUtility.validateString(session.getAttribute("auUserLogin").toString());
			}
			if (userTransactionType.equalsIgnoreCase("Y")) {
				UsersModel userDetail = (UsersModel) session.getAttribute("auUserDetails");
				sessionUserId = CommonUtility
						.validateString(CommonUtility.validateParseIntegerToString(userDetail.getUserId()));
				userId = CommonUtility.validateNumber(sessionUserId);
			}

			if (userId > 1) {

				String ENDPOINT = CommonDBQuery.getSystemParamtersList().get("CARDCONNECT_URL");
				String USERNAME = CommonDBQuery.getSystemParamtersList().get("CARDCONNECT_USERNAME");
				String PASSWORD = CommonDBQuery.getSystemParamtersList().get("CARDCONNECT_PASSWORD");
				String merchantId = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_ACCEPTOR_ID");
				String paymentAccountType = CommonDBQuery.getSystemParamtersList().get("PAYMENT_ACCOUNT_TYPE");
				String ccCurrencyCode = CommonDBQuery.getSystemParamtersList().get("CARDCONNECT_CURRENCY");
				String customerCountry = (String) session.getAttribute("customerCountry");
				String ccCountry;
				if (customerCountry != null && customerCountry.trim().length() > 0) {
					ccCountry = customerCountry;
				} else {
					ccCountry = CommonDBQuery.getSystemParamtersList().get("CARDCONNECT_COUNTRY");
				}

				HashMap<String, String> cardConnectResponse = new HashMap<String, String>();
				orderTotal = CommonUtility.roundHalfUp(CommonUtility.validateParseDoubleToString(orderTotal));

				CreditCardManagementModel ccManagementData = new CreditCardManagementModel();
				ccManagementData.setMerchantId(merchantId);
				ccManagementData.setPaymentAccountType(paymentAccountType);
				ccManagementData.setCcToken(ccToken);
				ccManagementData.setCcExp(ccExp);
				ccManagementData.setCcCvv2VrfyCode(ccCvv2VrfyCode);
				ccManagementData.setCcAmount(orderTotal);
				ccManagementData.setOrderNumber(salesOrderId);
				ccManagementData.setCardHolder(cardHolder);
				ccManagementData.setAddress1(address1);
				ccManagementData.setCity(city);
				ccManagementData.setState(state);
				ccManagementData.setZipCode(zipCode);
				ccManagementData.setCcCurrencyCode(ccCurrencyCode);
				ccManagementData.setCcCountry(ccCountry);
				ccManagementData.setENDPOINT(ENDPOINT);
				ccManagementData.setUSERNAME(USERNAME);
				ccManagementData.setPASSWORD(PASSWORD);

				System.out.println("merchantId------- : " + merchantId);
				System.out.println("paymentAccountType------- : " + paymentAccountType);
				System.out.println("ccToken------- : " + ccToken);
				System.out.println("ccExp------- : " + ccExp);
				System.out.println("ccCvv2VrfyCode------- : ***");
				System.out.println("orderTotal------- : " + orderTotal);
				System.out.println("salesOrderId------- : " + salesOrderId);
				System.out.println("cardHolder------- : " + cardHolder);
				System.out.println("address1------- : " + address1);
				System.out.println("city------- : " + city);
				System.out.println("state------- : " + state);
				System.out.println("zipCode------- : " + zipCode);
				System.out.println("ccCurrencyCode------- : " + ccCurrencyCode);
				System.out.println("ccCountry------- : " + ccCountry);
				System.out.println("ENDPOINT------- : " + ENDPOINT);
				System.out.println("USERNAME ------- : *************");
				System.out.println("PASSWORD------- : **************");

				CardConnectPaymentGateway cardconnectPaymentGateway = new CardConnectPaymentGateway();
				cardConnectResponse = cardconnectPaymentGateway.authCaptureCardDetails(ccManagementData);
				System.out.println("-------------------------------------------");

				session.removeAttribute("orderNumber");
				String paymentGateWayInvoice = null;
				String paymentAccountId = null;
				String cardExpireDate = null;
				String paymentGateWayRequestedAmount = null;
				String sessionID = null;
				String arTransactionID = null;
				String status = cardConnectResponse
						.get(LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.message").trim());
				String authCode = cardConnectResponse.get(LayoutLoader.getMessageProperties().get("EN")
						.getProperty("creditcard.authorizationnumber").trim());
				String cardNumber = cardConnectResponse
						.get(LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.cardNumber").trim());
				System.out.println("NG cardnumber -- " + cardConnectResponse.get("account"));
				String referencenumber = cardConnectResponse.get(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.referencenumber").trim());
				String result = cardConnectResponse
						.get(LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.result").trim());
				if (cardConnectResponse.get(LayoutLoader.getMessageProperties().get("EN")
						.getProperty("creditcard.invoicenumber")) != null) {
					paymentGateWayInvoice = cardConnectResponse.get(LayoutLoader.getMessageProperties().get("EN")
							.getProperty("creditcard.invoicenumber").trim());
				}
				String cardType = cardConnectResponse
						.get(LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.cardType").trim());
				String transactionID = cardConnectResponse.get(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.transactionId").trim());
				String tokenId = cardConnectResponse
						.get(LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.tokenID").trim());
				String approvedAmount = cardConnectResponse
						.get(LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.amount").trim());
				if (cardConnectResponse.get(LayoutLoader.getMessageProperties().get("EN")
						.getProperty("creditcard.originalamount")) != null) {
					paymentGateWayRequestedAmount = cardConnectResponse.get(LayoutLoader.getMessageProperties()
							.get("EN").getProperty("creditcard.originalamount").trim());
				}
				if (cardConnectResponse.get(
						LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.sessionID")) != null) {
					sessionID = cardConnectResponse.get(
							LayoutLoader.getMessageProperties().get("EN").getProperty("creditcard.sessionID").trim());
				}
				if (cardConnectResponse.get(LayoutLoader.getMessageProperties().get("EN")
						.getProperty("creditcard.expirationcard")) != null) {
					cardExpireDate = cardConnectResponse.get(LayoutLoader.getMessageProperties().get("EN")
							.getProperty("creditcard.expirationcard").trim());
				} else {
					cardExpireDate = ccExp;
				}
				paymentAccountId = cardConnectResponse.get("PaymentAccountID");
				System.err.println("response paymentAccountId" + paymentAccountId);
				if (CommonUtility.validateString(paymentAccountId).equalsIgnoreCase("")
						&& CommonUtility.validateString(transactionID).length() > 1) {
					paymentAccountId = CIMM2VelocityTool.getInstance().paymentAccountCreate(transactionID);
					arTransactionID = transactionID;
				}

				if (CommonUtility.validateString(paymentAccountId).length() > 0) {
					Items response = CIMM2VelocityTool.getInstance().paymentAccountQuery(paymentAccountId);
					if (response != null && response.getItem() != null
							&& response.getItem().getPaymentAccountID() != null) {
						cardType = response.getItem().getPaymentBrand();
						transactionID = response.getItem().getPaymentAccountID();
						status = "Approved";
						cardNumber = response.getItem().getTruncatedCardNumber();
						contentObject.put("expMonth", response.getItem().getExpirationMonth());
						contentObject.put("expYear", response.getItem().getExpirationYear());
					}

				}

				System.out.println("status------- : " + status);
				System.out.println("authCode------ : " + authCode);
				System.out.println("cardNumber----------- : " + cardNumber);
				System.out.println("referencenumber : " + referencenumber);
				System.out.println("result----- : " + result);
				System.out.println("tokenId-------- : " + tokenId);
				System.out.println("invoicenumber : " + paymentGateWayInvoice);
				System.out.println("approvedAmount : " + approvedAmount);
				System.out.println("cardType : " + cardType);
				System.out.println("transactionID : " + transactionID);
				System.out.println("approvedAmount : " + approvedAmount);
				System.out.println("originalamount/paymentGateWayRequestedAmount : " + paymentGateWayRequestedAmount);
				System.out.println("sessionID : " + sessionID);
				System.out.println("cardExpireDate : " + cardExpireDate);

				String creditCartApprovedStatus = CommonDBQuery.getSystemParamtersList()
						.get("PAYMENT_GATEWAY_APPROVED_STATUS");
				double tot1 = 0;
				System.out.println("transactionID-------" + transactionID);
				if (transactionID != null && transactionID.trim().length() > 0
						&& !transactionID.trim().equalsIgnoreCase("null")) {

					contentObject.put("creditCartApprovedStatus", creditCartApprovedStatus);
					contentObject.put("arTransactionID", arTransactionID);
					contentObject.put("paymentGateWayStatus", status);
					contentObject.put("paymentGateWayApprovalCode", authCode);
					contentObject.put("paymentGateWayCardNumber", cardNumber);
					contentObject.put("paymentGateWayRefrenceNumber", referencenumber);
					contentObject.put("paymentGateWayresult", result);
					contentObject.put("paymentGateWayInvoice", paymentGateWayInvoice);
					contentObject.put("paymentGateWayapprovedAmount", approvedAmount);
					contentObject.put("paymentGateWayCardType", cardType);
					contentObject.put("paymentGateWayTransactionID", transactionID);
					contentObject.put("paymentGateWayAccountTokenId", tokenId);
					contentObject.put("orderNumber", orderNumber);
					contentObject.put("paymentGateWayRequestedAmount", paymentGateWayRequestedAmount);
					contentObject.put("paymentGateWayResponseCode", referencenumber);
					contentObject.put("paymentGateWayCardExpireDate", cardExpireDate);

					if (CommonUtility.validateString(status).equalsIgnoreCase("Approved")
							|| CommonUtility.validateString(status).equalsIgnoreCase("A")) {
						if (userTransactionType.equalsIgnoreCase("Y")) {
							renderContent = LayoutGenerator.templateLoader("CreditCardResponseWithoutLogin",
									contentObject, null, null, null);
						} else {
							ArrayList<SalesModel> orderDetailList = null;
							String erpOrderNumbers = "";
							String delimit = "";
							if (CommonUtility.validateString(outStandingPayment).equalsIgnoreCase("Y")) {
								if (session.getAttribute("OutStandingOrderPaymentList") != null) {
									orderDetailList = (ArrayList<SalesModel>) session
											.getAttribute("OutStandingOrderPaymentList");
									if (orderDetailList != null && !orderDetailList.isEmpty()) {
										for (SalesModel objectModel : orderDetailList) {
											erpOrderNumbers = erpOrderNumbers + delimit + objectModel.getOrderNum();
											delimit = ",";
										}
									}
								}
								cardNumber = cardNumber.replaceAll("XXXX-", "");
								cardNumber = cardNumber.replaceAll("\\*", "");
								cardNumber = cardNumber.replaceAll("#", "");
								cardNumber = cardNumber.replaceAll("-", "");
								SalesDAO.outStandingPaymentDAOUpdate(transactionID, authCode, referencenumber, status,
										Double.valueOf(approvedAmount), erpOrderNumbers, cardNumber);

								contentObject.put("erpOrderNumbers", erpOrderNumbers);
								contentObject.put("orderDetailList", orderDetailList);
							}
							renderContent = LayoutGenerator.templateLoader("CreditCardResponse", contentObject, null,
									null, null);

						}
					} else { // if(status.trim().equalsIgnoreCase("DECLINE"))
						renderContent = LayoutGenerator.templateLoader("CreditCardDeclinePage", contentObject, null,
								null, null);
					}
				} else {

					contentObject.put("creditCartApprovedStatus", creditCartApprovedStatus);
					contentObject.put("paymentGateWayStatus", status);
					contentObject.put("paymentGateWayApprovalCode", authCode);
					contentObject.put("paymentGateWayCardNumber", cardNumber);
					contentObject.put("paymentGateWayRefrenceNumber", referencenumber);
					contentObject.put("paymentGateWayresult", result);
					contentObject.put("paymentGateWayInvoice", paymentGateWayInvoice);
					contentObject.put("paymentGateWayapprovedAmount", approvedAmount);
					contentObject.put("paymentGateWayCardType", cardType);
					contentObject.put("paymentGateWayTransactionID", transactionID);
					contentObject.put("paymentGateWayAccountTokenId", tokenId);
					contentObject.put("orderNumber", orderNumber);
					contentObject.put("paymentGateWayRequestedAmount", paymentGateWayRequestedAmount);
					renderContent = LayoutGenerator.templateLoader("CreditCardDeclinePage", contentObject, null, null,
							null);
				}
				target = SUCCESS;

			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String OneClickOrder() {

		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		CallableStatement stmt = null;
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		Gson gson = new Gson();
		String tempdefaultShipId = null;
		String userName = null;
		String sessionUserId = null;
		String c = "";
		String idList = "";
		target = "SESSIONEXPIRED";
		try {
			conn = ConnectionManager.getDBConnection();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		String userToken = (String) session.getAttribute("userToken");
		eclipseSessionId = userToken;
		String anonymous = "N";
		boolean sendMailFlag = true;
		String userSelectedLocation = (String) request.getParameter("selectedLocation");
		String customerNumber = (String) session.getAttribute("customerId");
		double orderTax = Double.parseDouble(request.getParameter("orderTax"));
		String totalCartFrieghtCharges = request.getParameter("totalCartFrieghtCharges");
		int subsetId = CommonUtility.validateNumber(session.getAttribute("userSubsetId").toString());
		int generalSubset = CommonUtility.validateNumber(session.getAttribute("generalCatalog").toString());
		int userId = CommonUtility.validateNumber(session.getAttribute(Global.USERID_KEY).toString());
		String homeTerritory = (String) session.getAttribute("shipBranchId");
		String buyingCompanyId;
		String entityId;
		int orderId = 0;
		int cartCount = 0;
		String erpUserContactID = "";
		String discountCouponCode = null;
		double discountAmount = 0.0D;
		double orderTotalDiscountAmount = 0.0D;
		float discountInPercent = 0.00F;
		String discountCouponType = null;
		erpUserContactID = CommonUtility.validateString(UsersDAO.getContactID(userId));
		UserManagement usersObj = new UserManagementImpl();
		String shipToChanged = CommonUtility.validateString(request.getParameter("shipToChanged"));
		ArrayList<ProductsModel> itemDetailObject = new ArrayList<ProductsModel>();
		LinkedHashMap<String, String> lineItemCommentList = new LinkedHashMap<String, String>();
		LinkedHashMap<String, Integer> UOMQTY = new LinkedHashMap<String, Integer>();
		ArrayList<ProductsModel> partIdentifiersList = new ArrayList<ProductsModel>();
		ArrayList<Integer> partIdentifierQuantity = new ArrayList<Integer>();
		ArrayList<String> partIdentifier = new ArrayList<String>();
		ProductsModel partIdentifiers = new ProductsModel();
		SalesModel defaultOrderDetail = new SalesModel();
		double orderSubTotal = 0.0;
		double orderGrandTotal = 0.0;
		if (CommonUtility.validateString(type).equalsIgnoreCase("mobile")) {
			session.setAttribute("type", "mobile");
			String id = request.getParameter("uId");
			userName = request.getParameter("userName");
			System.out.println(userName);
			userId = CommonUtility.validateNumber(id);
			HashMap<String, String> userDetails = UsersDAO.getUserPasswordAndUserId(userName, "Y");
			SecureData getPassword = new SecureData();
			String userPassword = getPassword.validatePassword(userDetails.get("password"));
			LoginAuthentication loginAuthentication = new LoginAuthentication();
			loginAuthentication.authenticate(userName, userPassword, session);
			buyingCompanyId = request.getParameter("buyingCompanyId");
			entityId = request.getParameter("entityId");
		} else {
			if (shipToChanged != null && shipToChanged.trim().equalsIgnoreCase("Y")) {
				if (session.getAttribute("quoteOrderId") != null)
					session.removeAttribute("quoteOrderId");
				if (session.getAttribute("quoteNumber") != null)
					session.removeAttribute("quoteNumber");
			}
			sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			buyingCompanyId = (String) session.getAttribute("buyingCompanyId");
			entityId = (String) session.getAttribute("billingEntityId");
			userId = CommonUtility.validateNumber(sessionUserId);
			userName = (String) session.getAttribute(Global.USERNAME_KEY);
		}
		if (defaultShipToId > 0) {
			session.setAttribute("defaultShipToId", Integer.toString(defaultShipToId));
		} else if (CommonUtility.validateString((String) session.getAttribute("defaultShipToId")).length() == 0) {
			HashMap<String, Integer> defaultAddresssId = UsersDAO.getDefaultAddressId(userId);
			int currentDefaultId = defaultAddresssId.get("Ship");
			session.setAttribute("defaultShipToId", Integer.toString(currentDefaultId));
		}

		tempdefaultShipId = (String) session.getAttribute("defaultShipToId");
		String wareHousecode = (String) session.getAttribute("wareHouseCode");
		if (userId > 1) {
			String sql = "";
			try {
				session.removeAttribute("orderingType");
				session.removeAttribute("calculateTax");
				poNumber = (String) session.getAttribute("poNumber");
				poNumber = CommonUtility.validateString(poNumber);
				shippingInstruction = (String) session.getAttribute("shippingInstruction");
				shippingInstruction = CommonUtility.validateString(shippingInstruction);
				orderNotes = (String) session.getAttribute("orderNotes");
				orderNotes = CommonUtility.validateString(orderNotes);
				reqDate = (String) session.getAttribute("reqDate");
				reqDate = CommonUtility.validateString(reqDate);
				String orderedBy = "";
				if (session.getAttribute(Global.USERNAME_KEY) != null && CommonUtility
						.validateString(session.getAttribute(Global.USERNAME_KEY).toString()).length() > 0) {
					orderedBy = CommonUtility.validateString(session.getAttribute(Global.USERNAME_KEY).toString());
				}
				if (tempdefaultShipId != null) {
					defaultShipToId = CommonUtility.validateNumber(tempdefaultShipId);
				}
				if (defaultBillToId == 0) {
					HashMap<String, Integer> userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(userName);
					defaultBillToId = userAddressId.get("Bill");
				}
				HashMap<String, ArrayList<UsersModel>> userAddressList = usersObj
						.getAddressListFromBCAddressBook(CommonUtility.validateNumber(buyingCompanyId), userId);
				billAddressList = userAddressList.get("Bill");
				shipAddressList = userAddressList.get("Ship");
				HashMap<String, UsersModel> userAddress = usersObj.getUserAddressFromBCAddressBook(defaultBillToId,
						defaultShipToId);
				billAddress = userAddress.get("Bill");
				shipAddress = userAddress.get("Ship");
				if (shipAddress != null) {
					shipAddress.setOrderedBy(orderedBy);
				}

				Map<String, Object> details = new LinkedHashMap<>();
				details.put("wareHouseCode", wareHousecode);
				details.put("customerERPId", customerNumber);
				if (CommonUtility.customServiceUtility() != null) {
					String Shipvia = null;
					Shipvia = CommonUtility.customServiceUtility()
							.getShipviaDetail(shipAddress.getZipCodeStringFormat());
					if (Shipvia != null) {
						shipAddress.setShipVia(Shipvia);
					} else {
						shipAddress.setShipVia("BW BEST WAY");
					}
				} // CustomServiceProvider

				shipAddress.setOrderStatus(orderStatus);
				shipAddress.setBranchID(selectedBranch);
				if (shipAddress != null && shipAddress.getShipToId() != null
						&& shipAddress.getShipToId().length() > 0) {
					session.setAttribute("selectedShipToId", shipAddress.getShipToId());
					UserManagement userObj = new UserManagementImpl();
					UsersModel userModelForERP = new UsersModel();
					userModelForERP.setSession(session);
					userModelForERP.setCustomerId(CommonUtility.validateString(customerNumber));
					userModelForERP.setShipToId(shipAddress.getShipToId());
					userModelForERP.setShipToChanged(shipToChanged); // -------------- For ship default
					userModelForERP.setSession(session);
					session.removeAttribute("salesRepIn");
					session.removeAttribute("salesRepOut");
					// userModelForERP = userObj.getCustomerDataFromERP(userModelForERP);
					userObj.getCustomerDataFromERP(userModelForERP);
				}
				session.setAttribute("defaultBillAddress", billAddress);
				session.setAttribute("defaultShipAddress", shipAddress);
				String lineComment = "";
				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				ArrayList<ProductsModel> cartDetails = new ArrayList<>();

				if (isReOrder != null && isReOrder.trim().equalsIgnoreCase("Y")) {
					session.setAttribute("isReOrder", isReOrder);
					cartDetails = SalesDAO.getOrderDetailsQuote(session);
				} else {
					session.setAttribute("isReOrder", "N");
					cartDetails = SalesDAO.getOrderDetails(savedGroupId, userId, subsetId, generalSubset, session,
							"confirmOrder");
				}
				int packageQty = 1;
				SalesModel createdShellOrder = com.erp.service.cimm2bcentral.action.SalesOrderManagementAction
						.createShellOrder(shipAddress, billAddress, cartDetails, details);
				orderTax = createdShellOrder.getTax();
				LinkedHashMap<Integer, ProductsModel> allItemsData = new LinkedHashMap<Integer, ProductsModel>();

				for (ProductsModel item : cartDetails) {
					cartCount++;
					ProductsModel saveItems = new ProductsModel();
					ProductsModel itmVal = new ProductsModel();
					if (cartCount == 1) {
						String paymentMethod = "Purchase Order";
						System.out.println("ccTransID : " + ccTransactionId);
						String ipaddress = request.getHeader("X-Forwarded-For");

						if (ipaddress == null)
							ipaddress = request.getRemoteAddr();// userDefaultAddress

						String refKey = "";
						if (ccRefrenceCode != null && ccRefrenceCode.trim().length() > 0) {
							refKey = ccRefrenceCode;
						}
						String homeBranchId = (String) session.getAttribute("homeBranchId");
						String homeBranchName = (String) session.getAttribute("homeBranchName");
						String shipBranchId = (String) session.getAttribute("shipBranchId");
						String shipBranchName = (String) session.getAttribute("shipBranchName");

						LinkedHashMap<String, Object> orderDetails = new LinkedHashMap<String, Object>();
						orderDetails.put("homeBranchId", homeBranchId);
						orderDetails.put("homeBranchName", homeBranchName);
						orderDetails.put("shipBranchId", shipBranchId);
						orderDetails.put("shipBranchName", shipBranchName);
						orderDetails.put("wareHousecode", wareHousecode);
						orderDetails.put("gasPoNumber", gasPoNumber);
						billAddress.setSession(session);
						Discount orderShippingDiscount = getOrderShippingDiscount(session);
						List<Discount> orderDiscounts = getOrderDiscount(session);
						if (orderDiscounts != null && orderDiscounts.size() > 0) {
							for (Discount orderDiscount : orderDiscounts) {

								try {
									buyingCompanyId = session.getAttribute("buyingCompanyId").toString();
									String website = (String) session.getAttribute("websiteName");
									if (orderId <= 0) {
										orderId = CommonDBQuery.getSequenceId("ORDER_ID_SEQ");
									}
									orderDetails.put(SalesActionContantVariables.ORDER_ID, orderId);
									orderDetails.put(SalesActionContantVariables.USER_ID, userId);
									// save Order Level Discount
								} catch (Exception e) {
									e.printStackTrace();
								}
							}
						}
						orderId = saveOrder(conn, userId, orderId, billAddress, shipAddress, "webOrder", taxExempt,
								refKey, paymentMethod, ccNumber, ccExp, cardHolder, poNumber, ipaddress,
								creditCardValue, customerReleaseNumber, orderDetails);
						// Connection conn, int userId, int orderId, UsersModel userBillAddress,
						// UsersModel userShipAddress,String reqType,String taxExempt,String refKey,
						// String paymentMethod, String creditCardNumber, String creditExp, String
						// cardHolderName,String purchaseOrderNumber,String ipAddress,CreditCardModel
						// creditCardValue)
						UsersDAO.updateUserLog(
								CommonUtility.validateNumber((String) session.getAttribute(Global.USERID_KEY)),
								"Order Submitted", session.getId(), ipaddress, "Click", Integer.toString(orderId));
						salesOrderId = orderId;
						/*
						 * billEntityId = userAddress.get("Bill").getEntityId(); shipEntityId =
						 * userAddress.get("Ship").getEntityId();
						 */
					}
					allItemsData.put(item.getItemId(), item);
					UOMQTY.put(item.getPartNumber(), packageQty);
					lineItemCommentList.put(item.getPartNumber(), item.getLineItemComment());
					orderSubTotal = orderSubTotal + ((item.getPrice() * item.getQty()) - 0);
					saveItems.setCartId(item.getCartId());
					saveItems.setItemId(item.getItemId());
					saveItems.setInvoiceDesc(item.getInvoiceDesc());
					saveItems.setSalesUom(item.getSalesUom());
					saveItems.setPackDesc(item.getPackDesc());
					saveItems.setLineItemComment(item.getLineItemComment());
					saveItems.setItemLevelRequiredByDate(item.getItemLevelRequiredByDate());
					saveItems.setCatalogId(item.getCatalogId());
					saveItems.setQty(item.getQty());
					saveItems.setCustomerPartNumber("");
					saveItems.setCustomerPrice(item.getPrice());
					saveItems.setManufacturerName(item.getManufacturerName());
					if (item.getUom() != null) {
						saveItems.setUom(item.getUom());
					}
					if (item.getItemId() != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						saveItems.setPartNumber(item.getPartNumber());
						saveItems.setShortDesc(item.getShortDesc());
						saveItems.setExtendedPrice(item.getExtendedPrice());
						saveItems.setUnitPrice(item.getExtendedPrice() / item.getQty());
						saveItems.setAltPartNumber1(item.getAltPartNumber1());
						saveItems.setPrice(item.getExtendedPrice());
						saveItems.setCustomerPrice(item.getPrice());
						partIdentifiers.setErpPartNumber(item.getPartNumber());
						partIdentifiersList.add(partIdentifiers);
						UOMQTY.put(item.getPartNumber(), packageQty);
						lineItemCommentList.put(item.getPartNumber(), lineComment);
					}

					int orderItemId = 0;
					orderItemId = saveOrderItems(conn, orderId, saveItems, discountCouponCode, discountAmount,
							discountInPercent, discountCouponType);

					// for(ProductsModel item : cartDetails) {
					itmVal.setItemId(item.getItemId());
					itmVal.setOverRidePriceRule(item.getOverRidePriceRule());
					itmVal.setLineItemComment(item.getLineItemComment());
					itmVal.setPrice(item.getPrice());
					itmVal.setCustomerPrice(item.getPrice());
					itmVal.setListPrice(item.getPrice());
					if (item.getItemId() != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						itmVal.setPartNumber(item.getPartNumber());
						itmVal.setAltPartNumber1(item.getAltPartNumber1());
						itmVal.setUnitPrice(item.getExtendedPrice() / item.getQty());

					} else {
						itmVal.setPartNumber(item.getPartNumber());
						itmVal.setUnitPrice(item.getPrice());
					}

					if (CommonUtility.customServiceUtility() != null) {
						CommonUtility.customServiceUtility().mergeRequiredFields(itmVal, rs);
					}
					itmVal.setQty(item.getQty());
					itmVal.setOrderItemId(orderItemId);

					if (discountAmount > 0) {
						itmVal.setDiscountType("$");
						itmVal.setDiscountValue("" + discountAmount);
					}

					if (item.getItemId() != CommonUtility.validateNumber(
							CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))) {
						idList = idList + c + item.getItemId();
						c = " OR ";
						partIdentifier.add(item.getPartNumber());
					} else {
						partIdentifier.add(item.getPartNumber());
					}

					partIdentifierQuantity.add(item.getQty());

					itmVal.setUom(item.getUom());

					itemDetailObject.add(itmVal);
					// }
				}
				if (itemDetailObject != null && itemDetailObject.size() > 0 && eclipseSessionId != null
						&& !eclipseSessionId.trim().equalsIgnoreCase("")) {
					// Call erp for price
					ProductManagement priceInquiry = new ProductManagementImpl();
					ProductManagementModel priceInquiryInput = new ProductManagementModel();
					priceInquiryInput.setEntityId(CommonUtility.validateString(entityId));
					priceInquiryInput.setHomeTerritory(homeTerritory);
					priceInquiryInput.setPartIdentifier(itemDetailObject);
					priceInquiryInput.setPartIdentifierQuantity(partIdentifierQuantity);
					priceInquiryInput.setRequiredAvailabilty("Y");
					priceInquiryInput.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
					priceInquiryInput.setUserToken((String) session.getAttribute("userToken"));
					priceInquiryInput.setSession(session);
					itemDetailObject = priceInquiry.priceInquiry(priceInquiryInput, itemDetailObject);
					if (CommonUtility
							.validateString(
									CommonDBQuery.getSystemParamtersList().get("SAVE_LEADTIME_ON_ORDER_CONFIRMATION"))
							.equalsIgnoreCase("Y")) {
						ProductManagementModel leadInquiry = new ProductManagementModel();
						leadInquiry.setHomeTerritory(
								CommonUtility.validateString((String) session.getAttribute("wareHouseCode")));
						leadInquiry.setPartIdentifier(itemDetailObject);
						String leadTimeData = priceInquiry.ajaxBasePriceAndLeadTime(leadInquiry);
						gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
						ProductsModelArray gsonParsed = gson.fromJson("{\"products\":" + leadTimeData + "}",
								ProductsModelArray.class);
						for (ProductsModel eachItem : itemDetailObject) {
							for (ProductsModel eachLeadItem : gsonParsed.getProducts()) {
								if (eachItem.getPartNumber().equalsIgnoreCase(eachLeadItem.getPartNumber())) {
									if (eachItem.getHomeBranchavailablity() == 0) {
										if (eachLeadItem.getLeadTime() == 0) {
											eachItem.setLeadTime(5);
										} else {
											eachItem.setLeadTime(eachLeadItem.getLeadTime());
										}
									} else {
										eachItem.setLeadTime(-1);
									}
								}

							}
						}
					}
					if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("UMQTY_FROM_ERP"))
							.equalsIgnoreCase("Y")) {
						for (ProductsModel item : itemDetailObject) {
							// UOMQTY.put(item.getPartNumber(),CommonUtility.validateNumber(item.getQtyUOM()));
							UOMQTY.put(item.getPartNumber(), (item.getUomQty() > 0 ? item.getUomQty() : 1));
						}
					}
					/*
					 * // orderSubTotal = 0.0; for(ProductsModel eachItem:itemDetailObject){
					 * eachItem.setNetPrice(eachItem.getPrice()); orderSubTotal =
					 * orderSubTotal+eachItem.getNetPrice(); }
					 */

					updateOrderItemPrice(conn, orderId, itemDetailObject);

				}
				// orderGrandTotal = orderSubTotal +
				// CommonUtility.validateDoubleNumber(orderTax) +
				// CommonUtility.validateDoubleNumber(orderFreight);
				System.out.println("orderGrandTotal----:" + orderGrandTotal);
				allItemsData = new LinkedHashMap<Integer, ProductsModel>();
				for (ProductsModel item : itemDetailObject) {
					allItemsData.put(item.getItemId(), item);
				}
				defaultOrderDetail.setSubtotal(orderSubTotal);
				defaultOrderDetail.setTotal(orderGrandTotal);
				defaultOrderDetail.setOrderedBy(orderedBy);
				defaultOrderDetail.setStatusDescription("Order Successfully Submitted");
				defaultOrderDetail.setOrderNotes(orderNotes);
				defaultOrderDetail.setShippingInstruction(shippingInstruction);
				defaultOrderDetail.setReqDate(reqDate);
				defaultOrderDetail.setShipViaID(shipAddress.getShipVia());
				defaultOrderDetail.setShipViaDescription(shipAddress.getShipVia());
				if (CommonUtility.validateDoubleNumber(upsFrieghtCharges) > 0) {
					defaultOrderDetail.setFreight(CommonUtility.validateDoubleNumber(upsFrieghtCharges));
				} else {
					defaultOrderDetail.setFreight(CommonUtility.validateDoubleNumber(orderFreight));
				}
				defaultOrderDetail.setTax(orderTax);
				AddressModel selectedShipAddress = new AddressModel();
				selectedShipAddress.setAddress1(shipAddress.getAddress1());
				selectedShipAddress.setAddress2(shipAddress.getAddress2());
				selectedShipAddress.setCity(shipAddress.getCity());
				selectedShipAddress.setState(shipAddress.getState());
				selectedShipAddress.setZipCode(shipAddress.getZipCodeStringFormat());
				selectedShipAddress.setCountry(shipAddress.getCountry());
				selectedShipAddress.setPhoneNo(shipAddress.getPhoneNo());
				selectedShipAddress.setEmailAddress(shipAddress.getEmailAddress());
				selectedShipAddress.setEntityId(shipAddress.getEntityId());
				selectedShipAddress.setShipToId(shipAddress.getShipToId());
				selectedShipAddress.setEntityId(shipAddress.getEntityId());
				selectedShipAddress.setAddressType(shipAddress.getAddressType());

				SalesModel erpOrderDetail = new SalesModel();

				SalesOrderManagementModel salesOrderInput = new SalesOrderManagementModel();
				salesOrderInput.setOrderItems(cartDetails);
				salesOrderInput.setAllItemData(allItemsData);
				SalesModel quoteResponse = null;
				if (session.getAttribute("quoteResponse") != null) {
					quoteResponse = new SalesModel();
					quoteResponse = (SalesModel) session.getAttribute("quoteResponse");
					salesOrderInput.setQuoteResponse(quoteResponse);
				}
				salesOrderInput.setShipVia(shipAddress.getShipVia());
				salesOrderInput.setShipViaDescription(shipAddress.getShipVia());
				salesOrderInput.setOrderedBy(orderedBy);
				salesOrderInput.setOrderStatus(orderStatus);
				salesOrderInput.setOrderStatusCode(orderStatusCode);
				salesOrderInput.setReqDate(reqDate);
				salesOrderInput.setSession(session);
				salesOrderInput.setOrderId(orderId);
				salesOrderInput.setBillEntityId(userAddress.get("Bill").getEntityId());
				salesOrderInput.setShipEntityId(userAddress.get("Ship").getEntityId());
				salesOrderInput.setUserToken(userToken);
				salesOrderInput.setShipAddress(selectedShipAddress);
				salesOrderInput.setTaxExempt(taxExempt);
				salesOrderInput.setAnonymous(anonymous);
				salesOrderInput.setUserSelectedLocation(userSelectedLocation);
				salesOrderInput.setErpUserContactId(erpUserContactID);
				salesOrderInput.setBillEntityId(userAddress.get("Bill").getEntityId());
				salesOrderInput.setShipEntityId(userAddress.get("Ship").getEntityId());
				salesOrderInput.setUserToken(userToken);
				salesOrderInput.setShipAddress(selectedShipAddress);
				salesOrderInput.setTaxExempt(taxExempt);
				if (CommonUtility.validateDoubleNumber(upsFrieghtCharges) > 0) {
					salesOrderInput.setFrieghtCharges(upsFrieghtCharges);
				} else {
					orderFreight = (String) request.getParameter("orderFreight");
					salesOrderInput.setFrieghtCharges(orderFreight);
				}
				salesOrderInput.setUserName(userName);
				salesOrderInput.setCreditCardValue(creditCardValue);
				salesOrderInput.setPurchaseOrderNumber(poNumber);
				salesOrderInput.setCustomerReleaseNumber(customerReleaseNumber);
				salesOrderInput.setSelectedBranch(selectedBranch);
				salesOrderInput.setLineItemCommentList(lineItemCommentList);
				salesOrderInput.setCountry(country);
				salesOrderInput.setCCType(ccType);
				salesOrderInput.setCCAuth(ccAuthCode);
				salesOrderInput.setOrderTax(orderTax);
				salesOrderInput.setBillAddress(Cimm2BCentralClient.getInstance().userModelToAddressModel(billAddress));
				salesOrderInput.setShipViaMethod(shipAddress.getShipVia());
				salesOrderInput.setCCToken(ccToken);
				salesOrderInput.setuOMQTY(UOMQTY);
				salesOrderInput.setPaymentTerms(paymentTermsCode);
				salesOrderInput.setShippingAndHandlingFee(CommonUtility.validateString(totalCartFrieghtCharges));// PSS
																													// DFM
																													// shipping
																													// and
																													// handlingfg
				salesOrderInput.setFrieghtCharges(upsFrieghtCharges);
				salesOrderInput.setOrderERPId(orderErpId);
				salesOrderInput.setExternalCartId(CommonUtility.validateString(request.getParameter("externalCartId")));
				salesOrderInput
						.setJurisdictionCode(CommonUtility.validateString(request.getParameter("jurisdictionCode")));
				SalesOrderManagement salesOrderSubmit = new SalesOrderManagementImpl();

				erpOrderDetail = salesOrderSubmit.submitOrderToERP(salesOrderInput);

				if (erpOrderDetail != null && !CommonUtility.validateString(erpOrderDetail.getStatusDescription())
						.toUpperCase().contains("ERROR")) {
					defaultOrderDetail.setOrderID(erpOrderDetail.getErpOrderNumber());
					if (CommonUtility.validateString(erpOrderDetail.getStatusDescription()).toUpperCase()
							.contains("ERROR") && !erpOrderDetail.isSendMailFlag()) {
						sendMailFlag = false;
					}

					for (ProductsModel item : cartDetails) {
						for (SalesModel erpOrderItem : erpOrderDetail.getOrderList()) {
							if (item.getPartNumber() != null && erpOrderItem.getPartNumber() != null && item
									.getPartNumber().trim().equalsIgnoreCase(erpOrderItem.getPartNumber().trim())) {
								item.setUnitPrice(erpOrderItem.getUnitPrice());
								item.setListPrice(erpOrderItem.getListPrice());
								item.setUom(erpOrderItem.getUom());
								item.setQty(erpOrderItem.getQtyShipped());
								item.setQtyUOM(erpOrderItem.getQtyUom());
								item.setErpQty(erpOrderItem.getPerQty());

							}
						}
					}
					if (erpOrderDetail.getShipViaID() != null && erpOrderDetail.getShipViaID().trim().length() > 0) {
					} else {
						erpOrderDetail.setShipViaID(shipVia);
					}
					if (CommonUtility.validateString(erpOrderDetail.getShipViaMethod()).length() > 0) {
					} else {
						if (session.getAttribute("customerShipViaDesc") != null) {
							erpOrderDetail.setShipViaMethod(CommonUtility
									.validateString(session.getAttribute("customerShipViaDesc").toString()));
						} else {
							erpOrderDetail.setShipViaMethod(shipAddress.getShipVia());
						}
					}

					if (erpOrderDetail.getOrderedBy() != null && erpOrderDetail.getOrderedBy().trim().length() > 0) {
					} else {
						erpOrderDetail.setOrderedBy(orderedBy);
					}
					if (erpOrderDetail.getErpOrderNumber() != null) {
						deleteFromCart(conn, userId);
					}
					if (erpOrderDetail.getFreight() == 0) {
						erpOrderDetail.setFreight(CommonUtility.validateDoubleNumber(orderFreight));
					}
					if (erpOrderDetail.getTax() == 0) {
						erpOrderDetail.setTax(orderTax);
					} else {
						if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("TAX_FROM_CIMM"))
								.equalsIgnoreCase("Y")) {
							salesOrderInput.setOrderTax(orderTax);
						}
					}
					if (erpOrderDetail.getReqDate() != null && erpOrderDetail.getReqDate().trim().length() > 0) {
					} else {
						erpOrderDetail.setReqDate(reqDate);
					}
					if (CommonUtility.validateDoubleNumber(CommonUtility.validateString(totalCartFrieghtCharges)) > 0
							&& erpOrderDetail.getHandling() <= 0.0) {
						erpOrderDetail.setHandling(CommonUtility
								.validateDoubleNumber(CommonUtility.validateString(totalCartFrieghtCharges)));
					} else {
						if (erpOrderDetail.getHandling() > 0.0) {
							erpOrderDetail.setHandling(erpOrderDetail.getHandling());
						}
					}

					if (erpOrderDetail.getSubtotal() <= 0.0) {
						String roundSubTotalStr = CommonUtility.validateParseDoubleToString(orderSubTotal);
						erpOrderDetail.setSubtotal(CommonUtility.validateDoubleNumber(roundSubTotalStr));
					}
					if (erpOrderDetail.getTotal() <= 0.0) {
						String roundTotalStr = CommonUtility.validateParseDoubleToString(orderGrandTotal);
						erpOrderDetail.setTotal(CommonUtility.roundHalfUp(roundTotalStr));
						System.out.println("OrderTotal---:update to db" + orderGrandTotal);
					}

					if (erpOrderDetail.getFreight() <= 0.0) {
						erpOrderDetail
								.setFreight(CommonUtility.validateDoubleNumber(salesOrderInput.getFrieghtCharges()));
					}
					erpOrderDetail.setOrderID(
							erpOrderDetail.getExternalSystemId() != null ? erpOrderDetail.getExternalSystemId()
									: erpOrderDetail.getErpOrderNumber());
					erpOrderDetail.setShipViaDescription(defaultOrderDetail.getShipViaDescription());
					// CustomServiceProvide
					if (CommonUtility.customServiceUtility() != null) {
						Map<String, Double> discountMap = CommonUtility.customServiceUtility()
								.updatediscount(erpOrderDetail.getDiscount(), erpOrderDetail.getrOEDiscount());
						if (discountMap.get("erpdiscountval") != null) {
							double discountamount = discountMap.get("erpdiscountval");
							if (discountamount != 0.0) {
								erpOrderDetail.setCashDiscountAmount(discountamount);
							}
						}
						if (discountMap.get("erproediscountval") != null) {
							double roeDiscount = discountMap.get("erproediscountval");
							if (roeDiscount != 0.0) {
								erpOrderDetail.setCashDiscountAmount(roeDiscount);
								erpOrderDetail.setrOEDiscount(roeDiscount);
							}
						}
					}
					updateSalesOrder(conn, orderId, erpOrderDetail);

				} else if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("ERP"))
						.equalsIgnoreCase("cimm2bcentral")
						&& CommonUtility
								.validateNumber(erpOrderDetail.getStatus()) == HttpStatus.SC_FAILED_DEPENDENCY) {
					defaultOrderDetail.setOrderStatus("Error while submitting the order");
					defaultOrderDetail.setStatusDescription(erpOrderDetail.getStatusDescription());
					defaultOrderDetail
							.setFreight(CommonUtility.validateDoubleNumber(salesOrderInput.getFrieghtCharges()));
					updateSalesOrder(conn, orderId, defaultOrderDetail);
					sendMailFlag = false;
				} else {
					if (erpOrderDetail != null && erpOrderDetail.getErpOrderNumber() != null) {
						defaultOrderDetail.setOrderID(erpOrderDetail.getErpOrderNumber());
					}
					defaultOrderDetail
							.setFreight(CommonUtility.validateDoubleNumber(salesOrderInput.getFrieghtCharges()));
					updateSalesOrder(conn, orderId, defaultOrderDetail);
				}

				deleteFromCart(conn, userId);
				SalesModel otherDetail = new SalesModel();
				otherDetail.setSession(session);
				otherDetail.setSendmailToSalesRepOnly(sendmailToSalesRepOnly);
				int count = -1;
				if (sendMailFlag) {
					count = SalesDAO.sendConfirmationMail(orderId, userId, 0, null, otherDetail);
				}

				if (count == 1) {
					sql = "update orders set email_sent = 'Y' where order_id = ?";
					ConnectionManager.closeDBPreparedStatement(pstmt);
					pstmt = conn.prepareStatement(sql);
					pstmt.setInt(1, orderId);
					rs = pstmt.executeQuery();
				}

				if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("DISABLE_CREDITCARD_SAVE"))
						.equalsIgnoreCase("Y")) {
					SalesDAO.deleteAllCreditCardInfo(userId);
				}
				ConnectionManager.closeDBStatement(stmt);
				stmt = conn.prepareCall("{call ORDER_KEYWORD_PROC(?)}");
				stmt.setInt(1, orderId);

				// orderconfirmation//
				boolean flag = false;
				String shipViaDisplay = "";
				String orderError = "";
				double salesOrderTotal = 0d;
				double salesOrderTotalV2 = 0d;
				LinkedHashMap<Integer, ProductsModel> fullItemDetails = null;
				ArrayList<Integer> itemList = new ArrayList<Integer>();
				String errorMessageToDisplay = CommonUtility.validateString(LayoutLoader.getMessageProperties()
						.get(session.getAttribute("localeCode").toString().toUpperCase())
						.getProperty("errormsgtodisplay.labels"));
				if (billAddress.getCustomerName() != null) {
					billEntityName = billAddress.getCustomerName();
				} else {
					billEntityName = billAddress.getFirstName() + " " + billAddress.getLastName();
				}

				if (shipAddress.getCustomerName() != null) {
					shipEntityName = shipAddress.getCustomerName();
				} else {
					shipEntityName = shipAddress.getFirstName() + " " + shipAddress.getLastName();
				}
				ArrayList<SalesModel> salesOrderItem = new ArrayList<SalesModel>();

				String cartSortByValue = "";
				String cartSortColumn = "";
				if (session.getAttribute("cartSortByValue") != null) {
					cartSortByValue = CommonUtility.validateString(session.getAttribute("cartSortByValue").toString());
					String[] sortCoumnArray = cartSortByValue.split(" ");
					if (sortCoumnArray != null && sortCoumnArray.length > 0) {
						cartSortColumn = CommonUtility.validateString(sortCoumnArray[0]);
					}
				}
				sql = PropertyAction.SqlContainer.get("getOrderDetail");
				SimpleDateFormat fromDB = new SimpleDateFormat("yyyy-MM-dd");
				SimpleDateFormat myFormat = new SimpleDateFormat("MM/dd/yyyy");
				pstmt = conn.prepareStatement(sql);
				pstmt.setInt(1, salesOrderId);
				pstmt.setInt(2, userId);
				rs = pstmt.executeQuery();
				// ORDER_ID,ORDER_NUMBER, EXTERNAL_SYSTEM_ID, BILL_ADDRESS1, BILL_ADDRESS2,
				// BILL_CITY, BILL_COUNTRY_CODE, BILL_PHONE, BILL_STATE, BILL_ZIP_CODE,
				// SHIP_ADDRESS1, SHIP_ADDRESS1, SHIP_ADDRESS2, SHIP_CITY, SHIP_COUNTRY_CODE,
				// SHIP_PHONE, SHIP_STATE, SHIP_ZIP_CODE
				while (rs.next()) {
					SalesModel salesOrderDetail = new SalesModel();
					salesOrderDetail.setOrderNum(rs.getString("ORDER_NUMBER"));
					salesOrderDetail.setErpOrderNumber(rs.getString("EXTERNAL_SYSTEM_ID"));
					salesOrderDetail.setBillAddress1(rs.getString("BILL_ADDRESS1"));
					salesOrderDetail.setBillAddress2(rs.getString("BILL_ADDRESS2"));
					salesOrderDetail.setBillCity(rs.getString("BILL_CITY"));
					salesOrderDetail.setBillCountry(rs.getString("BILL_COUNTRY_CODE"));
					salesOrderDetail.setBillPhone(rs.getString("BILL_PHONE"));
					salesOrderDetail.setBillState(rs.getString("BILL_STATE"));
					salesOrderDetail.setBillZipCode(rs.getString("BILL_ZIP_CODE"));
					salesOrderDetail.setShipFirstName(rs.getString("SHIP_FIRST_NAME"));
					salesOrderDetail.setShipLastName(rs.getString("SHIP_LAST_NAME"));
					salesOrderDetail.setShipAddress1(rs.getString("SHIP_ADDRESS1"));
					salesOrderDetail.setShipAddress2(rs.getString("SHIP_ADDRESS2"));
					salesOrderDetail.setShipCity(rs.getString("SHIP_CITY"));
					salesOrderDetail.setShipCountry(rs.getString("SHIP_COUNTRY_CODE"));
					salesOrderDetail.setShipPhone(rs.getString("SHIP_PHONE"));
					salesOrderDetail.setShipState(rs.getString("SHIP_STATE"));
					salesOrderDetail.setShipZipCode(rs.getString("SHIP_ZIP_CODE"));
					salesOrderDetail.setTax(rs.getDouble("TAX_AMOUNT"));
					salesOrderDetail.setTotinvamt(rs.getDouble("TOTAL_AMOUNT"));
					salesOrderDetail.setSubtotal(rs.getDouble("SUBTOTAL_AMOUNT"));
					salesOrderDetail.setFreight(rs.getDouble("FREIGHT"));
					salesOrderDetail.setHandling(rs.getDouble("HANDLING_FEE"));
					salesOrderDetail.setDeliveryCharge(rs.getDouble("DELIVERY_FEE"));
					salesOrderDetail.setDiscount(rs.getDouble("CASHDISCOUNT_AMOUNT"));
					salesOrderDetail.setTotal(rs.getDouble("TOTAL_AMOUNT"));
					AddressModel addressModel = new AddressModel();
					addressModel.setAddress1(rs.getString("BILL_ADDRESS1"));
					addressModel.setAddress2(rs.getString("BILL_ADDRESS2"));
					addressModel.setCity(rs.getString("BILL_CITY"));
					addressModel.setCountry(rs.getString("BILL_COUNTRY_CODE"));
					addressModel.setPhoneNo(rs.getString("BILL_PHONE"));
					addressModel.setState(rs.getString("BILL_STATE"));
					addressModel.setZipCode(rs.getString("BILL_ZIP_CODE"));
					addressModel.setFirstName(rs.getString("BILL_FIRST_NAME"));
					addressModel.setLastName(rs.getString("BILL_LAST_NAME"));
					addressModel.setEmailAddress(rs.getString("BILL_EMAIL_ADDRESS"));
					addressModel.setCompanyName(rs.getString("CUSTOMER_NAME"));
					addressModel.setShipToId(rs.getString("BILL_SHIP_TO_ID"));
					salesOrderDetail.setBillAddress(addressModel);

					addressModel = new AddressModel();
					addressModel.setAddress1(rs.getString("SHIP_ADDRESS1"));
					addressModel.setAddress2(rs.getString("SHIP_ADDRESS2"));
					addressModel.setCity(rs.getString("SHIP_CITY"));
					addressModel.setCountry(rs.getString("SHIP_COUNTRY_CODE"));
					addressModel.setPhoneNo(rs.getString("SHIP_PHONE"));
					addressModel.setState(rs.getString("SHIP_STATE"));
					addressModel.setZipCode(rs.getString("SHIP_ZIP_CODE"));
					addressModel.setFirstName(rs.getString("SHIP_FIRST_NAME"));
					addressModel.setLastName(rs.getString("SHIP_LAST_NAME"));
					addressModel.setEmailAddress(rs.getString("SHIP_EMAIL_ADDRESS"));
					addressModel.setShipToId(rs.getString("SHIPPING_SHIP_TO_ID"));
					if (rs.findColumn("SHIP_COMPANY_NAME") > 0) {
						addressModel.setCompanyName(rs.getString("SHIP_COMPANY_NAME"));
					}
					salesOrderDetail.setShipAddress(addressModel);
					salesOrderDetail.setGasPoNumber(rs.getString("GAS_PO_NUMBER"));
					salesOrderDetail.setOrderStatusDesc(rs.getString("EXTERNAL_SYSTEM_ERROR"));
					if (CommonUtility.validateString(rs.getString("EXTERNAL_SYSTEM_ERROR")).length() > 0
							&& CommonUtility.validateString(rs.getString("EXTERNAL_SYSTEM_ERROR"))
									.equalsIgnoreCase(errorMessageToDisplay)) {
						orderError = errorMessageToDisplay;
					}
					salesOrderDetail.setPoNumber(rs.getString("PURCHASE_ORDER_NUMBER"));
					String orderDate = "";
					if (CommonUtility.validateString(rs.getString("ORDER_DATE")).length() > 0) {
						orderDate = myFormat
								.format(fromDB.parse(CommonUtility.validateString(rs.getString("ORDER_DATE"))));
					}
					salesOrderDetail.setOrderDate(orderDate);
					salesOrderDetail.setOrderedBy(rs.getString("ORDERED_BY"));
					salesOrderDetail.setCustomerName(rs.getString("CUSTOMER_NAME"));
					salesOrderDetail.setCustomerReleaseNumber(rs.getString("CUSTOMER_RELEASE_NUMBER"));
					salesOrderDetail.setHomeBranchName(rs.getString("PRICING_BRANCH_NAME"));
					String shipDate = "";
					if (CommonUtility.validateString(rs.getString("SHIP_DATE")).length() > 0) {
						shipDate = myFormat
								.format(fromDB.parse(CommonUtility.validateString(rs.getString("SHIP_DATE"))));
					}
					salesOrderDetail.setShipDate(shipDate);
					salesOrderDetail.setShipViaMethod(rs.getString("SHIP_METHOD"));
					salesOrderDetail.setShipViaID(rs.getString("SHIP_METHOD_ID"));
					LinkedHashMap<String, String> shipViaMap = new LinkedHashMap<String, String>();
					if (session != null && session.getAttribute("shipViaMap") != null) {
						shipViaMap = (LinkedHashMap<String, String>) session.getAttribute("shipViaMap");
						if (CommonUtility
								.validateString(shipViaMap
										.get(CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase()))
								.length() > 0) {
							salesOrderDetail
									.setShipViaMethod(shipViaMap.get(rs.getString("SHIP_METHOD").trim().toUpperCase()));
							shipViaDisplay = salesOrderDetail.getShipViaMethod();
						}

						String shipMethod = shipViaMap
								.get(CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase());
						if (CommonUtility.validateString(shipMethod).length() > 0) {
							salesOrderDetail.setShipViaMethod(shipViaMap
									.get(CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase()));
							shipViaDisplay = salesOrderDetail.getShipViaMethod();
						} else {
							if (CommonUtility
									.validateString(shipViaMap.get(
											CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase()))
									.length() > 0) {
								salesOrderDetail.setShipViaMethod(shipViaMap.get(
										CommonUtility.validateString(rs.getString("SHIP_METHOD_ID")).toUpperCase()));
								shipViaDisplay = salesOrderDetail.getShipViaMethod();
							} else {
								shipViaDisplay = salesOrderDetail.getShipViaMethod();
							}
						}
					} else {
						if (session != null && session.getAttribute("customerShipViaList") != null) {
							ArrayList<ShipVia> customerShipViaListArray = (ArrayList<ShipVia>) session
									.getAttribute("customerShipViaList");
							if (customerShipViaListArray != null && customerShipViaListArray.size() > 0) {
								for (ShipVia shipVia : customerShipViaListArray) {
									shipViaMap.put(shipVia.getShipViaID().trim().toUpperCase(),
											shipVia.getDescription());
								}
							}
							String shipMethod = shipViaMap
									.get(CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase());
							if (CommonUtility.validateString(shipMethod).length() > 0) {
								salesOrderDetail.setShipViaMethod(shipViaMap
										.get(CommonUtility.validateString(rs.getString("SHIP_METHOD")).toUpperCase()));
								shipViaDisplay = salesOrderDetail.getShipViaMethod();
							} else {
								salesOrderDetail.setShipViaMethod(shipViaMap.get(
										CommonUtility.validateString(rs.getString("SHIP_METHOD_ID")).toUpperCase()));
								shipViaDisplay = salesOrderDetail.getShipViaMethod();
							}
						}

					}

					if (CommonDBQuery.getSystemParamtersList().get("CUSTOMER_SHIP_VIA_FROM_ERP") != null
							&& CommonDBQuery.getSystemParamtersList().get("CUSTOMER_SHIP_VIA_FROM_ERP").trim()
									.equalsIgnoreCase("Y")) {
						salesOrderDetail.setShipViaMethod((String) session.getAttribute("selectedShipVia"));

					} /*
						 * else{ salesOrderDetail.setShipViaMethod(rs.getString("SHIP_METHOD")); }
						 */

					String reqDate = "";
					if (rs.getString("REQUIRED_BY_DATE") != null
							&& rs.getString("REQUIRED_BY_DATE").trim().length() > 0) {
						reqDate = myFormat.format(fromDB.parse(rs.getString("REQUIRED_BY_DATE")));
					}

					salesOrderDetail.setReqDate(reqDate);
					salesOrderDetail.setShippingInstruction(rs.getString("SHIPPING_INSTRUCTIONS"));
					salesOrderDetail.setOrderNotes(rs.getString("ORDER_NOTES"));
					salesOrderDetail.setPaymentMethod(rs.getString("PAYMENT_METHOD"));
					salesOrderDetail.setTransactionId(rs.getString("TRANSACTION_ID"));
					salesOrderDetail.setBillEmailAddress(rs.getString("BILL_EMAIL_ADDRESS"));
					salesOrderDetail.setShipEmailAddress(rs.getString("SHIP_EMAIL_ADDRESS"));
					salesOrderDetail.setFreightIn(rs.getDouble("FRIEGHT_IN"));
					salesOrderDetail.setShipToName(rs.getString("SHIPPING_SHIP_TO_NAME"));

					salesOrderDetail.setOrderSuffix(rs.getInt("ORDER_SUFFIX"));

					orderDetail = salesOrderDetail;
					flag = true;
				}
				// ITEM_ID,PART_NUMBER,SHORT_DESC,QTY,PRICE,UOM, EXTPRICE
				if (flag) {
					rs.close();
					pstmt.close();
					String idListForSolr = "";
					sql = PropertyAction.SqlContainer.get("getOrderItemDetail");
					if (CommonUtility.validateString(cartSortColumn).length() > 0
							&& sql.toUpperCase().contains(cartSortColumn.toUpperCase())) {
						sql = "SELECT * FROM (" + sql + ") ORDER BY " + cartSortByValue;
					}
					if (CommonUtility
							.validateString(CommonDBQuery.getSystemParamtersList().get("getOrderItemDetailCustom"))
							.length() > 0) {
						pstmt = conn.prepareStatement(PropertyAction.SqlContainer.get(CommonUtility.validateString(
								CommonDBQuery.getSystemParamtersList().get("getOrderItemDetailCustom"))));
						pstmt.setInt(1, CommonDBQuery.getGlobalSiteId());
						pstmt.setInt(2, salesOrderId);
					} else {
						pstmt = conn.prepareStatement(sql);
						pstmt.setInt(1, salesOrderId);
					}

					rs = pstmt.executeQuery();

					while (rs.next()) {
						SalesModel salesOrderDetail = new SalesModel();
						salesOrderDetail.setItemId(rs.getInt("ITEM_ID"));
						itemList.add(rs.getInt("ITEM_ID"));
						salesOrderDetail.setPartNumber(rs.getString("PART_NUMBER"));
						salesOrderDetail.setShortDesc(rs.getString("SHORT_DESC"));
						salesOrderDetail.setOrderQty(rs.getInt("QTY"));
						salesOrderDetail.setUnitPrice(rs.getDouble("PRICE"));
						salesOrderDetail.setListPrice(rs.getDouble("LIST_PRICE"));
						salesOrderDetail.setOrderUom(rs.getString("UOM"));
						salesOrderDetail.setUom(rs.getString("PER_UOM"));
						salesOrderDetail.setSalesUom(rs.getString("SALES_UOM"));
						salesOrderDetail.setPerQty(rs.getInt("PER_QTY"));
						salesOrderDetail.setTotal(rs.getDouble("EXTPRICE"));
						salesOrderDetail.setExtPrice(rs.getDouble("PRICE"));
						salesOrderDetail.setStatusDescription(rs.getString("CALL_FOR_PRICE"));
						salesOrderDetail.setLineItemComment(rs.getString("LINE_ITEM_COMMENT"));
						salesOrderDetail.setManufacturerPartNumber(rs.getString("MANUFACTURER_PART_NUMBER"));
						salesOrderDetail.setImageType(rs.getString("IMAGE_TYPE"));
						salesOrderDetail.setImageName((rs.getString("IMAGE_NAME") == null) ? "NoImage.png"
								: rs.getString("IMAGE_NAME").toString().trim());
						// salesOrderTotal = salesOrderTotal + rs.getDouble("EXTPRICE");
						salesOrderTotalV2 = salesOrderTotalV2 + rs.getDouble("EXT_PRICE");
						salesOrderDetail.setMultipleShipVia(rs.getString("ITEM_LEVEL_SHIPVIA"));
						salesOrderDetail.setMultipleShipViaDesc(rs.getString("ITEM_LEVEL_SHIPVIA_DESC"));
						salesOrderDetail.setItemLevelRequiredByDate(rs.getString("ITEMLEVEL_REQUIREDBYDATE"));
						salesOrderDetail.setCatalogId(rs.getString("CATALOG_ID"));

						if (rs.findColumn("HAZARDIOUS_MATERIAL") > 0) {
							salesOrderDetail.setHazardiousMaterial(rs.getString("HAZARDIOUS_MATERIAL"));
						}
						if (rs.findColumn("UNITS_PER_STOCKING") > 0) {
							salesOrderDetail.setUnitsPerStocking(rs.getDouble("UNITS_PER_STOCKING"));
						}
						if (rs.findColumn("UNITS_PER_STOCKING_STRING") > 0) {
							salesOrderDetail.setUnitsPerStockingString(rs.getString("UNITS_PER_STOCKING_STRING"));
						}

						salesOrderDetail.setNetAmount(salesOrderDetail.getExtPrice() - salesOrderDetail.getDiscount());
						if (rs.getDouble("PRICE") > 0) {
							salesOrderTotal = salesOrderTotal + rs.getDouble("EXTPRICE");
						} else {
							salesOrderTotal = salesOrderTotal + rs.getDouble("LIST_PRICE") * rs.getInt("QTY");
							salesOrderDetail.setStatusDescription("Y");
						}

						if (CommonUtility
								.validateString(
										CommonDBQuery.getSystemParamtersList().get("DISABLE_NON_CATALOG_ITEM_IN_ORDER"))
								.equalsIgnoreCase("Y")) {
							if (!CommonUtility.validateString(
									CommonDBQuery.getSystemParamtersList().get("NON_CATALOG_ITEM_ID_FOR_ADDTOCART"))
									.equalsIgnoreCase(
											CommonUtility.validateParseIntegerToString(rs.getInt("ITEM_ID")))) {
								salesOrderItem.add(salesOrderDetail);
							}
						} else {
							salesOrderItem.add(salesOrderDetail);
						}

						// salesOrderItem.add(salesOrderDetail);
					}
					if (salesOrderItem != null && salesOrderItem.size() > 0) {
						ArrayList<ProductsModel> itemDetailsForGoogleAnalytics = ProductHunterSolr
								.getItemDetailsForGivenPartNumbers(subsetId, generalSubset,
										StringUtils.join(itemList, " OR "), 0, "N", "itemid");
						String c1 = "";
						for (SalesModel sModel : salesOrderItem) {
							idListForSolr = idListForSolr + c1 + sModel.getItemId();
							c1 = " OR ";
							for (ProductsModel eachItem : itemDetailsForGoogleAnalytics) {
								if (sModel.getItemId() == eachItem.getItemId()) {
									sModel.setCategoryName(eachItem.getCategoryName());
								}
							}
						}
						fullItemDetails = new LinkedHashMap<Integer, ProductsModel>();
						for (ProductsModel eachItem : itemDetailsForGoogleAnalytics) {
							fullItemDetails.put(eachItem.getItemId(), eachItem);
						}
						if (CommonUtility.validateString(idListForSolr).length() > 0) {
							LinkedHashMap<Integer, ArrayList<ProductsModel>> customerPartNumber = ProductHunterSolr
									.getcustomerPartnumber(idListForSolr, CommonUtility.validateNumber(buyingCompanyId),
											CommonUtility.validateNumber(buyingCompanyId));
							if (customerPartNumber != null && customerPartNumber.size() > 0) {
								for (SalesModel item : salesOrderItem) {
									item.setCustomerPartNumberList(customerPartNumber.get(item.getItemId()));
								}
							}
						}
					}

					orderTotal = salesOrderTotal;
					orderTotalV2 = salesOrderTotalV2;
					orderDetail.setSubtotal(orderTotal);
					orderDetail.setSubtotalV2(orderTotalV2);

					// orderDetail.setTotal(orderTotal+orderDetail.getFreight()+orderDetail.getTax()+orderDetail.getDiscount()+orderDetail.getHandling());
					orderDetail.setTotal(orderTotal + orderDetail.getFreight() + orderDetail.getTax()
							- (orderDetail.getDiscount()) + orderDetail.getHandling());
					orderDetail.setTotalV2(
							orderTotalV2 + orderDetail.getFreight() + orderDetail.getTax() + orderDetail.getDiscount());
					orderItemList = salesOrderItem;
					orderTotal = orderTotal + orderDetail.getFreight() + orderDetail.getTax()
							+ orderDetail.getHandling();
					// orderDetail.setOrderItemsDiscount(orderItemsDiscountVal);
					orderDetail.setTotalSavingsOnOrder(orderDetail.getDiscount());

				}

				LinkedHashMap<Integer, LinkedHashMap<String, Object>> customFieldVal = null;
				if (CommonDBQuery.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS") != null && CommonDBQuery
						.getSystemParamtersList().get("GET_ITEM_CUSTOM_FIELDS").trim().equalsIgnoreCase("Y")) {
					customFieldVal = ProductHunterSolr.getCustomFieldValuesByItems(subsetId, generalSubset,
							StringUtils.join(itemList, " OR "), "itemid");
				}

				contentObject.put("orderTotal", orderTotal);
				contentObject.put("orderId", orderId);
				contentObject.put("orderItemList", orderItemList);
				contentObject.put("orderDetail", orderDetail);
				// contentObject.put("handling", orderDetail.getHandling());
				contentObject.put("billEntityName", billEntityName);
				contentObject.put("shipEntityName", shipEntityName);
				// contentObject.put("discountValue", discountValue);
				contentObject.put("shipViaDisplay", shipViaDisplay);
				contentObject.put("customFieldVal", customFieldVal);
				contentObject.put("orderId", salesOrderId);
				contentObject.put("userId", userId);
				contentObject.put("fullItemDetails", fullItemDetails);
				// contentObject.put("appliedDiscountCoupons",appliedlDiscounts);
				contentObject.put("orderError", orderError);
				// CustomServiceProvider
				if (CommonUtility.customServiceUtility() != null) {
					ProductsModel warehousedetails = CommonUtility.customServiceUtility()
							.getwareHouseDetailsforordeoptions((String) session.getAttribute("targetbranch"));
					if (warehousedetails != null) {
						contentObject.put("selectedwarehousedeatils", warehousedetails);
					}
				} // CustomServiceProvider
				renderContent = LayoutGenerator.templateLoader("OrderConfirmation", contentObject, null, null, null);
				/*
				 * if(CommonUtility.validateString(auUser).equalsIgnoreCase("Y") &&
				 * !CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get(
				 * "ENABLE_BRONTO_ORDER_MODULE")).equalsIgnoreCase("Y")){
				 * session.removeAttribute("auUserDetails");
				 * session.removeAttribute("auUserLogin"); session.removeAttribute("fromPage");
				 * }
				 */
				session.removeAttribute("cartSortByValue");

			} catch (Exception e) {
				e.printStackTrace();
			}

			finally {
				ConnectionManager.closeDBResultSet(rs);
				ConnectionManager.closeDBPreparedStatement(pstmt);
				ConnectionManager.closeDBConnection(conn);
			}

			if (type == null) {
				type = "";
			}
			if (type.equalsIgnoreCase("")) {
				return SUCCESS;
			} else {
				return "orderSubApp";
			}
		} else {
			return "SESSIONEXPIRED";
		}

	}

	// function for Construction Project Management
	public String ConstructionProjectManagement() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			SalesOrderManagement salesObj = new SalesOrderManagementImpl();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			System.out.println(userId);
			UsersModel userDetails = UsersDAO.getUserEmail(userId);
			String emailId = userDetails.getEmailAddress();
			System.out.println("JobListEmail=" + emailId);
			System.out.println(userId);
			ArrayList<Cimm2BCentralProjectManagementJobIdInfo> listOfJobids = new ArrayList<Cimm2BCentralProjectManagementJobIdInfo>();
			List<Cimm2BCentralProjectManagementJobIdInfo> result = null;
			String GET_CONSTRUCTION_JOBIDS_DETAILS = CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("GET_CONSTRUCTION_JOBIDS_DETAILS")) + "?"
					+ Cimm2BCentralRequestParams.emailId + "=" + emailId;
			Cimm2BCentralResponseEntity managementResponseJobIds = Cimm2BCentralClient.getInstance().getDataObject(
					GET_CONSTRUCTION_JOBIDS_DETAILS, "GET", null, Cimm2BCentralProjectManagementJobIdInfo.class);
			if (userId > 1) {
				if (managementResponseJobIds != null && managementResponseJobIds.getData() != null) {
					result = (ArrayList<Cimm2BCentralProjectManagementJobIdInfo>) managementResponseJobIds.getData();
					if (result != null) {
						for (Cimm2BCentralProjectManagementJobIdInfo jobIdInfo : result) {
							Cimm2BCentralProjectManagementJobIdInfo managementjobIdinfo = new Cimm2BCentralProjectManagementJobIdInfo();
							managementjobIdinfo.setJobId(jobIdInfo.getJobId());
							managementjobIdinfo.setJobName(jobIdInfo.getJobName());
							managementjobIdinfo.setJobStatus(jobIdInfo.getJobStatus());
							listOfJobids.add(managementjobIdinfo);
						}
					}
				}
				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				contentObject.put("listOfJobIds", listOfJobids);
				renderContent = LayoutGenerator.templateLoader("ConstructionProjectManagementPage", contentObject, null,
						null, null);
				target = SUCCESS;
			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	// Construction project management details
	public String constructionProjectManagementDetails() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			SalesOrderManagement salesObj = new SalesOrderManagementImpl();

			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			String userName = (String) session.getAttribute(Global.USERNAME_KEY);

			int userId = CommonUtility.validateNumber(sessionUserId);
			String jobNumber = CommonUtility.validateString(request.getParameter("jobNumber"));
			String jobId = CommonUtility.validateString(request.getParameter("jobId"));
			System.out.println(userId);
			if (userId > 1) {
				managementList = new Cimm2BCentralProjectManagementInformation();
				ProjectManagementModel ProjectManagementParameter = new ProjectManagementModel();
				ProjectManagementParameter.setJobId(jobId);
				managementList = salesObj.ConstructionProjectManagement(ProjectManagementParameter);
				ArrayList<Cimm2BCentralManagementBody> reportBodyDetails = (ArrayList<Cimm2BCentralManagementBody>) managementList
						.getReportBody();
				ArrayList<Cimm2BCentralManagementHeader> reportHeaderDetails = (ArrayList<Cimm2BCentralManagementHeader>) managementList
						.getReportHeader();
				LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
				contentObject.put("managementReport", reportBodyDetails);
				contentObject.put("managementReportHeader", reportHeaderDetails);
				renderContent = LayoutGenerator.templateLoader("constructionProjectManagementDetails", contentObject,
						null, null, null);
				target = SUCCESS;
			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String ReorderPad() {
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		SalesOrderManagement salesObj = new SalesOrderManagementImpl();
		Date date = new Date();
		Format formatter = new SimpleDateFormat("MM/dd/yyyy");
		System.out.println(new Date());
		DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
		try {
			request = ServletActionContext.getRequest();
			startDate = (String) request.getParameter("startDate");
			endDate = (String) request.getParameter("endDate");
			type = (String) request.getParameter("type");
			if ((startDate == null || (CommonUtility.validateString(startDate).length() < 1))
					&& ((CommonUtility.validateString(orderNumber).length() > 0)
							|| (CommonUtility.validateString(customerPoNumber).length() > 0)
							|| CommonUtility.validateString(partNumberToERP).length() > 0)) {
				type = "orderNum";
			}
			if (type != null && type.trim().equalsIgnoreCase("orderNum")) {
				startDate = "01/01/1990";
				endDate = formatter.format(date);
			}
			if (endDate == null || endDate.trim().equalsIgnoreCase("")) {
				endDate = formatter.format(date);
			} else if (startDate == null || startDate.trim().equalsIgnoreCase("")) {
				startDate = "01/01/1990";
			}
			if (startDate == null || startDate.trim().equalsIgnoreCase("")) {
				Calendar c = Calendar.getInstance();
				c.setTime(date);
				int minusMonth = CommonUtility.validateNumber(
						CommonDBQuery.getSystemParamtersList().get("ORDER_HISTORY_DEFAULT_DURATION")) > 0
								? CommonUtility.validateNumber(
										CommonDBQuery.getSystemParamtersList().get("ORDER_HISTORY_DEFAULT_DURATION"))
								: 1;
				minusMonth = minusMonth * -1;
				c.add(Calendar.MONTH, minusMonth);
				startDate = formatter.format(c.getTime());
			}

			SalesModel salesInputParameter = new SalesModel();
			HttpSession session = request.getSession();

			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);

			int userId = CommonUtility.validateNumber(sessionUserId);
			String entityId = (String) session.getAttribute("entityId");
			;
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			ArrayList<ProductsModel> salesOrderListByItems = null;
			entityIDType = (entityIDType == null) ? "Ship" : entityIDType;
			if (userId > 1) {
				String userToken = (String) session.getAttribute("userToken");
				boolean flag = true;
				displayAccountOrderInformation = "Y";
				if (CommonUtility.validateString(customerPoNumber).length() > 0) {
					customerPoNumber = customerPoNumber.trim();
					salesInputParameter.setPoNumber(customerPoNumber);
					salesInputParameter.setSearchString(customerPoNumber);
				} else if (CommonUtility.validateString(partNumberToERP).length() > 0) {
					partNumberToERP = partNumberToERP.trim();
					salesInputParameter.setPartNumber(partNumberToERP);
					salesInputParameter.setSearchString(partNumberToERP);
				}
				/*
				 * startDate = "01/01/1990"; endDate = formatter.format(date);
				 */
				salesInputParameter.setSearchString(searchString);
				// startDate = "";
				// endDate = "";
				searchString = "";
				String userName = (String) session.getAttribute(Global.USERNAME_KEY);
				salesInputParameter.setUserName(userName);
				salesInputParameter.setUserToken(userToken);
				salesInputParameter.setEntityId(CommonUtility.validateString(entityId));
				salesOrderDetailsByItems = salesObj.reorderPadInquiry(salesInputParameter);
				String partNumber = "";
				String delimit = "";
				if (salesOrderDetailsByItems != null && salesOrderDetailsByItems.size() > 0) {
					for (SalesModel salesOrderDetailsByItem : salesOrderDetailsByItems) {
						partNumber = partNumber + delimit + salesOrderDetailsByItem.getPartNumber();
						delimit = " OR ";
					}
				}
				salesOrderListByItems = ProductHunterSolr.getItemDetailsForGivenPartNumbers(subsetId, generalSubset,
						partNumber, 0, null, "partnumber");// buildPartNumberForInterActiveAdvoisor
				if (salesOrderDetailsByItems != null && salesOrderDetailsByItems.size() > 0
						&& salesOrderListByItems != null && salesOrderListByItems.size() > 0) {
					for (SalesModel salesOrderDetailsByItem : salesOrderDetailsByItems) {
						for (ProductsModel salesOrderListByItem : salesOrderListByItems) {
							if (salesOrderDetailsByItem.getPartNumber().trim()
									.equalsIgnoreCase(salesOrderListByItem.getPartNumber().trim())) {
								salesOrderDetailsByItem
										.setManufacturerPartNumber(salesOrderListByItem.getManufacturerPartNumber());
								salesOrderDetailsByItem.setItemId(salesOrderListByItem.getItemId());
								salesOrderDetailsByItem.setItemPriceId(salesOrderListByItem.getItemPriceId());
								break;
							}
						}
					}
				}

				System.out.println(salesOrderDetailsByItems.size());
				displayAccountOrderInformation = "N";
				flag = false;
				orderList = new ArrayList<SalesModel>();
				if (startDate != null && !startDate.trim().equalsIgnoreCase("")) {
					if (endDate == null) {
						endDate = "";
					}
					if (endDate.trim().equalsIgnoreCase("")) {
						endDate = formatter.format(date);
					}
					try {
						Date d1 = df.parse(startDate);
						Date d2 = df.parse(endDate);
						if (d1.after(d2)) {
							result = "Start Date must be greater than end date";
							flag = false;
						}
					} catch (ParseException e) {
						e.printStackTrace();
					}

					if (flag) {
						salesInputParameter.setUserId(userId);
						salesInputParameter.setOrderNum(orderNumber);
						salesInputParameter.setPoNumber(customerPoNumber);
						salesInputParameter.setStartDate(startDate);
						salesInputParameter.setPartNumber(partNumberToERP);
						salesInputParameter.setEndDate(endDate);
						salesInputParameter.setUserToken(userToken);
						salesInputParameter.setUserName((String) session.getAttribute(Global.USERNAME_KEY));
						salesInputParameter.setEntityId(CommonUtility.validateString(entityId));
						salesInputParameter.setCustomerNumber(
								session.getAttribute("customerId") != null ? (String) session.getAttribute("customerId")
										: "0");
						salesInputParameter.setCustomerCountry(session.getAttribute("customerCountry") != null
								? (String) session.getAttribute("customerCountry")
								: "");
						salesInputParameter.setBillToEntityId((String) session.getAttribute("billingEntityId"));
						salesInputParameter.setSession(session);
						salesInputParameter.setReqType(entityIDType);
					}
				} else {
					if (valueSubmited != null && valueSubmited.trim().equalsIgnoreCase("1")) {
						if (orderNumber != null && !orderNumber.trim().equalsIgnoreCase("")) {
						} else if (customerPoNumber != null && !customerPoNumber.trim().equalsIgnoreCase("")) {
						} else {
							result = "Please select a date range or enter some value to search.";
						}
					}
				}

				contentObject.put("orderNumber", orderNumber);
				contentObject.put("startDate", startDate);
				contentObject.put("endDate", endDate);
				contentObject.put("customerPoNumber", customerPoNumber);
				contentObject.put("orderList", orderList);
				contentObject.put("result", result);
				contentObject.put("type", type);
				contentObject.put("searchBy", searchBy);
				contentObject.put("salesOrderListByItems", salesOrderListByItems);
				contentObject.put("displayAccountOrderInformation", displayAccountOrderInformation);
				contentObject.put("salesOrderDetailsByItems", salesOrderDetailsByItems);
				renderContent = LayoutGenerator.templateLoader("ReorderPadPage", contentObject, null, null, null);
				target = SUCCESS;
			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String getQuoteList() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		SalesModel salesInputParameter = new SalesModel();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		SalesOrderManagement salesObj = new SalesOrderManagementImpl();
		salesInputParameter.setSession(session);
		String searchBy = (String) request.getParameter("searchBy");
		salesInputParameter.setSearchString(searchBy);
		contentObject = salesObj.getQuotes(salesInputParameter);
		if (contentObject != null) {
			target = "success";
		}
		renderContent = LayoutGenerator.templateLoader("PendingQuote", contentObject, null, null, null);
		return target;
	}

	public String getQuoteDetail() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		SalesModel salesInputParameter = new SalesModel();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		SalesOrderManagement salesObj = new SalesOrderManagementImpl();
		String orderId = request.getParameter("orderId");
		if (orderId != null && orderId.trim().length() > 0) {
			salesInputParameter.setOrderId(CommonUtility.validateNumber(orderId));
		}
		salesInputParameter.setSession(session);
		contentObject = salesObj.getQuoteDetail(salesInputParameter);
		if (contentObject != null) {
			target = "success";
		}
		renderContent = LayoutGenerator.templateLoader("QuoteDetail", contentObject, null, null, null);
		return target;
	}

	public String getTopProducts() throws JsonProcessingException {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		SalesModel salesInputParameter = new SalesModel();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		ArrayList<ProductsModel> itemDetails = new ArrayList<>();
		ArrayList<ProductsModel> itemList = new ArrayList<>();
		SalesOrderManagement salesObj = new SalesOrderManagementImpl();
		salesInputParameter.setSession(session);
		String tempSubset = (String) session.getAttribute("userSubsetId");
		String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
		int subsetId = Integer.parseInt(tempSubset);
		int generalSubsetId = Integer.parseInt(tempGeneralSubset);
		contentObject = salesObj.getTopProducts(salesInputParameter);
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String json = ow.writeValueAsString(contentObject.get("response"));
		String itemDetailJson = null;
		String rfqSearchField = null;
		if (CommonUtility.validateString(CommonDBQuery.getSystemParamtersList().get("RFQ_SEARCH_FIELD")).length() > 0) {
			rfqSearchField = CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("RFQ_SEARCH_FIELD"));
		} else {
			rfqSearchField = "partnumber";
		}
		try {
			JSONArray jsonRules = new JSONArray(json);
			for (int i = 0; i < jsonRules.length(); i++) {
				JSONObject obj = (JSONObject) jsonRules.get(i);
				String partnumber = obj.getString("partNumber");
				if (CommonUtility.validateString(partnumber).length() > 0) {
					partnumber = "\"" + partnumber + "\"";
					itemDetails = ProductHunterSolr.getItemDetailsForGivenPartNumbers(subsetId, generalSubsetId,
							CommonUtility.validateString(partnumber), 0, null, rfqSearchField);
					for (ProductsModel itemDetail : itemDetails) {
						itemDetail.setAttrId(obj.getInt("totalHits"));
						itemDetail.setDate(obj.getString("mostRecentInvoiceDate"));
						itemDetail.setPrice(obj.getDouble("totalPrice"));
						itemList.add(itemDetail);
					}

				}
			}
			itemDetailJson = new Gson().toJson(itemList);
		} catch (JSONException e) {
			e.printStackTrace();
		}

		if (contentObject != null) {
			target = "success";
		}
		renderContent = itemDetailJson;
		return target;
	}

	public String getTopCategories() throws JsonProcessingException {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		SalesModel salesInputParameter = new SalesModel();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		SalesOrderManagement salesObj = new SalesOrderManagementImpl();
		salesInputParameter.setSession(session);
		contentObject = salesObj.getTopCategories(salesInputParameter);
		ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String json = ow.writeValueAsString(contentObject.get("response"));
		System.out.println(json);
		if (contentObject != null) {
			target = "success";
		}
		renderContent = json;
		return target;
	}

	public String PaymentError() {
		HttpServletRequest request = ServletActionContext.getRequest();
		try {
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			String result = request.getParameter(CommonUtility
					.validateString(LayoutLoader.getMessageProperties().get("EN").getProperty("paypal.error.result")));
			String responseMsg = request.getParameter(CommonUtility.validateString(
					LayoutLoader.getMessageProperties().get("EN").getProperty("paypal.error.responseMsg")));
			Enumeration<String> parameterNames = request.getParameterNames();
			while (parameterNames.hasMoreElements()) {
				String paramName = parameterNames.nextElement();
				String[] paramValues = request.getParameterValues(paramName);
				System.out.println("Name :" + paramName);
				for (int i = 0; i < paramValues.length; i++) {
					String paramValue = paramValues[i];
					System.out.println("Value :" + paramValue);
				}
			}
			contentObject.put("result", result);
			contentObject.put("responseMsg", responseMsg);
			renderContent = LayoutGenerator.templateLoader("PaymentErrorPage", contentObject, null, null, null);
			target = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public void invoiceDetailToPrint() {

		request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		try {
			HttpSession session = request.getSession();
			String invoiceNumber = request.getParameter("invoiceNumber");
			String orderNumber = request.getParameter("orderNumber");
			String appendInvoiceNumber = "";
			SalesModel salesInputParameter = new SalesModel();
			salesInputParameter.setCustomerNumber(
					session.getAttribute("customerId") != null ? (String) session.getAttribute("customerId") : "0");
			salesInputParameter.setInvoiceNumber(invoiceNumber);
			if (CommonUtility.validateString(orderNumber).length() > 0) {
				salesInputParameter.setOrderNum(orderNumber);
			}
			SalesOrderManagement salesObj = new SalesOrderManagementImpl();
			String responseData = salesObj.getInvoiceRecall(salesInputParameter);
			if (CommonUtility.validateString(invoiceNumber).length() > 0) {
				appendInvoiceNumber = invoiceNumber;
			} else {
				appendInvoiceNumber = orderNumber;
			}
			response.setHeader("Content-Type", "application/pdf");
			response.setHeader("Content-Disposition", "attachment; filename=\\Invoice_" + appendInvoiceNumber + ".pdf");

			ServletOutputStream out = response.getOutputStream();

			BASE64Decoder decoder = new BASE64Decoder();
			byte[] decodedBytes = decoder.decodeBuffer(responseData);
			ByteArrayInputStream bis = new ByteArrayInputStream(decodedBytes);

			InputStream in = new BufferedInputStream(bis);

			byte[] buf = new byte[1024];
			int n = 0;
			while (-1 != (n = in.read(buf))) {
				out.write(buf, 0, n);
			}
			in.close();
			out.flush();
			out.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String invoiceSignature() {

		request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		String fileName = "";
		try {
			HttpSession session = request.getSession();
			String invoiceNumber = request.getParameter("invoiceNumber");
			String documentId = request.getParameter("documentId");
			String orderNumber = request.getParameter("orderNumber");
			SalesModel salesInputParameter = new SalesModel();
			Cimm2BCentralDocumentDetail documentLink = new Cimm2BCentralDocumentDetail();
			salesInputParameter.setCustomerNumber(
					session.getAttribute("customerId") != null ? (String) session.getAttribute("customerId") : "0");
			salesInputParameter.setInvoiceNumber(invoiceNumber);
			documentLink.setDocumentId(documentId);
			salesInputParameter.setOrderNum(orderNumber);
			salesInputParameter.setDocumentDetail(documentLink);

			SalesOrderManagement salesObj = new SalesOrderManagementImpl();
			String responseData = salesObj.getInvoiceRecall(salesInputParameter);
			BASE64Decoder decoder = new BASE64Decoder();

			byte[] decodedBytes = decoder.decodeBuffer(responseData);

			ByteArrayInputStream bis = new ByteArrayInputStream(decodedBytes);
			BufferedImage image = ImageIO.read(bis);
			bis.close();

			String folder = CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("INVOICE_SIGNATURE_DIRECTORY_PATH"));
			fileName = orderNumber + "_" + invoiceNumber + ".png";
			String saveFile = folder + fileName;

			File outputfile = new File(saveFile);
			ImageIO.write(image, "png", outputfile);

		} catch (Exception e) {
			e.printStackTrace();
		}
		renderContent = fileName;
		return SUCCESS;
	}

	public String vendorReturn() {
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
		int userId = CommonUtility.validateNumber(sessionUserId);
		try {
			if (searchString != null && !searchString.trim().equalsIgnoreCase("")) {
				String tmpArr[] = searchString.split(" ");
				startDate = tmpArr[1];
				if (startDate.contains("Older")) {
					startDate = "01/01/1990";
					endDate = tmpArr[6].substring(0, 8);
				} else {
					endDate = tmpArr[3].substring(0, 8);
				}
			} else {
				Date date = new Date();
				Format formatter = new SimpleDateFormat("MM/dd/yyyy");
				startDate = "01/01/1990";
				endDate = formatter.format(date);
			}
			String entityId = (String) session.getAttribute("entityId");
			;
			String userToken = (String) session.getAttribute("userToken");
			SalesModel salesInputParameter = new SalesModel();
			salesInputParameter.setUserId(userId);
			salesInputParameter.setStartDate(startDate);
			salesInputParameter.setEndDate(endDate);
			salesInputParameter.setUserToken(userToken);
			salesInputParameter.setTranstype("SO,DO,CS,CR,BR,RM");
			salesInputParameter.setEntityId(CommonUtility.validateString(entityId));
			salesInputParameter.setCustomerNumber(
					session.getAttribute("customerId") != null ? (String) session.getAttribute("customerId") : "0");
			salesInputParameter.setCustomerCountry(
					session.getAttribute("customerCountry") != null ? (String) session.getAttribute("customerCountry")
							: "");
			salesInputParameter.setBillToEntityId((String) session.getAttribute("billingEntityId"));
			salesInputParameter.setSession(session);
			SalesOrderManagement salesObj = new SalesOrderManagementImpl();
			orderList = salesObj.invoicedOrdersFromOrderHistory(salesInputParameter);
			contentObject.put("invoiceList", orderList);

			UsersModel user = UsersDAO.getUserEmail(userId);
			contentObject.put("userDetails", user);

			String userName = (String) session.getAttribute(Global.USERNAME_KEY);
			HashMap<String, Integer> userAddressId = UsersDAO.getDefaultAddressIdForBCAddressBook(userName);
			int defaultBillToId = userAddressId.get("Bill");
			String tempdefaultShipId = (String) session.getAttribute("defaultShipToId");
			int defaultShipToId = CommonUtility.validateNumber(tempdefaultShipId);
			HashMap<String, UsersModel> userAddress = UsersDAO.getUserAddressFromBCAddressBook(defaultBillToId,
					defaultShipToId);
			UsersModel billAddress = userAddress.get("Bill");
			UsersModel shipAddress = userAddress.get("Ship");

			if (session != null && session.getAttribute("loginCustomerName") != null) {
				contentObject.put("loginCustomerName",
						CommonUtility.validateString((String) session.getAttribute("loginCustomerName")));
			}
			contentObject.put("billAddress", billAddress);
			contentObject.put("shipAddress", shipAddress);

			if (userId > 1) {
				renderContent = LayoutGenerator.templateLoader("VendorReturnPage", contentObject, null, null, null);
				target = SUCCESS;
			} else {
				target = "SESSIONEXPIRED";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public String vendorReturnForm() {
		boolean flag = false;
		result = "";
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String tempSubset = (String) session.getAttribute("userSubsetId");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			ArrayList<SalesModel> itemList = new ArrayList<SalesModel>();
			for (int i = 0; i < PARTNUMARR.length; i++) {
				if (PARTNUMARR[i].trim().length() > 0 || DESCARR[i].trim().length() > 0
						|| ITEMQTYARR[i].trim().length() > 0) {// || returnReason[i].trim().length() > 0 ||
																// invoiceNumber[i].trim().length() > 0
					SalesModel salesModel = new SalesModel();
					salesModel.setPartNumber(PARTNUMARR[i] != null ? PARTNUMARR[i] : "");
					if (ITEMQTYARR[i].trim().length() > 0 && CommonUtility.validateNumber(ITEMQTYARR[i]) > 0)
						salesModel.setReturnQty(CommonUtility.validateNumber(ITEMQTYARR[i]));
					else
						salesModel.setReturnQty(CommonUtility.validateNumber("1"));
					salesModel.setShortDesc(DESCARR[i] != null ? DESCARR[i] : "");
					salesModel.setReturnReason(returnReason[i] != null ? returnReason[i] : "");
					salesModel.setInvoiceNumber(invoiceNumber[i] != null ? invoiceNumber[i] : "");
					salesModel.setReturnComment(returnComment[i] != null ? returnComment[i] : "");
					itemList.add(salesModel);
				}
			}
			SendMailModel sendMailModel = new SendMailModel();
			if (CommonUtility.validateString(request.getParameter("sendmailToCustomerOnly")).equalsIgnoreCase("Y")) {
				sendMailModel.setDefaultFalg(true);
				sendMailModel.setAdditionalName(request.getParameter("additionalName"));
			}
			String uploadedFileNames = request.getParameter("uploadedFileNames");
			if (uploadedFileNames != null && uploadedFileNames.length() > 0) {
				String filePath = CommonUtility
						.validateString(CommonDBQuery.getSystemParamtersList().get("TEMPUPLOADDIRECTORYPATH"));
				String[] uploadedFiles = uploadedFileNames.split(";");
				if (uploadedFiles.length > 0) {
					Map<String, String> attachmentDetails = new HashMap<>();
					for (String fullPath : uploadedFiles) {
						String serverPrefix = filePath + "/" + session.getId() + "_";
						attachmentDetails.put(fullPath.replace(serverPrefix, " "), fullPath);
					}
					sendMailModel.setAttachmentDetails(attachmentDetails);
				}
			}

			sendMailModel.setMailSubject(
					LayoutLoader.getMessageProperties().get(session.getAttribute("localeCode").toString().toUpperCase())
							.getProperty("sentmailconfig.vendorReturnReq.subject").trim());
			sendMailModel.setCustomerID(session.getAttribute("contactId").toString());
			sendMailModel.setFirstName(request.getParameter("firstName"));
			sendMailModel.setLastName(request.getParameter("lastName"));
			sendMailModel.setCompanyName(request.getParameter("companyName"));
			sendMailModel.setUserId(CommonUtility.validateNumber((String) session.getAttribute(Global.USERID_KEY)));
			if (session != null && session.getAttribute("loginCustomerName") != null) {
				sendMailModel.setCustomerName(
						CommonUtility.validateString((String) session.getAttribute("loginCustomerName")));
			}
			sendMailModel.setEmailAddress(request.getParameter("email"));
			sendMailModel.setFromEmailId(request.getParameter("fromEmail"));
			sendMailModel.setToEmailId(request.getParameter("toEmailId"));
			sendMailModel.setCcEmailId(request.getParameter("ccEmailId"));
			sendMailModel.setBccEmailId(request.getParameter("bccEmailId"));
			sendMailModel.setPhone(request.getParameter("phoneNumber"));
			sendMailModel.setShipTo(request.getParameter("shipTo"));
			sendMailModel.setAddress1(request.getParameter("address1"));
			sendMailModel.setAddress2(request.getParameter("address2"));
			sendMailModel.setJobTitle(request.getParameter("jobTitle"));
			sendMailModel.setSubsetId(subsetId);
			sendMailModel.setGeneralSubsetId(generalSubset);

			SendMailUtility sendMailUtility = new SendMailUtility();
			flag = sendMailUtility.sendvendorReturnMail(sendMailModel, itemList);
			if (flag) {
				result = "0|Request has been sent successfully.";
			} else {
				result = "1|Sorry, request failed. Please try again.";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		renderContent = result;

		return SUCCESS;
	}

	public String maxRecall() {

		request = ServletActionContext.getRequest();
		String docType = CommonUtility.validateString(request.getParameter("documentType"));
		String searchKeywordForOrderSuffix = CommonUtility.validateString(
				CommonDBQuery.getSystemParamtersList().get("SEARCH_KEYWORD_MAX_RECALL_FOR_ORDER_SUFFIX"));
		int searchKeyword = 0;
		String userValue = null;
		String documentId = null;
		if (docType != null && docType.equalsIgnoreCase("POD")) {
			searchKeyword = CommonUtility
					.validateNumber(CommonDBQuery.getSystemParamtersList().get("SEARCH_KEYWORD_MAX_RECALL"));
			userValue = CommonUtility.validateString(request.getParameter("orderNumber"));
			documentId = CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("DOCUMENT_ID_MAX_RECALL"));
		} else if (docType != null && docType.equalsIgnoreCase("Invoice")) {
			searchKeyword = CommonUtility
					.validateNumber(CommonDBQuery.getSystemParamtersList().get("SEARCH_KEYWORD_MAX_RECALL"));
			userValue = CommonUtility.validateString(request.getParameter("orderNumber"));
			documentId = CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("DOCUMENT_ID_MAX_RECALL1"));
		}
		String orderSuffix = CommonUtility.validateString(request.getParameter("orderNumberSuffix"));
		orderSuffix = "0" + orderSuffix;
		System.out.println("Order Suffix : " + orderSuffix);

		SalesModel salesInputParameter = new SalesModel();
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		ArrayList<SalesModel> maxList = new ArrayList<SalesModel>();
		try {
			salesInputParameter.setSearchKeyword(CommonUtility.validateParseIntegerToString(searchKeyword));
			salesInputParameter.setUserValue(userValue);
			salesInputParameter.setDocumentId(CommonUtility.validateString(documentId));
			salesInputParameter.setOrderSuffix(CommonUtility.validateNumber(orderSuffix));
			salesInputParameter
					.setSearchKeywordForOrderSuffix(CommonUtility.validateString(searchKeywordForOrderSuffix));
			SalesOrderManagement salesObj = new SalesOrderManagementImpl();
			SalesModel salesOrderOutput = salesObj.getmaxRecallInformation(salesInputParameter);
			if (salesOrderOutput != null) {
				maxList = salesOrderOutput.getMaxRecallList();
			}
			contentObject.put("responseType", "maxRecall");
			contentObject.put("maxRecallList", maxList);
			renderContent = LayoutGenerator.templateLoader("ResultLoaderPage", contentObject, null, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String downloadMaxRecallPDF() {
		String downloadPath = CommonUtility
				.validateString(CommonDBQuery.getSystemParamtersList().get("DOWNLOAD_PDF_FOR_MAXRECALL"));
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		try {
			request = ServletActionContext.getRequest();
			String maxRecallDownloadLink = CommonUtility.validateString(request.getParameter("downloadLink"));
			String orderNumber = CommonUtility.validateString(request.getParameter("orderNumber"));
			String orderNumberSuffix = CommonUtility.validateString(request.getParameter("orderNumberSuffix"));
			String docType = CommonUtility.validateString(request.getParameter("documentType"));
			if (docType != null && docType.equalsIgnoreCase("Invoice")) {
				downloadPath = downloadPath + "Invoice" + orderNumber + "-" + orderNumberSuffix + ".pdf";
			} else if (docType != null && docType.equalsIgnoreCase("POD")) {
				downloadPath = downloadPath + "POD" + orderNumber + "-" + orderNumberSuffix + ".pdf";
			}
			if (maxRecallDownloadLink != null && maxRecallDownloadLink.trim().length() > 0) {
				URL url = new URL(maxRecallDownloadLink);
				InputStream in = url.openStream();
				Files.copy(in, Paths.get(downloadPath), StandardCopyOption.REPLACE_EXISTING);
				in.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		contentObject.put("downloadMaxRecallLink", downloadPath);
		contentObject.put("responseType", "downloadMaxRecallPDF");
		renderContent = LayoutGenerator.templateLoader("AjaxResultPage", contentObject, null, null, null);
		return SUCCESS;
	}

	public String downloadMaxRecallPDFbyDocId() {

		String maxRecallPDFDownloadLink = "";
		LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
		try {
			request = ServletActionContext.getRequest();
			String pdfDocId = CommonUtility.validateString(request.getParameter("pdfDocId"));
			SalesModel salesInputParameter = new SalesModel();
			salesInputParameter.setPdfDocumentId(CommonUtility.validateString(pdfDocId));
			SalesOrderManagement salesObj = new SalesOrderManagementImpl();
			SalesModel salesOrderOutput = salesObj.getmaxRecallInfoByDocId(salesInputParameter);
			if (salesOrderOutput != null
					&& CommonUtility.validateNumber(salesOrderOutput.getStatus()) == HttpStatus.SC_OK
					&& salesOrderOutput.getMaxUrl().length() > 0) {
				maxRecallPDFDownloadLink = salesOrderOutput.getMaxUrl();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		contentObject.put("downloadMaxRecallLink", maxRecallPDFDownloadLink);
		contentObject.put("responseType", "downloadMaxRecallPDF");
		renderContent = LayoutGenerator.templateLoader("AjaxResultPage", contentObject, null, null, null);
		return SUCCESS;
	}

	public String vendorItems() {
		try {
			request = ServletActionContext.getRequest();
			HttpSession session = request.getSession();
			String sessionUserId = (String) session.getAttribute(Global.USERID_KEY);
			int userId = CommonUtility.validateNumber(sessionUserId);
			String customerErpId = (String) session.getAttribute("customerId");
			LinkedHashMap<String, Object> contentObject = new LinkedHashMap<String, Object>();
			Cimm2BCentralVendorItemsRequest vendorItemsRequest = new Cimm2BCentralVendorItemsRequest();
			vendorItemsRequest.setCustomerERPId(customerErpId);
			String GET_VERDOR_ITEMS_URL = CommonUtility
					.validateString(CommonDBQuery.getSystemParamtersList().get("GET_VERDOR_ITEMS_API"));
			Cimm2BCentralResponseEntity vendorItemsResponseEntity = null;
			if (userId > 1) {
				vendorItemsResponseEntity = Cimm2BCentralClient.getInstance().getDataObject(GET_VERDOR_ITEMS_URL,
						"POST", vendorItemsRequest, Cimm2BCentralVendorItemsResponse.class);
			}
			ArrayList<VendorItemsModel> vendorItemsModelList = new ArrayList<VendorItemsModel>();
			ArrayList<Cimm2BCentralVendorItemsResponse> vendorItemsResponse = new ArrayList<Cimm2BCentralVendorItemsResponse>();
			ArrayList<Cimm2BCentralVendorLineItems> vendorLineItemsResponse = new ArrayList<Cimm2BCentralVendorLineItems>();
			if (vendorItemsResponseEntity != null && vendorItemsResponseEntity.getData() != null
					&& vendorItemsResponseEntity.getStatus().getCode() == HttpStatus.SC_OK) {
				vendorItemsResponse = (ArrayList<Cimm2BCentralVendorItemsResponse>) vendorItemsResponseEntity.getData();
				for (Cimm2BCentralVendorItemsResponse cimm2BCentralVendorItemsResponse : vendorItemsResponse) {
					vendorLineItemsResponse = (ArrayList<Cimm2BCentralVendorLineItems>) cimm2BCentralVendorItemsResponse
							.getLineItems();
					if (vendorLineItemsResponse != null && vendorLineItemsResponse.size() > 0) {
						for (Cimm2BCentralVendorLineItems cimm2BCentralVendorLineItems : vendorLineItemsResponse) {
							VendorItemsModel vendorItemsModel = new VendorItemsModel();
							vendorItemsModel.setPartNumber(cimm2BCentralVendorLineItems.getPartNumber());
							vendorItemsModel.setCalculateTax(cimm2BCentralVendorLineItems.getCalculateTax());
							vendorItemsModel.setItemCount(cimm2BCentralVendorLineItems.getItemCount());
							vendorItemsModel.setNonStockFlag(cimm2BCentralVendorLineItems.getNonStockFlag());
							vendorItemsModel.setPrintPriceFlag(cimm2BCentralVendorLineItems.getPrintPriceFlag());
							vendorItemsModel.setCustomerERPId(cimm2BCentralVendorItemsResponse.getCustomerERPId());
							vendorItemsModelList.add(vendorItemsModel);
						}
					}
				}
				contentObject.put("vendorItemsList", vendorItemsModelList);
			}
			renderContent = LayoutGenerator.templateLoader("vendorItemsPage", contentObject, null, null, null);
			return SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String vendorItemDetails() {
		target = "ResultLoader";
		request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		ArrayList<ProductsModel> productListData = null;
		try {
			String tempSubset = (String) session.getAttribute("userSubsetId");
			String tempGeneralSubset = (String) session.getAttribute("generalCatalog");
			int subsetId = CommonUtility.validateNumber(tempSubset);
			int generalSubset = CommonUtility.validateNumber(tempGeneralSubset);
			int buyingCompanyId = CommonUtility
					.validateNumber(CommonUtility.validateString((String) session.getAttribute("buyingCompanyId")));
			String jsonString = request.getParameter("jsonString");
			ArrayList<ProductsModel> productListDataList = new ArrayList<ProductsModel>();
			String jsonResponse = "";
			if (CommonUtility.validateString(jsonString).length() > 0) {
				Gson parseInput = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
				ProductsModel parsedData = parseInput.fromJson(jsonString, ProductsModel.class);
				ArrayList<ProductsModel> vendorItems = parsedData.getItemDataList();
				if (vendorItems != null && vendorItems.size() > 0) {
					for (ProductsModel productsModel : vendorItems) {
						productListData = new ArrayList<ProductsModel>();
						String partNumber = productsModel.getPartNumber();
						String itemPartNumber = "\"" + partNumber + "\"";
						productListData = ProductHunterSolr.getItemDetailsForGivenPartNumbers(subsetId, generalSubset,
								itemPartNumber, 0, null, "partnumber");
						if (productListData != null && !productListData.isEmpty()) {
							for (ProductsModel productModel : productListData) {
								int itemId = productModel.getItemId();
								LinkedHashMap<Integer, ArrayList<ProductsModel>> customerPartNum = ProductHunterSolr
										.getcustomerPartnumber(Integer.toString(itemId), buyingCompanyId,
												buyingCompanyId);
								if (customerPartNum != null && customerPartNum.size() > 0) {
									for (int i = 0; i < customerPartNum.size(); i++) {
										productModel.setCustomerPartNumberList(customerPartNum.get(itemId));
									}
								}
								productListDataList.add(productModel);
							}
						}
					}
				}
			}
			Gson gson = new Gson();
			if (productListDataList != null && !productListDataList.isEmpty()) {
				jsonResponse = gson.toJson(productListDataList);
			} else {
				jsonResponse = "No Result Found";
			}
			renderContent = jsonResponse;
			System.out.println("Items list json Response : " + jsonResponse);
			target = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return target;
	}

	public void setItemAvailabilityStatus(String itemAvailabilityStatus) {
		this.itemAvailabilityStatus = itemAvailabilityStatus;
	}

	public String getItemAvailabilityStatus() {
		return itemAvailabilityStatus;
	}

	public void setPaymentTermsCode(String paymentTermsCode) {
		this.paymentTermsCode = paymentTermsCode;
	}

	public String getPaymentTermsCode() {
		return paymentTermsCode;
	}

	public void setPartNumberToERP(String partNumberToERP) {
		this.partNumberToERP = partNumberToERP;
	}

	public String getPartNumberToERP() {
		return partNumberToERP;
	}

	public String getUpsFrieghtCharges() {
		return upsFrieghtCharges;
	}

	public void setUpsFrieghtCharges(String upsFrieghtCharges) {
		this.upsFrieghtCharges = upsFrieghtCharges;
	}

	public String getDiscountCoupons() {
		return discountCoupons;
	}

	public void setDiscountCoupons(String discountCoupons) {
		this.discountCoupons = discountCoupons;
	}

	public boolean isManualDiscountApply() {
		return manualDiscountApply;
	}

	public void setManualDiscountApply(boolean manualDiscountApply) {
		this.manualDiscountApply = manualDiscountApply;
	}

	public String getOrderErpId() {
		return orderErpId;
	}

	public void setOrderErpId(String orderErpId) {
		this.orderErpId = orderErpId;
	}

	public String getBranchID() {
		return branchID;
	}

	public void setBranchID(String branchID) {
		this.branchID = branchID;
	}

	public String getSaveCard() {
		return saveCard;
	}

	public void setSaveCard(String saveCard) {
		this.saveCard = saveCard;
	}

	public String getBillEntityId() {
		return billEntityId;
	}

	public void setBillEntityId(String billEntityId) {
		this.billEntityId = billEntityId;
	}

	public String getShipEntityId() {
		return shipEntityId;
	}

	public void setShipEntityId(String shipEntityId) {
		this.shipEntityId = shipEntityId;
	}

	public String getGasPoNumber() {
		return gasPoNumber;
	}

	public void setGasPoNumber(String gasPoNumber) {
		this.gasPoNumber = gasPoNumber;
	}

	public String getShippingAccountNumber() {
		return shippingAccountNumber;
	}

	public void setShippingAccountNumber(String shippingAccountNumber) {
		this.shippingAccountNumber = shippingAccountNumber;
	}

	public String getAuEmail() {
		return auEmail;
	}

	public void setAuEmail(String auEmail) {
		this.auEmail = auEmail;
	}

	public String getAdditionalName() {
		return additionalName;
	}

	public void setAdditionalName(String additionalName) {
		this.additionalName = additionalName;
	}

	public String getAdditionalPickupPerson() {
		return additionalPickupPerson;
	}

	public void setAdditionalPickupPerson(String additionalPickupPerson) {
		this.additionalPickupPerson = additionalPickupPerson;
	}

	public String getSelectedShipId() {
		return selectedShipId;
	}

	public void setSelectedShipId(String selectedShipId) {
		this.selectedShipId = selectedShipId;
	}
}