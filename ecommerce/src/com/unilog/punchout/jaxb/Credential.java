//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.10.07 at 10:13:20 AM EDT 
//


package com.unilog.punchout.jaxb;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}Identity"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element ref="{}SharedSecret"/>
 *           &lt;element ref="{}DigitalSignature"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="domain" use="required" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" />
 *       &lt;attribute name="type">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *             &lt;enumeration value="marketplace"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "identity",
    "sharedSecret",
    "digitalSignature"
})
@XmlRootElement(name = "Credential")
public class Credential
    implements Serializable, Equals, HashCode, ToString
{

    @XmlElement(name = "Identity", required = true)
    protected Identity identity;
    @XmlElement(name = "SharedSecret")
    protected SharedSecret sharedSecret;
    @XmlElement(name = "DigitalSignature")
    protected DigitalSignature digitalSignature;
    @XmlAttribute(name = "domain", required = true)
    @XmlSchemaType(name = "anySimpleType")
    protected String domain;
    @XmlAttribute(name = "type")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String type;

    /**
     * Gets the value of the identity property.
     * 
     * @return
     *     possible object is
     *     {@link Identity }
     *     
     */
    public Identity getIdentity() {
        return identity;
    }

    /**
     * Sets the value of the identity property.
     * 
     * @param value
     *     allowed object is
     *     {@link Identity }
     *     
     */
    public void setIdentity(Identity value) {
        this.identity = value;
    }

    /**
     * Gets the value of the sharedSecret property.
     * 
     * @return
     *     possible object is
     *     {@link SharedSecret }
     *     
     */
    public SharedSecret getSharedSecret() {
        return sharedSecret;
    }

    /**
     * Sets the value of the sharedSecret property.
     * 
     * @param value
     *     allowed object is
     *     {@link SharedSecret }
     *     
     */
    public void setSharedSecret(SharedSecret value) {
        this.sharedSecret = value;
    }

    /**
     * Gets the value of the digitalSignature property.
     * 
     * @return
     *     possible object is
     *     {@link DigitalSignature }
     *     
     */
    public DigitalSignature getDigitalSignature() {
        return digitalSignature;
    }

    /**
     * Sets the value of the digitalSignature property.
     * 
     * @param value
     *     allowed object is
     *     {@link DigitalSignature }
     *     
     */
    public void setDigitalSignature(DigitalSignature value) {
        this.digitalSignature = value;
    }

    /**
     * Gets the value of the domain property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDomain() {
        return domain;
    }

    /**
     * Sets the value of the domain property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDomain(String value) {
        this.domain = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Identity theIdentity;
            theIdentity = this.getIdentity();
            strategy.appendField(locator, this, "identity", buffer, theIdentity);
        }
        {
            SharedSecret theSharedSecret;
            theSharedSecret = this.getSharedSecret();
            strategy.appendField(locator, this, "sharedSecret", buffer, theSharedSecret);
        }
        {
            DigitalSignature theDigitalSignature;
            theDigitalSignature = this.getDigitalSignature();
            strategy.appendField(locator, this, "digitalSignature", buffer, theDigitalSignature);
        }
        {
            String theDomain;
            theDomain = this.getDomain();
            strategy.appendField(locator, this, "domain", buffer, theDomain);
        }
        {
            String theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Credential)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Credential that = ((Credential) object);
        {
            Identity lhsIdentity;
            lhsIdentity = this.getIdentity();
            Identity rhsIdentity;
            rhsIdentity = that.getIdentity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identity", lhsIdentity), LocatorUtils.property(thatLocator, "identity", rhsIdentity), lhsIdentity, rhsIdentity)) {
                return false;
            }
        }
        {
            SharedSecret lhsSharedSecret;
            lhsSharedSecret = this.getSharedSecret();
            SharedSecret rhsSharedSecret;
            rhsSharedSecret = that.getSharedSecret();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sharedSecret", lhsSharedSecret), LocatorUtils.property(thatLocator, "sharedSecret", rhsSharedSecret), lhsSharedSecret, rhsSharedSecret)) {
                return false;
            }
        }
        {
            DigitalSignature lhsDigitalSignature;
            lhsDigitalSignature = this.getDigitalSignature();
            DigitalSignature rhsDigitalSignature;
            rhsDigitalSignature = that.getDigitalSignature();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "digitalSignature", lhsDigitalSignature), LocatorUtils.property(thatLocator, "digitalSignature", rhsDigitalSignature), lhsDigitalSignature, rhsDigitalSignature)) {
                return false;
            }
        }
        {
            String lhsDomain;
            lhsDomain = this.getDomain();
            String rhsDomain;
            rhsDomain = that.getDomain();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "domain", lhsDomain), LocatorUtils.property(thatLocator, "domain", rhsDomain), lhsDomain, rhsDomain)) {
                return false;
            }
        }
        {
            String lhsType;
            lhsType = this.getType();
            String rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Identity theIdentity;
            theIdentity = this.getIdentity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identity", theIdentity), currentHashCode, theIdentity);
        }
        {
            SharedSecret theSharedSecret;
            theSharedSecret = this.getSharedSecret();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sharedSecret", theSharedSecret), currentHashCode, theSharedSecret);
        }
        {
            DigitalSignature theDigitalSignature;
            theDigitalSignature = this.getDigitalSignature();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "digitalSignature", theDigitalSignature), currentHashCode, theDigitalSignature);
        }
        {
            String theDomain;
            theDomain = this.getDomain();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "domain", theDomain), currentHashCode, theDomain);
        }
        {
            String theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
