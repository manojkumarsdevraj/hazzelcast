//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.10.07 at 10:13:20 AM EDT 
//


package com.unilog.punchout.jaxb;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}OrderRequestHeader"/>
 *         &lt;element ref="{}ItemOut" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "orderRequestHeader",
    "itemOut"
})
@XmlRootElement(name = "OrderRequest")
public class OrderRequest
    implements Serializable, Equals, HashCode, ToString
{

    /**
	 * 
	 */
	private static final long serialVersionUID = 4585170784046259683L;
	@XmlElement(name = "OrderRequestHeader", required = true)
    protected OrderRequestHeader orderRequestHeader;
    @XmlElement(name = "ItemOut", required = true)
    protected List<ItemOut> itemOut;

    /**
     * Gets the value of the orderRequestHeader property.
     * 
     * @return
     *     possible object is
     *     {@link OrderRequestHeader }
     *     
     */
    public OrderRequestHeader getOrderRequestHeader() {
        return orderRequestHeader;
    }

    /**
     * Sets the value of the orderRequestHeader property.
     * 
     * @param value
     *     allowed object is
     *     {@link OrderRequestHeader }
     *     
     */
    public void setOrderRequestHeader(OrderRequestHeader value) {
        this.orderRequestHeader = value;
    }

    /**
     * Gets the value of the itemOut property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the itemOut property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getItemOut().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ItemOut }
     * 
     * 
     */
    public List<ItemOut> getItemOut() {
        if (itemOut == null) {
            itemOut = new ArrayList<ItemOut>();
        }
        return this.itemOut;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            OrderRequestHeader theOrderRequestHeader;
            theOrderRequestHeader = this.getOrderRequestHeader();
            strategy.appendField(locator, this, "orderRequestHeader", buffer, theOrderRequestHeader);
        }
        {
            List<ItemOut> theItemOut;
            theItemOut = (((this.itemOut!= null)&&(!this.itemOut.isEmpty()))?this.getItemOut():null);
            strategy.appendField(locator, this, "itemOut", buffer, theItemOut);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof OrderRequest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final OrderRequest that = ((OrderRequest) object);
        {
            OrderRequestHeader lhsOrderRequestHeader;
            lhsOrderRequestHeader = this.getOrderRequestHeader();
            OrderRequestHeader rhsOrderRequestHeader;
            rhsOrderRequestHeader = that.getOrderRequestHeader();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orderRequestHeader", lhsOrderRequestHeader), LocatorUtils.property(thatLocator, "orderRequestHeader", rhsOrderRequestHeader), lhsOrderRequestHeader, rhsOrderRequestHeader)) {
                return false;
            }
        }
        {
            List<ItemOut> lhsItemOut;
            lhsItemOut = (((this.itemOut!= null)&&(!this.itemOut.isEmpty()))?this.getItemOut():null);
            List<ItemOut> rhsItemOut;
            rhsItemOut = (((that.itemOut!= null)&&(!that.itemOut.isEmpty()))?that.getItemOut():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemOut", lhsItemOut), LocatorUtils.property(thatLocator, "itemOut", rhsItemOut), lhsItemOut, rhsItemOut)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            OrderRequestHeader theOrderRequestHeader;
            theOrderRequestHeader = this.getOrderRequestHeader();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orderRequestHeader", theOrderRequestHeader), currentHashCode, theOrderRequestHeader);
        }
        {
            List<ItemOut> theItemOut;
            theItemOut = (((this.itemOut!= null)&&(!this.itemOut.isEmpty()))?this.getItemOut():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemOut", theItemOut), currentHashCode, theItemOut);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
